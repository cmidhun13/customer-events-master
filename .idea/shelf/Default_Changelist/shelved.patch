Index:  cucumber-html-reports/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ cucumber-html-reports/index.html b/ cucumber-html-reports/index.html
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/ cucumber-html-reports/index.html	(date 1613491889000)
@@ -0,0 +1,14 @@
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta charset="utf-8">
+    <title>Cucumber Features</title>
+    <link href="style.css" rel="stylesheet">
+    <script src="jquery-1.8.2.min.js"></script>
+    <script src="formatter.js"></script>
+    <script src="report.js"></script>
+  </head>
+  <body>
+    <div class="cucumber-report"></div>
+  </body>
+</html>
Index:  cucumber-html-reports/formatter.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ cucumber-html-reports/formatter.js b/ cucumber-html-reports/formatter.js
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/ cucumber-html-reports/formatter.js	(date 1613491889000)
@@ -0,0 +1,228 @@
+var CucumberHTML = {};
+
+CucumberHTML.DOMFormatter = function(rootNode) {
+  var currentUri;
+  var currentFeature;
+  var currentElement;
+  var currentSteps;
+
+  var currentStepIndex;
+  var currentStep;
+  var $templates = $(CucumberHTML.templates);
+
+  this.uri = function(uri) {
+    currentUri = uri;
+  };
+
+  this.feature = function(feature) {
+    currentFeature = blockElement(rootNode, feature, 'feature');
+  };
+
+  this.background = function(background) {
+    currentElement = featureElement(background, 'background');
+    currentStepIndex = 1;
+  };
+
+  this.scenario = function(scenario) {
+    currentElement = featureElement(scenario, 'scenario');
+    currentStepIndex = 1;
+  };
+
+  this.scenarioOutline = function(scenarioOutline) {
+    currentElement = featureElement(scenarioOutline, 'scenario_outline');
+    currentStepIndex = 1;
+  };
+
+  this.step = function(step) {
+    var stepElement = $('.step', $templates).clone();
+    stepElement.appendTo(currentSteps);
+    populate(stepElement, step, 'step');
+
+    if (step.doc_string) {
+      docString = $('.doc_string', $templates).clone();
+      docString.appendTo(stepElement);
+      // TODO: use a syntax highlighter based on the content_type
+      docString.text(step.doc_string.value);
+    }
+    if (step.rows) {
+      dataTable = $('.data_table', $templates).clone();
+      dataTable.appendTo(stepElement);
+      var tBody = dataTable.find('tbody');
+      $.each(step.rows, function(index, row) {
+        var tr = $('<tr></tr>').appendTo(tBody);
+        $.each(row.cells, function(index, cell) {
+          var td = $('<td>' + cell + '</td>').appendTo(tBody);
+        });
+      });
+    }
+  };
+
+  this.examples = function(examples) {
+    var examplesElement = blockElement(currentElement.children('details'), examples, 'examples');
+    var examplesTable = $('.examples_table', $templates).clone();
+    examplesTable.appendTo(examplesElement.children('details'));
+
+    $.each(examples.rows, function(index, row) {
+      var parent = index == 0 ? examplesTable.find('thead') : examplesTable.find('tbody');
+      var tr = $('<tr></tr>').appendTo(parent);
+      $.each(row.cells, function(index, cell) {
+        var td = $('<td>' + cell + '</td>').appendTo(tr);
+      });
+    });
+  };
+
+  this.match = function(match) {
+    currentStep = currentSteps.find('li:nth-child(' + currentStepIndex + ')');
+    currentStepIndex++;
+  };
+
+  this.result = function(result) {
+    currentStep.addClass(result.status);
+    if (result.status == 'failed') {
+      populateStepError(currentStep, result.error_message);
+    }
+    currentElement.addClass(result.status);
+    var isLastStep = currentSteps.find('li:nth-child(' + currentStepIndex + ')').length == 0;
+    if (isLastStep) {
+      if (currentSteps.find('.failed').length == 0) {
+        // No failed steps. Collapse it.
+        currentElement.find('details').removeAttr('open');
+      } else {
+        currentElement.find('details').attr('open', 'open');
+      }
+    }
+  };
+
+  this.embedding = function(mimeType, data) {
+    if (mimeType.match(/^image\//))
+    {
+      currentStep.append('<img src="' + data + '">');
+    }
+    else if (mimeType.match(/^video\//))
+    {
+      currentStep.append('<video src="' + data + '" type="' + mimeType + '" autobuffer controls>Your browser doesn\'t support video.</video>');
+    }
+    else if (mimeType.match(/^text\//))
+    {
+      this.write(data);
+    }
+  };
+
+  this.write = function(text) {
+    currentStep.append('<pre class="embedded-text">' + text + '</pre>');
+  };
+
+  this.before = function(before) {
+    if(before.status != 'passed') {
+      currentElement = featureElement({keyword: 'Before', name: '', description: ''}, 'before');
+      currentStepIndex = 1;
+      populateStepError($('details', currentElement), before.error_message);
+    }
+  };
+
+  this.after = function(after) {
+    if(after.status != 'passed') {
+      currentElement = featureElement({keyword: 'After', name: '', description: ''}, 'after');
+      currentStepIndex++;
+      populateStepError($('details', currentElement), after.error_message);
+    }
+  };
+
+  function featureElement(statement, itemtype) {
+    var e = blockElement(currentFeature.children('details'), statement, itemtype);
+
+    currentSteps = $('.steps', $templates).clone();
+    currentSteps.appendTo(e.children('details'));
+
+    return e;
+  }
+
+  function blockElement(parent, statement, itemtype) {
+    var e = $('.blockelement', $templates).clone();
+    e.appendTo(parent);
+    return populate(e, statement, itemtype);
+  }
+
+  function populate(e, statement, itemtype) {
+    populateTags(e, statement.tags);
+    populateComments(e, statement.comments);
+    e.find('.keyword').text(statement.keyword);
+    e.find('.name').text(statement.name);
+    e.find('.description').text(statement.description);
+    e.attr('itemtype', 'http://cukes.info/microformat/' + itemtype);
+    e.addClass(itemtype);
+    return e;
+  }
+
+  function populateComments(e, comments) {
+    if (comments !== undefined) {
+      var commentsNode = $('.comments', $templates).clone().prependTo(e.find('.header'));
+      $.each(comments, function(index, comment) {
+        var commentNode = $('.comment', $templates).clone().appendTo(commentsNode);
+        commentNode.text(comment.value);
+      });
+    }
+  }
+
+  function populateTags(e, tags) {
+    if (tags !== undefined) {
+      var tagsNode = $('.tags', $templates).clone().prependTo(e.find('.header'));
+      $.each(tags, function(index, tag) {
+        var tagNode = $('.tag', $templates).clone().appendTo(tagsNode);
+        tagNode.text(tag.name);
+      });
+    }
+  }
+
+  function populateStepError(e, error) {
+    if (error !== undefined) {
+      errorNode = $('.error', $templates).clone().appendTo(e);
+      errorNode.text(error);
+    }
+  }
+};
+
+CucumberHTML.templates = '<div>\
+  <section class="blockelement" itemscope>\
+    <details open>\
+      <summary class="header">\
+        <span class="keyword" itemprop="keyword">Keyword</span>: <span itemprop="name" class="name">This is the block name</span>\
+      </summary>\
+      <div itemprop="description" class="description">The description goes here</div>\
+    </details>\
+  </section>\
+\
+  <ol class="steps"></ol>\
+\
+  <ol>\
+    <li class="step"><div class="header"></div><span class="keyword" itemprop="keyword">Keyword</span><span class="name" itemprop="name">Name</span></li>\
+  </ol>\
+\
+  <pre class="doc_string"></pre>\
+\
+  <pre class="error"></pre>\
+\
+  <table class="data_table">\
+    <tbody>\
+    </tbody>\
+  </table>\
+\
+  <table class="examples_table">\
+    <thead></thead>\
+    <tbody></tbody>\
+  </table>\
+\
+  <section class="embed">\
+    <img itemprop="screenshot" class="screenshot" />\
+  </section>\
+  <div class="tags"></div>\
+  <span class="tag"></span>\
+  <div class="comments"></div>\
+  <div class="comment"></div>\
+<div>';
+
+if (typeof module !== 'undefined') {
+  module.exports = CucumberHTML;
+} else if (typeof define !== 'undefined') {
+  define([], function() { return CucumberHTML; });
+}
Index:  cucumber-html-reports/cucumber.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ cucumber-html-reports/cucumber.json b/ cucumber-html-reports/cucumber.json
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/ cucumber-html-reports/cucumber.json	(date 1613491889000)
@@ -0,0 +1,232 @@
+[
+  {
+    "line": 1,
+    "elements": [
+      {
+        "line": 3,
+        "name": "create customer fails when organization is not provided",
+        "description": "",
+        "id": "testing-customer-rest-api;create-customer-fails-when-organization-is-not-provided",
+        "type": "scenario",
+        "keyword": "Scenario",
+        "steps": [
+          {
+            "result": {
+              "duration": 1891057900,
+              "status": "passed"
+            },
+            "line": 4,
+            "name": "I am user and entering customer details",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.i_am_user_and_entering_customer_details()"
+            },
+            "keyword": "Given "
+          },
+          {
+            "result": {
+              "duration": 579400,
+              "status": "passed"
+            },
+            "line": 5,
+            "name": "organization is not provided",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.organization_is_not_provided()"
+            },
+            "keyword": "When "
+          },
+          {
+            "result": {
+              "duration": 1516214800,
+              "status": "passed"
+            },
+            "line": 6,
+            "name": "Call create api with givens details",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.call_create_api_with_givens_details()"
+            },
+            "keyword": "Then "
+          },
+          {
+            "result": {
+              "duration": 37503300,
+              "status": "passed"
+            },
+            "line": 7,
+            "name": "Return client error as  organization is not provided in payload post request",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.return_client_error_organization_is_not_provided_in_post_request()"
+            },
+            "keyword": "And "
+          }
+        ]
+      },
+      {
+        "line": 10,
+        "name": "create customer Success",
+        "description": "",
+        "id": "testing-customer-rest-api;create-customer-success",
+        "type": "scenario",
+        "keyword": "Scenario",
+        "steps": [
+          {
+            "result": {
+              "duration": 18570200,
+              "status": "passed"
+            },
+            "line": 11,
+            "name": "Enter customer details with organization in payload",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.enter_customer_details_with_organization_in_payload()"
+            },
+            "keyword": "Given "
+          },
+          {
+            "result": {
+              "duration": 726700,
+              "status": "passed"
+            },
+            "line": 12,
+            "name": "organization is provided with valid id",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.organization_is_provided_with_valid_id()"
+            },
+            "keyword": "When "
+          },
+          {
+            "result": {
+              "duration": 337927000,
+              "status": "passed"
+            },
+            "line": 13,
+            "name": "create the customer with given details",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.create_the_customer_with_given_details()"
+            },
+            "keyword": "Then "
+          }
+        ]
+      }
+    ],
+    "name": "Testing customer REST API",
+    "description": "",
+    "id": "testing-customer-rest-api",
+    "keyword": "Feature",
+    "uri": "src/test/resources/Features/create_customer.feature",
+    "tags": []
+  },
+  {
+    "line": 1,
+    "elements": [
+      {
+        "line": 3,
+        "name": "update customer fails when customerId not provided",
+        "description": "",
+        "id": "testing-customer-update-rest-api;update-customer-fails-when-customerid-not-provided",
+        "type": "scenario",
+        "keyword": "Scenario",
+        "steps": [
+          {
+            "result": {
+              "duration": 31959700,
+              "status": "passed"
+            },
+            "line": 4,
+            "name": "I am user and entering update details",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.i_am_user_and_entering_update_details()"
+            },
+            "keyword": "Given "
+          },
+          {
+            "result": {
+              "duration": 458900,
+              "status": "passed"
+            },
+            "line": 5,
+            "name": "customerId is not provided",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.customerid_is_not_provided()"
+            },
+            "keyword": "When "
+          },
+          {
+            "result": {
+              "duration": 308176300,
+              "status": "passed"
+            },
+            "line": 6,
+            "name": "Call update api with givens details",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.call_update_api_with_givens_details()"
+            },
+            "keyword": "Then "
+          },
+          {
+            "result": {
+              "duration": 16768000,
+              "status": "passed"
+            },
+            "line": 7,
+            "name": "Return client error as  update is not provided in payload put request",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.return_client_error_as_update_is_not_provided_in_payload_put_request()"
+            },
+            "keyword": "And "
+          }
+        ]
+      },
+      {
+        "line": 10,
+        "name": "update customer Success",
+        "description": "",
+        "id": "testing-customer-update-rest-api;update-customer-success",
+        "type": "scenario",
+        "keyword": "Scenario",
+        "steps": [
+          {
+            "result": {
+              "duration": 56324800,
+              "status": "passed"
+            },
+            "line": 11,
+            "name": "Enter customer details with valid customerId in payload",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.enter_customer_details_with_valid_customerId_in_payload()"
+            },
+            "keyword": "Given "
+          },
+          {
+            "result": {
+              "duration": 661700,
+              "status": "passed"
+            },
+            "line": 12,
+            "name": "update details is provided with valid id",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.update_details_is_provided_with_valid_id()"
+            },
+            "keyword": "When "
+          },
+          {
+            "result": {
+              "duration": 211655100,
+              "status": "passed"
+            },
+            "line": 13,
+            "name": "update the customer with given details",
+            "match": {
+              "location": "CustomerControllerAcceptanceTest.update_the_customer_with_given_details()"
+            },
+            "keyword": "Then "
+          }
+        ]
+      }
+    ],
+    "name": "Testing customer update REST API",
+    "description": "",
+    "id": "testing-customer-update-rest-api",
+    "keyword": "Feature",
+    "uri": "src/test/resources/Features/update_customer.feature",
+    "tags": []
+  }
+]
\ No newline at end of file
Index:  cucumber-html-reports/style.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ cucumber-html-reports/style.css b/ cucumber-html-reports/style.css
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/ cucumber-html-reports/style.css	(date 1613491889000)
@@ -0,0 +1,96 @@
+.cucumber-report .body {
+  font-family: Helvetica,Arial,sans-serif;
+}
+
+.cucumber-report .keyword {
+  font-weight: bold;
+}
+
+.cucumber-report .description {
+  font-style: italic;
+  margin-left: 20px;
+}
+
+.cucumber-report details > section {
+  margin-left: 20px;
+}
+
+.cucumber-report ol.steps {
+  list-style-type: none;
+  margin-top: 0;
+  margin-bottom: 0;
+}
+
+.cucumber-report .step .embedded-text {
+  background: #dddddd;
+}
+
+.cucumber-report .doc_string {
+  margin: 0 0 0 20px;
+}
+
+.cucumber-report table {
+  border-collapse: collapse;
+  border: 1px;
+  border-style: solid;
+}
+
+.cucumber-report td, .cucumber-report th {
+  border: 1px;
+  border-style: solid;
+  padding-left: 4px;
+  padding-right: 4px;
+}
+
+.cucumber-report table {
+  margin-left: 20px;
+}
+
+.cucumber-report thead {
+  background-color: #C0C0C0;
+}
+
+.cucumber-report .passed {
+  background-color: #C5D88A;
+}
+
+.cucumber-report .undefined, .cucumber-report .pending {
+  background-color: #EAEC2D;
+}
+
+.cucumber-report .skipped {
+  background-color: #2DEAEC;
+}
+
+.cucumber-report .failed {
+  background-color: #D88A8A;
+}
+
+.cucumber-report .tags {
+  display: inline;
+}
+
+.cucumber-report .tag {
+  margin-right: 0.25em;
+  color: #246ac1;
+}
+
+.cucumber-report .comments {
+  display: inline;
+}
+
+.cucumber-report .comment {
+  margin 0;
+  padding 0;
+}
+
+.cucumber-report .error {
+  margin: .2em .75em;
+  padding: .2em;
+  border: 1px solid #900;
+  background-color: #EDBBBB;
+}
+
+#cucumber-templates {
+  display: none;
+}
Index:  cucumber-html-reports/report.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ cucumber-html-reports/report.js b/ cucumber-html-reports/report.js
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/ cucumber-html-reports/report.js	(date 1613491889000)
@@ -0,0 +1,173 @@
+$(document).ready(function() {var formatter = new CucumberHTML.DOMFormatter($('.cucumber-report'));formatter.uri("src/test/resources/Features/create_customer.feature");
+formatter.feature({
+  "name": "Testing customer REST API",
+  "description": "",
+  "keyword": "Feature"
+});
+formatter.scenario({
+  "name": "create customer fails when organization is not provided",
+  "description": "",
+  "keyword": "Scenario"
+});
+formatter.step({
+  "name": "I am user and entering customer details",
+  "keyword": "Given "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.i_am_user_and_entering_customer_details()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.step({
+  "name": "organization is not provided",
+  "keyword": "When "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.organization_is_not_provided()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.step({
+  "name": "Call create api with givens details",
+  "keyword": "Then "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.call_create_api_with_givens_details()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.step({
+  "name": "Return client error as  organization is not provided in payload post request",
+  "keyword": "And "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.return_client_error_organization_is_not_provided_in_post_request()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.scenario({
+  "name": "create customer Success",
+  "description": "",
+  "keyword": "Scenario"
+});
+formatter.step({
+  "name": "Enter customer details with organization in payload",
+  "keyword": "Given "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.enter_customer_details_with_organization_in_payload()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.step({
+  "name": "organization is provided with valid id",
+  "keyword": "When "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.organization_is_provided_with_valid_id()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.step({
+  "name": "create the customer with given details",
+  "keyword": "Then "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.create_the_customer_with_given_details()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.uri("src/test/resources/Features/update_customer.feature");
+formatter.feature({
+  "name": "Testing customer update REST API",
+  "description": "",
+  "keyword": "Feature"
+});
+formatter.scenario({
+  "name": "update customer fails when customerId not provided",
+  "description": "",
+  "keyword": "Scenario"
+});
+formatter.step({
+  "name": "I am user and entering update details",
+  "keyword": "Given "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.i_am_user_and_entering_update_details()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.step({
+  "name": "customerId is not provided",
+  "keyword": "When "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.customerid_is_not_provided()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.step({
+  "name": "Call update api with givens details",
+  "keyword": "Then "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.call_update_api_with_givens_details()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.step({
+  "name": "Return client error as  update is not provided in payload put request",
+  "keyword": "And "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.return_client_error_as_update_is_not_provided_in_payload_put_request()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.scenario({
+  "name": "update customer Success",
+  "description": "",
+  "keyword": "Scenario"
+});
+formatter.step({
+  "name": "Enter customer details with valid customerId in payload",
+  "keyword": "Given "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.enter_customer_details_with_valid_customerId_in_payload()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.step({
+  "name": "update details is provided with valid id",
+  "keyword": "When "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.update_details_is_provided_with_valid_id()"
+});
+formatter.result({
+  "status": "passed"
+});
+formatter.step({
+  "name": "update the customer with given details",
+  "keyword": "Then "
+});
+formatter.match({
+  "location": "CustomerControllerAcceptanceTest.update_the_customer_with_given_details()"
+});
+formatter.result({
+  "status": "passed"
+});
+});
\ No newline at end of file
Index:  cucumber-html-reports/jquery-1.8.2.min.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ cucumber-html-reports/jquery-1.8.2.min.js b/ cucumber-html-reports/jquery-1.8.2.min.js
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/ cucumber-html-reports/jquery-1.8.2.min.js	(date 1613491889000)
@@ -0,0 +1,2 @@
+/*! jQuery v1.8.2 jquery.com | jquery.org/license */
+(function(a,b){function G(a){var b=F[a]={};return p.each(a.split(s),function(a,c){b[c]=!0}),b}function J(a,c,d){if(d===b&&a.nodeType===1){var e="data-"+c.replace(I,"-$1").toLowerCase();d=a.getAttribute(e);if(typeof d=="string"){try{d=d==="true"?!0:d==="false"?!1:d==="null"?null:+d+""===d?+d:H.test(d)?p.parseJSON(d):d}catch(f){}p.data(a,c,d)}else d=b}return d}function K(a){var b;for(b in a){if(b==="data"&&p.isEmptyObject(a[b]))continue;if(b!=="toJSON")return!1}return!0}function ba(){return!1}function bb(){return!0}function bh(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function bi(a,b){do a=a[b];while(a&&a.nodeType!==1);return a}function bj(a,b,c){b=b||0;if(p.isFunction(b))return p.grep(a,function(a,d){var e=!!b.call(a,d,a);return e===c});if(b.nodeType)return p.grep(a,function(a,d){return a===b===c});if(typeof b=="string"){var d=p.grep(a,function(a){return a.nodeType===1});if(be.test(b))return p.filter(b,d,!c);b=p.filter(b,d)}return p.grep(a,function(a,d){return p.inArray(a,b)>=0===c})}function bk(a){var b=bl.split("|"),c=a.createDocumentFragment();if(c.createElement)while(b.length)c.createElement(b.pop());return c}function bC(a,b){return a.getElementsByTagName(b)[0]||a.appendChild(a.ownerDocument.createElement(b))}function bD(a,b){if(b.nodeType!==1||!p.hasData(a))return;var c,d,e,f=p._data(a),g=p._data(b,f),h=f.events;if(h){delete g.handle,g.events={};for(c in h)for(d=0,e=h[c].length;d<e;d++)p.event.add(b,c,h[c][d])}g.data&&(g.data=p.extend({},g.data))}function bE(a,b){var c;if(b.nodeType!==1)return;b.clearAttributes&&b.clearAttributes(),b.mergeAttributes&&b.mergeAttributes(a),c=b.nodeName.toLowerCase(),c==="object"?(b.parentNode&&(b.outerHTML=a.outerHTML),p.support.html5Clone&&a.innerHTML&&!p.trim(b.innerHTML)&&(b.innerHTML=a.innerHTML)):c==="input"&&bv.test(a.type)?(b.defaultChecked=b.checked=a.checked,b.value!==a.value&&(b.value=a.value)):c==="option"?b.selected=a.defaultSelected:c==="input"||c==="textarea"?b.defaultValue=a.defaultValue:c==="script"&&b.text!==a.text&&(b.text=a.text),b.removeAttribute(p.expando)}function bF(a){return typeof a.getElementsByTagName!="undefined"?a.getElementsByTagName("*"):typeof a.querySelectorAll!="undefined"?a.querySelectorAll("*"):[]}function bG(a){bv.test(a.type)&&(a.defaultChecked=a.checked)}function bY(a,b){if(b in a)return b;var c=b.charAt(0).toUpperCase()+b.slice(1),d=b,e=bW.length;while(e--){b=bW[e]+c;if(b in a)return b}return d}function bZ(a,b){return a=b||a,p.css(a,"display")==="none"||!p.contains(a.ownerDocument,a)}function b$(a,b){var c,d,e=[],f=0,g=a.length;for(;f<g;f++){c=a[f];if(!c.style)continue;e[f]=p._data(c,"olddisplay"),b?(!e[f]&&c.style.display==="none"&&(c.style.display=""),c.style.display===""&&bZ(c)&&(e[f]=p._data(c,"olddisplay",cc(c.nodeName)))):(d=bH(c,"display"),!e[f]&&d!=="none"&&p._data(c,"olddisplay",d))}for(f=0;f<g;f++){c=a[f];if(!c.style)continue;if(!b||c.style.display==="none"||c.style.display==="")c.style.display=b?e[f]||"":"none"}return a}function b_(a,b,c){var d=bP.exec(b);return d?Math.max(0,d[1]-(c||0))+(d[2]||"px"):b}function ca(a,b,c,d){var e=c===(d?"border":"content")?4:b==="width"?1:0,f=0;for(;e<4;e+=2)c==="margin"&&(f+=p.css(a,c+bV[e],!0)),d?(c==="content"&&(f-=parseFloat(bH(a,"padding"+bV[e]))||0),c!=="margin"&&(f-=parseFloat(bH(a,"border"+bV[e]+"Width"))||0)):(f+=parseFloat(bH(a,"padding"+bV[e]))||0,c!=="padding"&&(f+=parseFloat(bH(a,"border"+bV[e]+"Width"))||0));return f}function cb(a,b,c){var d=b==="width"?a.offsetWidth:a.offsetHeight,e=!0,f=p.support.boxSizing&&p.css(a,"boxSizing")==="border-box";if(d<=0||d==null){d=bH(a,b);if(d<0||d==null)d=a.style[b];if(bQ.test(d))return d;e=f&&(p.support.boxSizingReliable||d===a.style[b]),d=parseFloat(d)||0}return d+ca(a,b,c||(f?"border":"content"),e)+"px"}function cc(a){if(bS[a])return bS[a];var b=p("<"+a+">").appendTo(e.body),c=b.css("display");b.remove();if(c==="none"||c===""){bI=e.body.appendChild(bI||p.extend(e.createElement("iframe"),{frameBorder:0,width:0,height:0}));if(!bJ||!bI.createElement)bJ=(bI.contentWindow||bI.contentDocument).document,bJ.write("<!doctype html><html><body>"),bJ.close();b=bJ.body.appendChild(bJ.createElement(a)),c=bH(b,"display"),e.body.removeChild(bI)}return bS[a]=c,c}function ci(a,b,c,d){var e;if(p.isArray(b))p.each(b,function(b,e){c||ce.test(a)?d(a,e):ci(a+"["+(typeof e=="object"?b:"")+"]",e,c,d)});else if(!c&&p.type(b)==="object")for(e in b)ci(a+"["+e+"]",b[e],c,d);else d(a,b)}function cz(a){return function(b,c){typeof b!="string"&&(c=b,b="*");var d,e,f,g=b.toLowerCase().split(s),h=0,i=g.length;if(p.isFunction(c))for(;h<i;h++)d=g[h],f=/^\+/.test(d),f&&(d=d.substr(1)||"*"),e=a[d]=a[d]||[],e[f?"unshift":"push"](c)}}function cA(a,c,d,e,f,g){f=f||c.dataTypes[0],g=g||{},g[f]=!0;var h,i=a[f],j=0,k=i?i.length:0,l=a===cv;for(;j<k&&(l||!h);j++)h=i[j](c,d,e),typeof h=="string"&&(!l||g[h]?h=b:(c.dataTypes.unshift(h),h=cA(a,c,d,e,h,g)));return(l||!h)&&!g["*"]&&(h=cA(a,c,d,e,"*",g)),h}function cB(a,c){var d,e,f=p.ajaxSettings.flatOptions||{};for(d in c)c[d]!==b&&((f[d]?a:e||(e={}))[d]=c[d]);e&&p.extend(!0,a,e)}function cC(a,c,d){var e,f,g,h,i=a.contents,j=a.dataTypes,k=a.responseFields;for(f in k)f in d&&(c[k[f]]=d[f]);while(j[0]==="*")j.shift(),e===b&&(e=a.mimeType||c.getResponseHeader("content-type"));if(e)for(f in i)if(i[f]&&i[f].test(e)){j.unshift(f);break}if(j[0]in d)g=j[0];else{for(f in d){if(!j[0]||a.converters[f+" "+j[0]]){g=f;break}h||(h=f)}g=g||h}if(g)return g!==j[0]&&j.unshift(g),d[g]}function cD(a,b){var c,d,e,f,g=a.dataTypes.slice(),h=g[0],i={},j=0;a.dataFilter&&(b=a.dataFilter(b,a.dataType));if(g[1])for(c in a.converters)i[c.toLowerCase()]=a.converters[c];for(;e=g[++j];)if(e!=="*"){if(h!=="*"&&h!==e){c=i[h+" "+e]||i["* "+e];if(!c)for(d in i){f=d.split(" ");if(f[1]===e){c=i[h+" "+f[0]]||i["* "+f[0]];if(c){c===!0?c=i[d]:i[d]!==!0&&(e=f[0],g.splice(j--,0,e));break}}}if(c!==!0)if(c&&a["throws"])b=c(b);else try{b=c(b)}catch(k){return{state:"parsererror",error:c?k:"No conversion from "+h+" to "+e}}}h=e}return{state:"success",data:b}}function cL(){try{return new a.XMLHttpRequest}catch(b){}}function cM(){try{return new a.ActiveXObject("Microsoft.XMLHTTP")}catch(b){}}function cU(){return setTimeout(function(){cN=b},0),cN=p.now()}function cV(a,b){p.each(b,function(b,c){var d=(cT[b]||[]).concat(cT["*"]),e=0,f=d.length;for(;e<f;e++)if(d[e].call(a,b,c))return})}function cW(a,b,c){var d,e=0,f=0,g=cS.length,h=p.Deferred().always(function(){delete i.elem}),i=function(){var b=cN||cU(),c=Math.max(0,j.startTime+j.duration-b),d=1-(c/j.duration||0),e=0,f=j.tweens.length;for(;e<f;e++)j.tweens[e].run(d);return h.notifyWith(a,[j,d,c]),d<1&&f?c:(h.resolveWith(a,[j]),!1)},j=h.promise({elem:a,props:p.extend({},b),opts:p.extend(!0,{specialEasing:{}},c),originalProperties:b,originalOptions:c,startTime:cN||cU(),duration:c.duration,tweens:[],createTween:function(b,c,d){var e=p.Tween(a,j.opts,b,c,j.opts.specialEasing[b]||j.opts.easing);return j.tweens.push(e),e},stop:function(b){var c=0,d=b?j.tweens.length:0;for(;c<d;c++)j.tweens[c].run(1);return b?h.resolveWith(a,[j,b]):h.rejectWith(a,[j,b]),this}}),k=j.props;cX(k,j.opts.specialEasing);for(;e<g;e++){d=cS[e].call(j,a,k,j.opts);if(d)return d}return cV(j,k),p.isFunction(j.opts.start)&&j.opts.start.call(a,j),p.fx.timer(p.extend(i,{anim:j,queue:j.opts.queue,elem:a})),j.progress(j.opts.progress).done(j.opts.done,j.opts.complete).fail(j.opts.fail).always(j.opts.always)}function cX(a,b){var c,d,e,f,g;for(c in a){d=p.camelCase(c),e=b[d],f=a[c],p.isArray(f)&&(e=f[1],f=a[c]=f[0]),c!==d&&(a[d]=f,delete a[c]),g=p.cssHooks[d];if(g&&"expand"in g){f=g.expand(f),delete a[d];for(c in f)c in a||(a[c]=f[c],b[c]=e)}else b[d]=e}}function cY(a,b,c){var d,e,f,g,h,i,j,k,l=this,m=a.style,n={},o=[],q=a.nodeType&&bZ(a);c.queue||(j=p._queueHooks(a,"fx"),j.unqueued==null&&(j.unqueued=0,k=j.empty.fire,j.empty.fire=function(){j.unqueued||k()}),j.unqueued++,l.always(function(){l.always(function(){j.unqueued--,p.queue(a,"fx").length||j.empty.fire()})})),a.nodeType===1&&("height"in b||"width"in b)&&(c.overflow=[m.overflow,m.overflowX,m.overflowY],p.css(a,"display")==="inline"&&p.css(a,"float")==="none"&&(!p.support.inlineBlockNeedsLayout||cc(a.nodeName)==="inline"?m.display="inline-block":m.zoom=1)),c.overflow&&(m.overflow="hidden",p.support.shrinkWrapBlocks||l.done(function(){m.overflow=c.overflow[0],m.overflowX=c.overflow[1],m.overflowY=c.overflow[2]}));for(d in b){f=b[d];if(cP.exec(f)){delete b[d];if(f===(q?"hide":"show"))continue;o.push(d)}}g=o.length;if(g){h=p._data(a,"fxshow")||p._data(a,"fxshow",{}),q?p(a).show():l.done(function(){p(a).hide()}),l.done(function(){var b;p.removeData(a,"fxshow",!0);for(b in n)p.style(a,b,n[b])});for(d=0;d<g;d++)e=o[d],i=l.createTween(e,q?h[e]:0),n[e]=h[e]||p.style(a,e),e in h||(h[e]=i.start,q&&(i.end=i.start,i.start=e==="width"||e==="height"?1:0))}}function cZ(a,b,c,d,e){return new cZ.prototype.init(a,b,c,d,e)}function c$(a,b){var c,d={height:a},e=0;b=b?1:0;for(;e<4;e+=2-b)c=bV[e],d["margin"+c]=d["padding"+c]=a;return b&&(d.opacity=d.width=a),d}function da(a){return p.isWindow(a)?a:a.nodeType===9?a.defaultView||a.parentWindow:!1}var c,d,e=a.document,f=a.location,g=a.navigator,h=a.jQuery,i=a.$,j=Array.prototype.push,k=Array.prototype.slice,l=Array.prototype.indexOf,m=Object.prototype.toString,n=Object.prototype.hasOwnProperty,o=String.prototype.trim,p=function(a,b){return new p.fn.init(a,b,c)},q=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,r=/\S/,s=/\s+/,t=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,u=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,v=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,w=/^[\],:{}\s]*$/,x=/(?:^|:|,)(?:\s*\[)+/g,y=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,z=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,A=/^-ms-/,B=/-([\da-z])/gi,C=function(a,b){return(b+"").toUpperCase()},D=function(){e.addEventListener?(e.removeEventListener("DOMContentLoaded",D,!1),p.ready()):e.readyState==="complete"&&(e.detachEvent("onreadystatechange",D),p.ready())},E={};p.fn=p.prototype={constructor:p,init:function(a,c,d){var f,g,h,i;if(!a)return this;if(a.nodeType)return this.context=this[0]=a,this.length=1,this;if(typeof a=="string"){a.charAt(0)==="<"&&a.charAt(a.length-1)===">"&&a.length>=3?f=[null,a,null]:f=u.exec(a);if(f&&(f[1]||!c)){if(f[1])return c=c instanceof p?c[0]:c,i=c&&c.nodeType?c.ownerDocument||c:e,a=p.parseHTML(f[1],i,!0),v.test(f[1])&&p.isPlainObject(c)&&this.attr.call(a,c,!0),p.merge(this,a);g=e.getElementById(f[2]);if(g&&g.parentNode){if(g.id!==f[2])return d.find(a);this.length=1,this[0]=g}return this.context=e,this.selector=a,this}return!c||c.jquery?(c||d).find(a):this.constructor(c).find(a)}return p.isFunction(a)?d.ready(a):(a.selector!==b&&(this.selector=a.selector,this.context=a.context),p.makeArray(a,this))},selector:"",jquery:"1.8.2",length:0,size:function(){return this.length},toArray:function(){return k.call(this)},get:function(a){return a==null?this.toArray():a<0?this[this.length+a]:this[a]},pushStack:function(a,b,c){var d=p.merge(this.constructor(),a);return d.prevObject=this,d.context=this.context,b==="find"?d.selector=this.selector+(this.selector?" ":"")+c:b&&(d.selector=this.selector+"."+b+"("+c+")"),d},each:function(a,b){return p.each(this,a,b)},ready:function(a){return p.ready.promise().done(a),this},eq:function(a){return a=+a,a===-1?this.slice(a):this.slice(a,a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(k.apply(this,arguments),"slice",k.call(arguments).join(","))},map:function(a){return this.pushStack(p.map(this,function(b,c){return a.call(b,c,b)}))},end:function(){return this.prevObject||this.constructor(null)},push:j,sort:[].sort,splice:[].splice},p.fn.init.prototype=p.fn,p.extend=p.fn.extend=function(){var a,c,d,e,f,g,h=arguments[0]||{},i=1,j=arguments.length,k=!1;typeof h=="boolean"&&(k=h,h=arguments[1]||{},i=2),typeof h!="object"&&!p.isFunction(h)&&(h={}),j===i&&(h=this,--i);for(;i<j;i++)if((a=arguments[i])!=null)for(c in a){d=h[c],e=a[c];if(h===e)continue;k&&e&&(p.isPlainObject(e)||(f=p.isArray(e)))?(f?(f=!1,g=d&&p.isArray(d)?d:[]):g=d&&p.isPlainObject(d)?d:{},h[c]=p.extend(k,g,e)):e!==b&&(h[c]=e)}return h},p.extend({noConflict:function(b){return a.$===p&&(a.$=i),b&&a.jQuery===p&&(a.jQuery=h),p},isReady:!1,readyWait:1,holdReady:function(a){a?p.readyWait++:p.ready(!0)},ready:function(a){if(a===!0?--p.readyWait:p.isReady)return;if(!e.body)return setTimeout(p.ready,1);p.isReady=!0;if(a!==!0&&--p.readyWait>0)return;d.resolveWith(e,[p]),p.fn.trigger&&p(e).trigger("ready").off("ready")},isFunction:function(a){return p.type(a)==="function"},isArray:Array.isArray||function(a){return p.type(a)==="array"},isWindow:function(a){return a!=null&&a==a.window},isNumeric:function(a){return!isNaN(parseFloat(a))&&isFinite(a)},type:function(a){return a==null?String(a):E[m.call(a)]||"object"},isPlainObject:function(a){if(!a||p.type(a)!=="object"||a.nodeType||p.isWindow(a))return!1;try{if(a.constructor&&!n.call(a,"constructor")&&!n.call(a.constructor.prototype,"isPrototypeOf"))return!1}catch(c){return!1}var d;for(d in a);return d===b||n.call(a,d)},isEmptyObject:function(a){var b;for(b in a)return!1;return!0},error:function(a){throw new Error(a)},parseHTML:function(a,b,c){var d;return!a||typeof a!="string"?null:(typeof b=="boolean"&&(c=b,b=0),b=b||e,(d=v.exec(a))?[b.createElement(d[1])]:(d=p.buildFragment([a],b,c?null:[]),p.merge([],(d.cacheable?p.clone(d.fragment):d.fragment).childNodes)))},parseJSON:function(b){if(!b||typeof b!="string")return null;b=p.trim(b);if(a.JSON&&a.JSON.parse)return a.JSON.parse(b);if(w.test(b.replace(y,"@").replace(z,"]").replace(x,"")))return(new Function("return "+b))();p.error("Invalid JSON: "+b)},parseXML:function(c){var d,e;if(!c||typeof c!="string")return null;try{a.DOMParser?(e=new DOMParser,d=e.parseFromString(c,"text/xml")):(d=new ActiveXObject("Microsoft.XMLDOM"),d.async="false",d.loadXML(c))}catch(f){d=b}return(!d||!d.documentElement||d.getElementsByTagName("parsererror").length)&&p.error("Invalid XML: "+c),d},noop:function(){},globalEval:function(b){b&&r.test(b)&&(a.execScript||function(b){a.eval.call(a,b)})(b)},camelCase:function(a){return a.replace(A,"ms-").replace(B,C)},nodeName:function(a,b){return a.nodeName&&a.nodeName.toLowerCase()===b.toLowerCase()},each:function(a,c,d){var e,f=0,g=a.length,h=g===b||p.isFunction(a);if(d){if(h){for(e in a)if(c.apply(a[e],d)===!1)break}else for(;f<g;)if(c.apply(a[f++],d)===!1)break}else if(h){for(e in a)if(c.call(a[e],e,a[e])===!1)break}else for(;f<g;)if(c.call(a[f],f,a[f++])===!1)break;return a},trim:o&&!o.call("﻿ ")?function(a){return a==null?"":o.call(a)}:function(a){return a==null?"":(a+"").replace(t,"")},makeArray:function(a,b){var c,d=b||[];return a!=null&&(c=p.type(a),a.length==null||c==="string"||c==="function"||c==="regexp"||p.isWindow(a)?j.call(d,a):p.merge(d,a)),d},inArray:function(a,b,c){var d;if(b){if(l)return l.call(b,a,c);d=b.length,c=c?c<0?Math.max(0,d+c):c:0;for(;c<d;c++)if(c in b&&b[c]===a)return c}return-1},merge:function(a,c){var d=c.length,e=a.length,f=0;if(typeof d=="number")for(;f<d;f++)a[e++]=c[f];else while(c[f]!==b)a[e++]=c[f++];return a.length=e,a},grep:function(a,b,c){var d,e=[],f=0,g=a.length;c=!!c;for(;f<g;f++)d=!!b(a[f],f),c!==d&&e.push(a[f]);return e},map:function(a,c,d){var e,f,g=[],h=0,i=a.length,j=a instanceof p||i!==b&&typeof i=="number"&&(i>0&&a[0]&&a[i-1]||i===0||p.isArray(a));if(j)for(;h<i;h++)e=c(a[h],h,d),e!=null&&(g[g.length]=e);else for(f in a)e=c(a[f],f,d),e!=null&&(g[g.length]=e);return g.concat.apply([],g)},guid:1,proxy:function(a,c){var d,e,f;return typeof c=="string"&&(d=a[c],c=a,a=d),p.isFunction(a)?(e=k.call(arguments,2),f=function(){return a.apply(c,e.concat(k.call(arguments)))},f.guid=a.guid=a.guid||p.guid++,f):b},access:function(a,c,d,e,f,g,h){var i,j=d==null,k=0,l=a.length;if(d&&typeof d=="object"){for(k in d)p.access(a,c,k,d[k],1,g,e);f=1}else if(e!==b){i=h===b&&p.isFunction(e),j&&(i?(i=c,c=function(a,b,c){return i.call(p(a),c)}):(c.call(a,e),c=null));if(c)for(;k<l;k++)c(a[k],d,i?e.call(a[k],k,c(a[k],d)):e,h);f=1}return f?a:j?c.call(a):l?c(a[0],d):g},now:function(){return(new Date).getTime()}}),p.ready.promise=function(b){if(!d){d=p.Deferred();if(e.readyState==="complete")setTimeout(p.ready,1);else if(e.addEventListener)e.addEventListener("DOMContentLoaded",D,!1),a.addEventListener("load",p.ready,!1);else{e.attachEvent("onreadystatechange",D),a.attachEvent("onload",p.ready);var c=!1;try{c=a.frameElement==null&&e.documentElement}catch(f){}c&&c.doScroll&&function g(){if(!p.isReady){try{c.doScroll("left")}catch(a){return setTimeout(g,50)}p.ready()}}()}}return d.promise(b)},p.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(a,b){E["[object "+b+"]"]=b.toLowerCase()}),c=p(e);var F={};p.Callbacks=function(a){a=typeof a=="string"?F[a]||G(a):p.extend({},a);var c,d,e,f,g,h,i=[],j=!a.once&&[],k=function(b){c=a.memory&&b,d=!0,h=f||0,f=0,g=i.length,e=!0;for(;i&&h<g;h++)if(i[h].apply(b[0],b[1])===!1&&a.stopOnFalse){c=!1;break}e=!1,i&&(j?j.length&&k(j.shift()):c?i=[]:l.disable())},l={add:function(){if(i){var b=i.length;(function d(b){p.each(b,function(b,c){var e=p.type(c);e==="function"&&(!a.unique||!l.has(c))?i.push(c):c&&c.length&&e!=="string"&&d(c)})})(arguments),e?g=i.length:c&&(f=b,k(c))}return this},remove:function(){return i&&p.each(arguments,function(a,b){var c;while((c=p.inArray(b,i,c))>-1)i.splice(c,1),e&&(c<=g&&g--,c<=h&&h--)}),this},has:function(a){return p.inArray(a,i)>-1},empty:function(){return i=[],this},disable:function(){return i=j=c=b,this},disabled:function(){return!i},lock:function(){return j=b,c||l.disable(),this},locked:function(){return!j},fireWith:function(a,b){return b=b||[],b=[a,b.slice?b.slice():b],i&&(!d||j)&&(e?j.push(b):k(b)),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!d}};return l},p.extend({Deferred:function(a){var b=[["resolve","done",p.Callbacks("once memory"),"resolved"],["reject","fail",p.Callbacks("once memory"),"rejected"],["notify","progress",p.Callbacks("memory")]],c="pending",d={state:function(){return c},always:function(){return e.done(arguments).fail(arguments),this},then:function(){var a=arguments;return p.Deferred(function(c){p.each(b,function(b,d){var f=d[0],g=a[b];e[d[1]](p.isFunction(g)?function(){var a=g.apply(this,arguments);a&&p.isFunction(a.promise)?a.promise().done(c.resolve).fail(c.reject).progress(c.notify):c[f+"With"](this===e?c:this,[a])}:c[f])}),a=null}).promise()},promise:function(a){return a!=null?p.extend(a,d):d}},e={};return d.pipe=d.then,p.each(b,function(a,f){var g=f[2],h=f[3];d[f[1]]=g.add,h&&g.add(function(){c=h},b[a^1][2].disable,b[2][2].lock),e[f[0]]=g.fire,e[f[0]+"With"]=g.fireWith}),d.promise(e),a&&a.call(e,e),e},when:function(a){var b=0,c=k.call(arguments),d=c.length,e=d!==1||a&&p.isFunction(a.promise)?d:0,f=e===1?a:p.Deferred(),g=function(a,b,c){return function(d){b[a]=this,c[a]=arguments.length>1?k.call(arguments):d,c===h?f.notifyWith(b,c):--e||f.resolveWith(b,c)}},h,i,j;if(d>1){h=new Array(d),i=new Array(d),j=new Array(d);for(;b<d;b++)c[b]&&p.isFunction(c[b].promise)?c[b].promise().done(g(b,j,c)).fail(f.reject).progress(g(b,i,h)):--e}return e||f.resolveWith(j,c),f.promise()}}),p.support=function(){var b,c,d,f,g,h,i,j,k,l,m,n=e.createElement("div");n.setAttribute("className","t"),n.innerHTML="  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>",c=n.getElementsByTagName("*"),d=n.getElementsByTagName("a")[0],d.style.cssText="top:1px;float:left;opacity:.5";if(!c||!c.length)return{};f=e.createElement("select"),g=f.appendChild(e.createElement("option")),h=n.getElementsByTagName("input")[0],b={leadingWhitespace:n.firstChild.nodeType===3,tbody:!n.getElementsByTagName("tbody").length,htmlSerialize:!!n.getElementsByTagName("link").length,style:/top/.test(d.getAttribute("style")),hrefNormalized:d.getAttribute("href")==="/a",opacity:/^0.5/.test(d.style.opacity),cssFloat:!!d.style.cssFloat,checkOn:h.value==="on",optSelected:g.selected,getSetAttribute:n.className!=="t",enctype:!!e.createElement("form").enctype,html5Clone:e.createElement("nav").cloneNode(!0).outerHTML!=="<:nav></:nav>",boxModel:e.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},h.checked=!0,b.noCloneChecked=h.cloneNode(!0).checked,f.disabled=!0,b.optDisabled=!g.disabled;try{delete n.test}catch(o){b.deleteExpando=!1}!n.addEventListener&&n.attachEvent&&n.fireEvent&&(n.attachEvent("onclick",m=function(){b.noCloneEvent=!1}),n.cloneNode(!0).fireEvent("onclick"),n.detachEvent("onclick",m)),h=e.createElement("input"),h.value="t",h.setAttribute("type","radio"),b.radioValue=h.value==="t",h.setAttribute("checked","checked"),h.setAttribute("name","t"),n.appendChild(h),i=e.createDocumentFragment(),i.appendChild(n.lastChild),b.checkClone=i.cloneNode(!0).cloneNode(!0).lastChild.checked,b.appendChecked=h.checked,i.removeChild(h),i.appendChild(n);if(n.attachEvent)for(k in{submit:!0,change:!0,focusin:!0})j="on"+k,l=j in n,l||(n.setAttribute(j,"return;"),l=typeof n[j]=="function"),b[k+"Bubbles"]=l;return p(function(){var c,d,f,g,h="padding:0;margin:0;border:0;display:block;overflow:hidden;",i=e.getElementsByTagName("body")[0];if(!i)return;c=e.createElement("div"),c.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",i.insertBefore(c,i.firstChild),d=e.createElement("div"),c.appendChild(d),d.innerHTML="<table><tr><td></td><td>t</td></tr></table>",f=d.getElementsByTagName("td"),f[0].style.cssText="padding:0;margin:0;border:0;display:none",l=f[0].offsetHeight===0,f[0].style.display="",f[1].style.display="none",b.reliableHiddenOffsets=l&&f[0].offsetHeight===0,d.innerHTML="",d.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",b.boxSizing=d.offsetWidth===4,b.doesNotIncludeMarginInBodyOffset=i.offsetTop!==1,a.getComputedStyle&&(b.pixelPosition=(a.getComputedStyle(d,null)||{}).top!=="1%",b.boxSizingReliable=(a.getComputedStyle(d,null)||{width:"4px"}).width==="4px",g=e.createElement("div"),g.style.cssText=d.style.cssText=h,g.style.marginRight=g.style.width="0",d.style.width="1px",d.appendChild(g),b.reliableMarginRight=!parseFloat((a.getComputedStyle(g,null)||{}).marginRight)),typeof d.style.zoom!="undefined"&&(d.innerHTML="",d.style.cssText=h+"width:1px;padding:1px;display:inline;zoom:1",b.inlineBlockNeedsLayout=d.offsetWidth===3,d.style.display="block",d.style.overflow="visible",d.innerHTML="<div></div>",d.firstChild.style.width="5px",b.shrinkWrapBlocks=d.offsetWidth!==3,c.style.zoom=1),i.removeChild(c),c=d=f=g=null}),i.removeChild(n),c=d=f=g=h=i=n=null,b}();var H=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,I=/([A-Z])/g;p.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(p.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(a){return a=a.nodeType?p.cache[a[p.expando]]:a[p.expando],!!a&&!K(a)},data:function(a,c,d,e){if(!p.acceptData(a))return;var f,g,h=p.expando,i=typeof c=="string",j=a.nodeType,k=j?p.cache:a,l=j?a[h]:a[h]&&h;if((!l||!k[l]||!e&&!k[l].data)&&i&&d===b)return;l||(j?a[h]=l=p.deletedIds.pop()||p.guid++:l=h),k[l]||(k[l]={},j||(k[l].toJSON=p.noop));if(typeof c=="object"||typeof c=="function")e?k[l]=p.extend(k[l],c):k[l].data=p.extend(k[l].data,c);return f=k[l],e||(f.data||(f.data={}),f=f.data),d!==b&&(f[p.camelCase(c)]=d),i?(g=f[c],g==null&&(g=f[p.camelCase(c)])):g=f,g},removeData:function(a,b,c){if(!p.acceptData(a))return;var d,e,f,g=a.nodeType,h=g?p.cache:a,i=g?a[p.expando]:p.expando;if(!h[i])return;if(b){d=c?h[i]:h[i].data;if(d){p.isArray(b)||(b in d?b=[b]:(b=p.camelCase(b),b in d?b=[b]:b=b.split(" ")));for(e=0,f=b.length;e<f;e++)delete d[b[e]];if(!(c?K:p.isEmptyObject)(d))return}}if(!c){delete h[i].data;if(!K(h[i]))return}g?p.cleanData([a],!0):p.support.deleteExpando||h!=h.window?delete h[i]:h[i]=null},_data:function(a,b,c){return p.data(a,b,c,!0)},acceptData:function(a){var b=a.nodeName&&p.noData[a.nodeName.toLowerCase()];return!b||b!==!0&&a.getAttribute("classid")===b}}),p.fn.extend({data:function(a,c){var d,e,f,g,h,i=this[0],j=0,k=null;if(a===b){if(this.length){k=p.data(i);if(i.nodeType===1&&!p._data(i,"parsedAttrs")){f=i.attributes;for(h=f.length;j<h;j++)g=f[j].name,g.indexOf("data-")||(g=p.camelCase(g.substring(5)),J(i,g,k[g]));p._data(i,"parsedAttrs",!0)}}return k}return typeof a=="object"?this.each(function(){p.data(this,a)}):(d=a.split(".",2),d[1]=d[1]?"."+d[1]:"",e=d[1]+"!",p.access(this,function(c){if(c===b)return k=this.triggerHandler("getData"+e,[d[0]]),k===b&&i&&(k=p.data(i,a),k=J(i,a,k)),k===b&&d[1]?this.data(d[0]):k;d[1]=c,this.each(function(){var b=p(this);b.triggerHandler("setData"+e,d),p.data(this,a,c),b.triggerHandler("changeData"+e,d)})},null,c,arguments.length>1,null,!1))},removeData:function(a){return this.each(function(){p.removeData(this,a)})}}),p.extend({queue:function(a,b,c){var d;if(a)return b=(b||"fx")+"queue",d=p._data(a,b),c&&(!d||p.isArray(c)?d=p._data(a,b,p.makeArray(c)):d.push(c)),d||[]},dequeue:function(a,b){b=b||"fx";var c=p.queue(a,b),d=c.length,e=c.shift(),f=p._queueHooks(a,b),g=function(){p.dequeue(a,b)};e==="inprogress"&&(e=c.shift(),d--),e&&(b==="fx"&&c.unshift("inprogress"),delete f.stop,e.call(a,g,f)),!d&&f&&f.empty.fire()},_queueHooks:function(a,b){var c=b+"queueHooks";return p._data(a,c)||p._data(a,c,{empty:p.Callbacks("once memory").add(function(){p.removeData(a,b+"queue",!0),p.removeData(a,c,!0)})})}}),p.fn.extend({queue:function(a,c){var d=2;return typeof a!="string"&&(c=a,a="fx",d--),arguments.length<d?p.queue(this[0],a):c===b?this:this.each(function(){var b=p.queue(this,a,c);p._queueHooks(this,a),a==="fx"&&b[0]!=="inprogress"&&p.dequeue(this,a)})},dequeue:function(a){return this.each(function(){p.dequeue(this,a)})},delay:function(a,b){return a=p.fx?p.fx.speeds[a]||a:a,b=b||"fx",this.queue(b,function(b,c){var d=setTimeout(b,a);c.stop=function(){clearTimeout(d)}})},clearQueue:function(a){return this.queue(a||"fx",[])},promise:function(a,c){var d,e=1,f=p.Deferred(),g=this,h=this.length,i=function(){--e||f.resolveWith(g,[g])};typeof a!="string"&&(c=a,a=b),a=a||"fx";while(h--)d=p._data(g[h],a+"queueHooks"),d&&d.empty&&(e++,d.empty.add(i));return i(),f.promise(c)}});var L,M,N,O=/[\t\r\n]/g,P=/\r/g,Q=/^(?:button|input)$/i,R=/^(?:button|input|object|select|textarea)$/i,S=/^a(?:rea|)$/i,T=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,U=p.support.getSetAttribute;p.fn.extend({attr:function(a,b){return p.access(this,p.attr,a,b,arguments.length>1)},removeAttr:function(a){return this.each(function(){p.removeAttr(this,a)})},prop:function(a,b){return p.access(this,p.prop,a,b,arguments.length>1)},removeProp:function(a){return a=p.propFix[a]||a,this.each(function(){try{this[a]=b,delete this[a]}catch(c){}})},addClass:function(a){var b,c,d,e,f,g,h;if(p.isFunction(a))return this.each(function(b){p(this).addClass(a.call(this,b,this.className))});if(a&&typeof a=="string"){b=a.split(s);for(c=0,d=this.length;c<d;c++){e=this[c];if(e.nodeType===1)if(!e.className&&b.length===1)e.className=a;else{f=" "+e.className+" ";for(g=0,h=b.length;g<h;g++)f.indexOf(" "+b[g]+" ")<0&&(f+=b[g]+" ");e.className=p.trim(f)}}}return this},removeClass:function(a){var c,d,e,f,g,h,i;if(p.isFunction(a))return this.each(function(b){p(this).removeClass(a.call(this,b,this.className))});if(a&&typeof a=="string"||a===b){c=(a||"").split(s);for(h=0,i=this.length;h<i;h++){e=this[h];if(e.nodeType===1&&e.className){d=(" "+e.className+" ").replace(O," ");for(f=0,g=c.length;f<g;f++)while(d.indexOf(" "+c[f]+" ")>=0)d=d.replace(" "+c[f]+" "," ");e.className=a?p.trim(d):""}}}return this},toggleClass:function(a,b){var c=typeof a,d=typeof b=="boolean";return p.isFunction(a)?this.each(function(c){p(this).toggleClass(a.call(this,c,this.className,b),b)}):this.each(function(){if(c==="string"){var e,f=0,g=p(this),h=b,i=a.split(s);while(e=i[f++])h=d?h:!g.hasClass(e),g[h?"addClass":"removeClass"](e)}else if(c==="undefined"||c==="boolean")this.className&&p._data(this,"__className__",this.className),this.className=this.className||a===!1?"":p._data(this,"__className__")||""})},hasClass:function(a){var b=" "+a+" ",c=0,d=this.length;for(;c<d;c++)if(this[c].nodeType===1&&(" "+this[c].className+" ").replace(O," ").indexOf(b)>=0)return!0;return!1},val:function(a){var c,d,e,f=this[0];if(!arguments.length){if(f)return c=p.valHooks[f.type]||p.valHooks[f.nodeName.toLowerCase()],c&&"get"in c&&(d=c.get(f,"value"))!==b?d:(d=f.value,typeof d=="string"?d.replace(P,""):d==null?"":d);return}return e=p.isFunction(a),this.each(function(d){var f,g=p(this);if(this.nodeType!==1)return;e?f=a.call(this,d,g.val()):f=a,f==null?f="":typeof f=="number"?f+="":p.isArray(f)&&(f=p.map(f,function(a){return a==null?"":a+""})),c=p.valHooks[this.type]||p.valHooks[this.nodeName.toLowerCase()];if(!c||!("set"in c)||c.set(this,f,"value")===b)this.value=f})}}),p.extend({valHooks:{option:{get:function(a){var b=a.attributes.value;return!b||b.specified?a.value:a.text}},select:{get:function(a){var b,c,d,e,f=a.selectedIndex,g=[],h=a.options,i=a.type==="select-one";if(f<0)return null;c=i?f:0,d=i?f+1:h.length;for(;c<d;c++){e=h[c];if(e.selected&&(p.support.optDisabled?!e.disabled:e.getAttribute("disabled")===null)&&(!e.parentNode.disabled||!p.nodeName(e.parentNode,"optgroup"))){b=p(e).val();if(i)return b;g.push(b)}}return i&&!g.length&&h.length?p(h[f]).val():g},set:function(a,b){var c=p.makeArray(b);return p(a).find("option").each(function(){this.selected=p.inArray(p(this).val(),c)>=0}),c.length||(a.selectedIndex=-1),c}}},attrFn:{},attr:function(a,c,d,e){var f,g,h,i=a.nodeType;if(!a||i===3||i===8||i===2)return;if(e&&p.isFunction(p.fn[c]))return p(a)[c](d);if(typeof a.getAttribute=="undefined")return p.prop(a,c,d);h=i!==1||!p.isXMLDoc(a),h&&(c=c.toLowerCase(),g=p.attrHooks[c]||(T.test(c)?M:L));if(d!==b){if(d===null){p.removeAttr(a,c);return}return g&&"set"in g&&h&&(f=g.set(a,d,c))!==b?f:(a.setAttribute(c,d+""),d)}return g&&"get"in g&&h&&(f=g.get(a,c))!==null?f:(f=a.getAttribute(c),f===null?b:f)},removeAttr:function(a,b){var c,d,e,f,g=0;if(b&&a.nodeType===1){d=b.split(s);for(;g<d.length;g++)e=d[g],e&&(c=p.propFix[e]||e,f=T.test(e),f||p.attr(a,e,""),a.removeAttribute(U?e:c),f&&c in a&&(a[c]=!1))}},attrHooks:{type:{set:function(a,b){if(Q.test(a.nodeName)&&a.parentNode)p.error("type property can't be changed");else if(!p.support.radioValue&&b==="radio"&&p.nodeName(a,"input")){var c=a.value;return a.setAttribute("type",b),c&&(a.value=c),b}}},value:{get:function(a,b){return L&&p.nodeName(a,"button")?L.get(a,b):b in a?a.value:null},set:function(a,b,c){if(L&&p.nodeName(a,"button"))return L.set(a,b,c);a.value=b}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(a,c,d){var e,f,g,h=a.nodeType;if(!a||h===3||h===8||h===2)return;return g=h!==1||!p.isXMLDoc(a),g&&(c=p.propFix[c]||c,f=p.propHooks[c]),d!==b?f&&"set"in f&&(e=f.set(a,d,c))!==b?e:a[c]=d:f&&"get"in f&&(e=f.get(a,c))!==null?e:a[c]},propHooks:{tabIndex:{get:function(a){var c=a.getAttributeNode("tabindex");return c&&c.specified?parseInt(c.value,10):R.test(a.nodeName)||S.test(a.nodeName)&&a.href?0:b}}}}),M={get:function(a,c){var d,e=p.prop(a,c);return e===!0||typeof e!="boolean"&&(d=a.getAttributeNode(c))&&d.nodeValue!==!1?c.toLowerCase():b},set:function(a,b,c){var d;return b===!1?p.removeAttr(a,c):(d=p.propFix[c]||c,d in a&&(a[d]=!0),a.setAttribute(c,c.toLowerCase())),c}},U||(N={name:!0,id:!0,coords:!0},L=p.valHooks.button={get:function(a,c){var d;return d=a.getAttributeNode(c),d&&(N[c]?d.value!=="":d.specified)?d.value:b},set:function(a,b,c){var d=a.getAttributeNode(c);return d||(d=e.createAttribute(c),a.setAttributeNode(d)),d.value=b+""}},p.each(["width","height"],function(a,b){p.attrHooks[b]=p.extend(p.attrHooks[b],{set:function(a,c){if(c==="")return a.setAttribute(b,"auto"),c}})}),p.attrHooks.contenteditable={get:L.get,set:function(a,b,c){b===""&&(b="false"),L.set(a,b,c)}}),p.support.hrefNormalized||p.each(["href","src","width","height"],function(a,c){p.attrHooks[c]=p.extend(p.attrHooks[c],{get:function(a){var d=a.getAttribute(c,2);return d===null?b:d}})}),p.support.style||(p.attrHooks.style={get:function(a){return a.style.cssText.toLowerCase()||b},set:function(a,b){return a.style.cssText=b+""}}),p.support.optSelected||(p.propHooks.selected=p.extend(p.propHooks.selected,{get:function(a){var b=a.parentNode;return b&&(b.selectedIndex,b.parentNode&&b.parentNode.selectedIndex),null}})),p.support.enctype||(p.propFix.enctype="encoding"),p.support.checkOn||p.each(["radio","checkbox"],function(){p.valHooks[this]={get:function(a){return a.getAttribute("value")===null?"on":a.value}}}),p.each(["radio","checkbox"],function(){p.valHooks[this]=p.extend(p.valHooks[this],{set:function(a,b){if(p.isArray(b))return a.checked=p.inArray(p(a).val(),b)>=0}})});var V=/^(?:textarea|input|select)$/i,W=/^([^\.]*|)(?:\.(.+)|)$/,X=/(?:^|\s)hover(\.\S+|)\b/,Y=/^key/,Z=/^(?:mouse|contextmenu)|click/,$=/^(?:focusinfocus|focusoutblur)$/,_=function(a){return p.event.special.hover?a:a.replace(X,"mouseenter$1 mouseleave$1")};p.event={add:function(a,c,d,e,f){var g,h,i,j,k,l,m,n,o,q,r;if(a.nodeType===3||a.nodeType===8||!c||!d||!(g=p._data(a)))return;d.handler&&(o=d,d=o.handler,f=o.selector),d.guid||(d.guid=p.guid++),i=g.events,i||(g.events=i={}),h=g.handle,h||(g.handle=h=function(a){return typeof p!="undefined"&&(!a||p.event.triggered!==a.type)?p.event.dispatch.apply(h.elem,arguments):b},h.elem=a),c=p.trim(_(c)).split(" ");for(j=0;j<c.length;j++){k=W.exec(c[j])||[],l=k[1],m=(k[2]||"").split(".").sort(),r=p.event.special[l]||{},l=(f?r.delegateType:r.bindType)||l,r=p.event.special[l]||{},n=p.extend({type:l,origType:k[1],data:e,handler:d,guid:d.guid,selector:f,needsContext:f&&p.expr.match.needsContext.test(f),namespace:m.join(".")},o),q=i[l];if(!q){q=i[l]=[],q.delegateCount=0;if(!r.setup||r.setup.call(a,e,m,h)===!1)a.addEventListener?a.addEventListener(l,h,!1):a.attachEvent&&a.attachEvent("on"+l,h)}r.add&&(r.add.call(a,n),n.handler.guid||(n.handler.guid=d.guid)),f?q.splice(q.delegateCount++,0,n):q.push(n),p.event.global[l]=!0}a=null},global:{},remove:function(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,q,r=p.hasData(a)&&p._data(a);if(!r||!(m=r.events))return;b=p.trim(_(b||"")).split(" ");for(f=0;f<b.length;f++){g=W.exec(b[f])||[],h=i=g[1],j=g[2];if(!h){for(h in m)p.event.remove(a,h+b[f],c,d,!0);continue}n=p.event.special[h]||{},h=(d?n.delegateType:n.bindType)||h,o=m[h]||[],k=o.length,j=j?new RegExp("(^|\\.)"+j.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null;for(l=0;l<o.length;l++)q=o[l],(e||i===q.origType)&&(!c||c.guid===q.guid)&&(!j||j.test(q.namespace))&&(!d||d===q.selector||d==="**"&&q.selector)&&(o.splice(l--,1),q.selector&&o.delegateCount--,n.remove&&n.remove.call(a,q));o.length===0&&k!==o.length&&((!n.teardown||n.teardown.call(a,j,r.handle)===!1)&&p.removeEvent(a,h,r.handle),delete m[h])}p.isEmptyObject(m)&&(delete r.handle,p.removeData(a,"events",!0))},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(c,d,f,g){if(!f||f.nodeType!==3&&f.nodeType!==8){var h,i,j,k,l,m,n,o,q,r,s=c.type||c,t=[];if($.test(s+p.event.triggered))return;s.indexOf("!")>=0&&(s=s.slice(0,-1),i=!0),s.indexOf(".")>=0&&(t=s.split("."),s=t.shift(),t.sort());if((!f||p.event.customEvent[s])&&!p.event.global[s])return;c=typeof c=="object"?c[p.expando]?c:new p.Event(s,c):new p.Event(s),c.type=s,c.isTrigger=!0,c.exclusive=i,c.namespace=t.join("."),c.namespace_re=c.namespace?new RegExp("(^|\\.)"+t.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,m=s.indexOf(":")<0?"on"+s:"";if(!f){h=p.cache;for(j in h)h[j].events&&h[j].events[s]&&p.event.trigger(c,d,h[j].handle.elem,!0);return}c.result=b,c.target||(c.target=f),d=d!=null?p.makeArray(d):[],d.unshift(c),n=p.event.special[s]||{};if(n.trigger&&n.trigger.apply(f,d)===!1)return;q=[[f,n.bindType||s]];if(!g&&!n.noBubble&&!p.isWindow(f)){r=n.delegateType||s,k=$.test(r+s)?f:f.parentNode;for(l=f;k;k=k.parentNode)q.push([k,r]),l=k;l===(f.ownerDocument||e)&&q.push([l.defaultView||l.parentWindow||a,r])}for(j=0;j<q.length&&!c.isPropagationStopped();j++)k=q[j][0],c.type=q[j][1],o=(p._data(k,"events")||{})[c.type]&&p._data(k,"handle"),o&&o.apply(k,d),o=m&&k[m],o&&p.acceptData(k)&&o.apply&&o.apply(k,d)===!1&&c.preventDefault();return c.type=s,!g&&!c.isDefaultPrevented()&&(!n._default||n._default.apply(f.ownerDocument,d)===!1)&&(s!=="click"||!p.nodeName(f,"a"))&&p.acceptData(f)&&m&&f[s]&&(s!=="focus"&&s!=="blur"||c.target.offsetWidth!==0)&&!p.isWindow(f)&&(l=f[m],l&&(f[m]=null),p.event.triggered=s,f[s](),p.event.triggered=b,l&&(f[m]=l)),c.result}return},dispatch:function(c){c=p.event.fix(c||a.event);var d,e,f,g,h,i,j,l,m,n,o=(p._data(this,"events")||{})[c.type]||[],q=o.delegateCount,r=k.call(arguments),s=!c.exclusive&&!c.namespace,t=p.event.special[c.type]||{},u=[];r[0]=c,c.delegateTarget=this;if(t.preDispatch&&t.preDispatch.call(this,c)===!1)return;if(q&&(!c.button||c.type!=="click"))for(f=c.target;f!=this;f=f.parentNode||this)if(f.disabled!==!0||c.type!=="click"){h={},j=[];for(d=0;d<q;d++)l=o[d],m=l.selector,h[m]===b&&(h[m]=l.needsContext?p(m,this).index(f)>=0:p.find(m,this,null,[f]).length),h[m]&&j.push(l);j.length&&u.push({elem:f,matches:j})}o.length>q&&u.push({elem:this,matches:o.slice(q)});for(d=0;d<u.length&&!c.isPropagationStopped();d++){i=u[d],c.currentTarget=i.elem;for(e=0;e<i.matches.length&&!c.isImmediatePropagationStopped();e++){l=i.matches[e];if(s||!c.namespace&&!l.namespace||c.namespace_re&&c.namespace_re.test(l.namespace))c.data=l.data,c.handleObj=l,g=((p.event.special[l.origType]||{}).handle||l.handler).apply(i.elem,r),g!==b&&(c.result=g,g===!1&&(c.preventDefault(),c.stopPropagation()))}}return t.postDispatch&&t.postDispatch.call(this,c),c.result},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(a,b){return a.which==null&&(a.which=b.charCode!=null?b.charCode:b.keyCode),a}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(a,c){var d,f,g,h=c.button,i=c.fromElement;return a.pageX==null&&c.clientX!=null&&(d=a.target.ownerDocument||e,f=d.documentElement,g=d.body,a.pageX=c.clientX+(f&&f.scrollLeft||g&&g.scrollLeft||0)-(f&&f.clientLeft||g&&g.clientLeft||0),a.pageY=c.clientY+(f&&f.scrollTop||g&&g.scrollTop||0)-(f&&f.clientTop||g&&g.clientTop||0)),!a.relatedTarget&&i&&(a.relatedTarget=i===a.target?c.toElement:i),!a.which&&h!==b&&(a.which=h&1?1:h&2?3:h&4?2:0),a}},fix:function(a){if(a[p.expando])return a;var b,c,d=a,f=p.event.fixHooks[a.type]||{},g=f.props?this.props.concat(f.props):this.props;a=p.Event(d);for(b=g.length;b;)c=g[--b],a[c]=d[c];return a.target||(a.target=d.srcElement||e),a.target.nodeType===3&&(a.target=a.target.parentNode),a.metaKey=!!a.metaKey,f.filter?f.filter(a,d):a},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(a,b,c){p.isWindow(this)&&(this.onbeforeunload=c)},teardown:function(a,b){this.onbeforeunload===b&&(this.onbeforeunload=null)}}},simulate:function(a,b,c,d){var e=p.extend(new p.Event,c,{type:a,isSimulated:!0,originalEvent:{}});d?p.event.trigger(e,null,b):p.event.dispatch.call(b,e),e.isDefaultPrevented()&&c.preventDefault()}},p.event.handle=p.event.dispatch,p.removeEvent=e.removeEventListener?function(a,b,c){a.removeEventListener&&a.removeEventListener(b,c,!1)}:function(a,b,c){var d="on"+b;a.detachEvent&&(typeof a[d]=="undefined"&&(a[d]=null),a.detachEvent(d,c))},p.Event=function(a,b){if(this instanceof p.Event)a&&a.type?(this.originalEvent=a,this.type=a.type,this.isDefaultPrevented=a.defaultPrevented||a.returnValue===!1||a.getPreventDefault&&a.getPreventDefault()?bb:ba):this.type=a,b&&p.extend(this,b),this.timeStamp=a&&a.timeStamp||p.now(),this[p.expando]=!0;else return new p.Event(a,b)},p.Event.prototype={preventDefault:function(){this.isDefaultPrevented=bb;var a=this.originalEvent;if(!a)return;a.preventDefault?a.preventDefault():a.returnValue=!1},stopPropagation:function(){this.isPropagationStopped=bb;var a=this.originalEvent;if(!a)return;a.stopPropagation&&a.stopPropagation(),a.cancelBubble=!0},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=bb,this.stopPropagation()},isDefaultPrevented:ba,isPropagationStopped:ba,isImmediatePropagationStopped:ba},p.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(a,b){p.event.special[a]={delegateType:b,bindType:b,handle:function(a){var c,d=this,e=a.relatedTarget,f=a.handleObj,g=f.selector;if(!e||e!==d&&!p.contains(d,e))a.type=f.origType,c=f.handler.apply(this,arguments),a.type=b;return c}}}),p.support.submitBubbles||(p.event.special.submit={setup:function(){if(p.nodeName(this,"form"))return!1;p.event.add(this,"click._submit keypress._submit",function(a){var c=a.target,d=p.nodeName(c,"input")||p.nodeName(c,"button")?c.form:b;d&&!p._data(d,"_submit_attached")&&(p.event.add(d,"submit._submit",function(a){a._submit_bubble=!0}),p._data(d,"_submit_attached",!0))})},postDispatch:function(a){a._submit_bubble&&(delete a._submit_bubble,this.parentNode&&!a.isTrigger&&p.event.simulate("submit",this.parentNode,a,!0))},teardown:function(){if(p.nodeName(this,"form"))return!1;p.event.remove(this,"._submit")}}),p.support.changeBubbles||(p.event.special.change={setup:function(){if(V.test(this.nodeName)){if(this.type==="checkbox"||this.type==="radio")p.event.add(this,"propertychange._change",function(a){a.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),p.event.add(this,"click._change",function(a){this._just_changed&&!a.isTrigger&&(this._just_changed=!1),p.event.simulate("change",this,a,!0)});return!1}p.event.add(this,"beforeactivate._change",function(a){var b=a.target;V.test(b.nodeName)&&!p._data(b,"_change_attached")&&(p.event.add(b,"change._change",function(a){this.parentNode&&!a.isSimulated&&!a.isTrigger&&p.event.simulate("change",this.parentNode,a,!0)}),p._data(b,"_change_attached",!0))})},handle:function(a){var b=a.target;if(this!==b||a.isSimulated||a.isTrigger||b.type!=="radio"&&b.type!=="checkbox")return a.handleObj.handler.apply(this,arguments)},teardown:function(){return p.event.remove(this,"._change"),!V.test(this.nodeName)}}),p.support.focusinBubbles||p.each({focus:"focusin",blur:"focusout"},function(a,b){var c=0,d=function(a){p.event.simulate(b,a.target,p.event.fix(a),!0)};p.event.special[b]={setup:function(){c++===0&&e.addEventListener(a,d,!0)},teardown:function(){--c===0&&e.removeEventListener(a,d,!0)}}}),p.fn.extend({on:function(a,c,d,e,f){var g,h;if(typeof a=="object"){typeof c!="string"&&(d=d||c,c=b);for(h in a)this.on(h,c,d,a[h],f);return this}d==null&&e==null?(e=c,d=c=b):e==null&&(typeof c=="string"?(e=d,d=b):(e=d,d=c,c=b));if(e===!1)e=ba;else if(!e)return this;return f===1&&(g=e,e=function(a){return p().off(a),g.apply(this,arguments)},e.guid=g.guid||(g.guid=p.guid++)),this.each(function(){p.event.add(this,a,e,d,c)})},one:function(a,b,c,d){return this.on(a,b,c,d,1)},off:function(a,c,d){var e,f;if(a&&a.preventDefault&&a.handleObj)return e=a.handleObj,p(a.delegateTarget).off(e.namespace?e.origType+"."+e.namespace:e.origType,e.selector,e.handler),this;if(typeof a=="object"){for(f in a)this.off(f,c,a[f]);return this}if(c===!1||typeof c=="function")d=c,c=b;return d===!1&&(d=ba),this.each(function(){p.event.remove(this,a,d,c)})},bind:function(a,b,c){return this.on(a,null,b,c)},unbind:function(a,b){return this.off(a,null,b)},live:function(a,b,c){return p(this.context).on(a,this.selector,b,c),this},die:function(a,b){return p(this.context).off(a,this.selector||"**",b),this},delegate:function(a,b,c,d){return this.on(b,a,c,d)},undelegate:function(a,b,c){return arguments.length===1?this.off(a,"**"):this.off(b,a||"**",c)},trigger:function(a,b){return this.each(function(){p.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0])return p.event.trigger(a,b,this[0],!0)},toggle:function(a){var b=arguments,c=a.guid||p.guid++,d=0,e=function(c){var e=(p._data(this,"lastToggle"+a.guid)||0)%d;return p._data(this,"lastToggle"+a.guid,e+1),c.preventDefault(),b[e].apply(this,arguments)||!1};e.guid=c;while(d<b.length)b[d++].guid=c;return this.click(e)},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}}),p.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(a,b){p.fn[b]=function(a,c){return c==null&&(c=a,a=null),arguments.length>0?this.on(b,null,a,c):this.trigger(b)},Y.test(b)&&(p.event.fixHooks[b]=p.event.keyHooks),Z.test(b)&&(p.event.fixHooks[b]=p.event.mouseHooks)}),function(a,b){function bc(a,b,c,d){c=c||[],b=b||r;var e,f,i,j,k=b.nodeType;if(!a||typeof a!="string")return c;if(k!==1&&k!==9)return[];i=g(b);if(!i&&!d)if(e=P.exec(a))if(j=e[1]){if(k===9){f=b.getElementById(j);if(!f||!f.parentNode)return c;if(f.id===j)return c.push(f),c}else if(b.ownerDocument&&(f=b.ownerDocument.getElementById(j))&&h(b,f)&&f.id===j)return c.push(f),c}else{if(e[2])return w.apply(c,x.call(b.getElementsByTagName(a),0)),c;if((j=e[3])&&_&&b.getElementsByClassName)return w.apply(c,x.call(b.getElementsByClassName(j),0)),c}return bp(a.replace(L,"$1"),b,c,d,i)}function bd(a){return function(b){var c=b.nodeName.toLowerCase();return c==="input"&&b.type===a}}function be(a){return function(b){var c=b.nodeName.toLowerCase();return(c==="input"||c==="button")&&b.type===a}}function bf(a){return z(function(b){return b=+b,z(function(c,d){var e,f=a([],c.length,b),g=f.length;while(g--)c[e=f[g]]&&(c[e]=!(d[e]=c[e]))})})}function bg(a,b,c){if(a===b)return c;var d=a.nextSibling;while(d){if(d===b)return-1;d=d.nextSibling}return 1}function bh(a,b){var c,d,f,g,h,i,j,k=C[o][a];if(k)return b?0:k.slice(0);h=a,i=[],j=e.preFilter;while(h){if(!c||(d=M.exec(h)))d&&(h=h.slice(d[0].length)),i.push(f=[]);c=!1;if(d=N.exec(h))f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=d[0].replace(L," ");for(g in e.filter)(d=W[g].exec(h))&&(!j[g]||(d=j[g](d,r,!0)))&&(f.push(c=new q(d.shift())),h=h.slice(c.length),c.type=g,c.matches=d);if(!c)break}return b?h.length:h?bc.error(a):C(a,i).slice(0)}function bi(a,b,d){var e=b.dir,f=d&&b.dir==="parentNode",g=u++;return b.first?function(b,c,d){while(b=b[e])if(f||b.nodeType===1)return a(b,c,d)}:function(b,d,h){if(!h){var i,j=t+" "+g+" ",k=j+c;while(b=b[e])if(f||b.nodeType===1){if((i=b[o])===k)return b.sizset;if(typeof i=="string"&&i.indexOf(j)===0){if(b.sizset)return b}else{b[o]=k;if(a(b,d,h))return b.sizset=!0,b;b.sizset=!1}}}else while(b=b[e])if(f||b.nodeType===1)if(a(b,d,h))return b}}function bj(a){return a.length>1?function(b,c,d){var e=a.length;while(e--)if(!a[e](b,c,d))return!1;return!0}:a[0]}function bk(a,b,c,d,e){var f,g=[],h=0,i=a.length,j=b!=null;for(;h<i;h++)if(f=a[h])if(!c||c(f,d,e))g.push(f),j&&b.push(h);return g}function bl(a,b,c,d,e,f){return d&&!d[o]&&(d=bl(d)),e&&!e[o]&&(e=bl(e,f)),z(function(f,g,h,i){if(f&&e)return;var j,k,l,m=[],n=[],o=g.length,p=f||bo(b||"*",h.nodeType?[h]:h,[],f),q=a&&(f||!b)?bk(p,m,a,h,i):p,r=c?e||(f?a:o||d)?[]:g:q;c&&c(q,r,h,i);if(d){l=bk(r,n),d(l,[],h,i),j=l.length;while(j--)if(k=l[j])r[n[j]]=!(q[n[j]]=k)}if(f){j=a&&r.length;while(j--)if(k=r[j])f[m[j]]=!(g[m[j]]=k)}else r=bk(r===g?r.splice(o,r.length):r),e?e(null,g,r,i):w.apply(g,r)})}function bm(a){var b,c,d,f=a.length,g=e.relative[a[0].type],h=g||e.relative[" "],i=g?1:0,j=bi(function(a){return a===b},h,!0),k=bi(function(a){return y.call(b,a)>-1},h,!0),m=[function(a,c,d){return!g&&(d||c!==l)||((b=c).nodeType?j(a,c,d):k(a,c,d))}];for(;i<f;i++)if(c=e.relative[a[i].type])m=[bi(bj(m),c)];else{c=e.filter[a[i].type].apply(null,a[i].matches);if(c[o]){d=++i;for(;d<f;d++)if(e.relative[a[d].type])break;return bl(i>1&&bj(m),i>1&&a.slice(0,i-1).join("").replace(L,"$1"),c,i<d&&bm(a.slice(i,d)),d<f&&bm(a=a.slice(d)),d<f&&a.join(""))}m.push(c)}return bj(m)}function bn(a,b){var d=b.length>0,f=a.length>0,g=function(h,i,j,k,m){var n,o,p,q=[],s=0,u="0",x=h&&[],y=m!=null,z=l,A=h||f&&e.find.TAG("*",m&&i.parentNode||i),B=t+=z==null?1:Math.E;y&&(l=i!==r&&i,c=g.el);for(;(n=A[u])!=null;u++){if(f&&n){for(o=0;p=a[o];o++)if(p(n,i,j)){k.push(n);break}y&&(t=B,c=++g.el)}d&&((n=!p&&n)&&s--,h&&x.push(n))}s+=u;if(d&&u!==s){for(o=0;p=b[o];o++)p(x,q,i,j);if(h){if(s>0)while(u--)!x[u]&&!q[u]&&(q[u]=v.call(k));q=bk(q)}w.apply(k,q),y&&!h&&q.length>0&&s+b.length>1&&bc.uniqueSort(k)}return y&&(t=B,l=z),x};return g.el=0,d?z(g):g}function bo(a,b,c,d){var e=0,f=b.length;for(;e<f;e++)bc(a,b[e],c,d);return c}function bp(a,b,c,d,f){var g,h,j,k,l,m=bh(a),n=m.length;if(!d&&m.length===1){h=m[0]=m[0].slice(0);if(h.length>2&&(j=h[0]).type==="ID"&&b.nodeType===9&&!f&&e.relative[h[1].type]){b=e.find.ID(j.matches[0].replace(V,""),b,f)[0];if(!b)return c;a=a.slice(h.shift().length)}for(g=W.POS.test(a)?-1:h.length-1;g>=0;g--){j=h[g];if(e.relative[k=j.type])break;if(l=e.find[k])if(d=l(j.matches[0].replace(V,""),R.test(h[0].type)&&b.parentNode||b,f)){h.splice(g,1),a=d.length&&h.join("");if(!a)return w.apply(c,x.call(d,0)),c;break}}}return i(a,m)(d,b,f,c,R.test(a)),c}function bq(){}var c,d,e,f,g,h,i,j,k,l,m=!0,n="undefined",o=("sizcache"+Math.random()).replace(".",""),q=String,r=a.document,s=r.documentElement,t=0,u=0,v=[].pop,w=[].push,x=[].slice,y=[].indexOf||function(a){var b=0,c=this.length;for(;b<c;b++)if(this[b]===a)return b;return-1},z=function(a,b){return a[o]=b==null||b,a},A=function(){var a={},b=[];return z(function(c,d){return b.push(c)>e.cacheLength&&delete a[b.shift()],a[c]=d},a)},B=A(),C=A(),D=A(),E="[\\x20\\t\\r\\n\\f]",F="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",G=F.replace("w","w#"),H="([*^$|!~]?=)",I="\\["+E+"*("+F+")"+E+"*(?:"+H+E+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+G+")|)|)"+E+"*\\]",J=":("+F+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+I+")|[^:]|\\\\.)*|.*))\\)|)",K=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+E+"*((?:-\\d)?\\d*)"+E+"*\\)|)(?=[^-]|$)",L=new RegExp("^"+E+"+|((?:^|[^\\\\])(?:\\\\.)*)"+E+"+$","g"),M=new RegExp("^"+E+"*,"+E+"*"),N=new RegExp("^"+E+"*([\\x20\\t\\r\\n\\f>+~])"+E+"*"),O=new RegExp(J),P=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,Q=/^:not/,R=/[\x20\t\r\n\f]*[+~]/,S=/:not\($/,T=/h\d/i,U=/input|select|textarea|button/i,V=/\\(?!\\)/g,W={ID:new RegExp("^#("+F+")"),CLASS:new RegExp("^\\.("+F+")"),NAME:new RegExp("^\\[name=['\"]?("+F+")['\"]?\\]"),TAG:new RegExp("^("+F.replace("w","w*")+")"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+J),POS:new RegExp(K,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+E+"*(even|odd|(([+-]|)(\\d*)n|)"+E+"*(?:([+-]|)"+E+"*(\\d+)|))"+E+"*\\)|)","i"),needsContext:new RegExp("^"+E+"*[>+~]|"+K,"i")},X=function(a){var b=r.createElement("div");try{return a(b)}catch(c){return!1}finally{b=null}},Y=X(function(a){return a.appendChild(r.createComment("")),!a.getElementsByTagName("*").length}),Z=X(function(a){return a.innerHTML="<a href='#'></a>",a.firstChild&&typeof a.firstChild.getAttribute!==n&&a.firstChild.getAttribute("href")==="#"}),$=X(function(a){a.innerHTML="<select></select>";var b=typeof a.lastChild.getAttribute("multiple");return b!=="boolean"&&b!=="string"}),_=X(function(a){return a.innerHTML="<div class='hidden e'></div><div class='hidden'></div>",!a.getElementsByClassName||!a.getElementsByClassName("e").length?!1:(a.lastChild.className="e",a.getElementsByClassName("e").length===2)}),ba=X(function(a){a.id=o+0,a.innerHTML="<a name='"+o+"'></a><div name='"+o+"'></div>",s.insertBefore(a,s.firstChild);var b=r.getElementsByName&&r.getElementsByName(o).length===2+r.getElementsByName(o+0).length;return d=!r.getElementById(o),s.removeChild(a),b});try{x.call(s.childNodes,0)[0].nodeType}catch(bb){x=function(a){var b,c=[];for(;b=this[a];a++)c.push(b);return c}}bc.matches=function(a,b){return bc(a,null,null,b)},bc.matchesSelector=function(a,b){return bc(b,null,null,[a]).length>0},f=bc.getText=function(a){var b,c="",d=0,e=a.nodeType;if(e){if(e===1||e===9||e===11){if(typeof a.textContent=="string")return a.textContent;for(a=a.firstChild;a;a=a.nextSibling)c+=f(a)}else if(e===3||e===4)return a.nodeValue}else for(;b=a[d];d++)c+=f(b);return c},g=bc.isXML=function(a){var b=a&&(a.ownerDocument||a).documentElement;return b?b.nodeName!=="HTML":!1},h=bc.contains=s.contains?function(a,b){var c=a.nodeType===9?a.documentElement:a,d=b&&b.parentNode;return a===d||!!(d&&d.nodeType===1&&c.contains&&c.contains(d))}:s.compareDocumentPosition?function(a,b){return b&&!!(a.compareDocumentPosition(b)&16)}:function(a,b){while(b=b.parentNode)if(b===a)return!0;return!1},bc.attr=function(a,b){var c,d=g(a);return d||(b=b.toLowerCase()),(c=e.attrHandle[b])?c(a):d||$?a.getAttribute(b):(c=a.getAttributeNode(b),c?typeof a[b]=="boolean"?a[b]?b:null:c.specified?c.value:null:null)},e=bc.selectors={cacheLength:50,createPseudo:z,match:W,attrHandle:Z?{}:{href:function(a){return a.getAttribute("href",2)},type:function(a){return a.getAttribute("type")}},find:{ID:d?function(a,b,c){if(typeof b.getElementById!==n&&!c){var d=b.getElementById(a);return d&&d.parentNode?[d]:[]}}:function(a,c,d){if(typeof c.getElementById!==n&&!d){var e=c.getElementById(a);return e?e.id===a||typeof e.getAttributeNode!==n&&e.getAttributeNode("id").value===a?[e]:b:[]}},TAG:Y?function(a,b){if(typeof b.getElementsByTagName!==n)return b.getElementsByTagName(a)}:function(a,b){var c=b.getElementsByTagName(a);if(a==="*"){var d,e=[],f=0;for(;d=c[f];f++)d.nodeType===1&&e.push(d);return e}return c},NAME:ba&&function(a,b){if(typeof b.getElementsByName!==n)return b.getElementsByName(name)},CLASS:_&&function(a,b,c){if(typeof b.getElementsByClassName!==n&&!c)return b.getElementsByClassName(a)}},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(a){return a[1]=a[1].replace(V,""),a[3]=(a[4]||a[5]||"").replace(V,""),a[2]==="~="&&(a[3]=" "+a[3]+" "),a.slice(0,4)},CHILD:function(a){return a[1]=a[1].toLowerCase(),a[1]==="nth"?(a[2]||bc.error(a[0]),a[3]=+(a[3]?a[4]+(a[5]||1):2*(a[2]==="even"||a[2]==="odd")),a[4]=+(a[6]+a[7]||a[2]==="odd")):a[2]&&bc.error(a[0]),a},PSEUDO:function(a){var b,c;if(W.CHILD.test(a[0]))return null;if(a[3])a[2]=a[3];else if(b=a[4])O.test(b)&&(c=bh(b,!0))&&(c=b.indexOf(")",b.length-c)-b.length)&&(b=b.slice(0,c),a[0]=a[0].slice(0,c)),a[2]=b;return a.slice(0,3)}},filter:{ID:d?function(a){return a=a.replace(V,""),function(b){return b.getAttribute("id")===a}}:function(a){return a=a.replace(V,""),function(b){var c=typeof b.getAttributeNode!==n&&b.getAttributeNode("id");return c&&c.value===a}},TAG:function(a){return a==="*"?function(){return!0}:(a=a.replace(V,"").toLowerCase(),function(b){return b.nodeName&&b.nodeName.toLowerCase()===a})},CLASS:function(a){var b=B[o][a];return b||(b=B(a,new RegExp("(^|"+E+")"+a+"("+E+"|$)"))),function(a){return b.test(a.className||typeof a.getAttribute!==n&&a.getAttribute("class")||"")}},ATTR:function(a,b,c){return function(d,e){var f=bc.attr(d,a);return f==null?b==="!=":b?(f+="",b==="="?f===c:b==="!="?f!==c:b==="^="?c&&f.indexOf(c)===0:b==="*="?c&&f.indexOf(c)>-1:b==="$="?c&&f.substr(f.length-c.length)===c:b==="~="?(" "+f+" ").indexOf(c)>-1:b==="|="?f===c||f.substr(0,c.length+1)===c+"-":!1):!0}},CHILD:function(a,b,c,d){return a==="nth"?function(a){var b,e,f=a.parentNode;if(c===1&&d===0)return!0;if(f){e=0;for(b=f.firstChild;b;b=b.nextSibling)if(b.nodeType===1){e++;if(a===b)break}}return e-=d,e===c||e%c===0&&e/c>=0}:function(b){var c=b;switch(a){case"only":case"first":while(c=c.previousSibling)if(c.nodeType===1)return!1;if(a==="first")return!0;c=b;case"last":while(c=c.nextSibling)if(c.nodeType===1)return!1;return!0}}},PSEUDO:function(a,b){var c,d=e.pseudos[a]||e.setFilters[a.toLowerCase()]||bc.error("unsupported pseudo: "+a);return d[o]?d(b):d.length>1?(c=[a,a,"",b],e.setFilters.hasOwnProperty(a.toLowerCase())?z(function(a,c){var e,f=d(a,b),g=f.length;while(g--)e=y.call(a,f[g]),a[e]=!(c[e]=f[g])}):function(a){return d(a,0,c)}):d}},pseudos:{not:z(function(a){var b=[],c=[],d=i(a.replace(L,"$1"));return d[o]?z(function(a,b,c,e){var f,g=d(a,null,e,[]),h=a.length;while(h--)if(f=g[h])a[h]=!(b[h]=f)}):function(a,e,f){return b[0]=a,d(b,null,f,c),!c.pop()}}),has:z(function(a){return function(b){return bc(a,b).length>0}}),contains:z(function(a){return function(b){return(b.textContent||b.innerText||f(b)).indexOf(a)>-1}}),enabled:function(a){return a.disabled===!1},disabled:function(a){return a.disabled===!0},checked:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&!!a.checked||b==="option"&&!!a.selected},selected:function(a){return a.parentNode&&a.parentNode.selectedIndex,a.selected===!0},parent:function(a){return!e.pseudos.empty(a)},empty:function(a){var b;a=a.firstChild;while(a){if(a.nodeName>"@"||(b=a.nodeType)===3||b===4)return!1;a=a.nextSibling}return!0},header:function(a){return T.test(a.nodeName)},text:function(a){var b,c;return a.nodeName.toLowerCase()==="input"&&(b=a.type)==="text"&&((c=a.getAttribute("type"))==null||c.toLowerCase()===b)},radio:bd("radio"),checkbox:bd("checkbox"),file:bd("file"),password:bd("password"),image:bd("image"),submit:be("submit"),reset:be("reset"),button:function(a){var b=a.nodeName.toLowerCase();return b==="input"&&a.type==="button"||b==="button"},input:function(a){return U.test(a.nodeName)},focus:function(a){var b=a.ownerDocument;return a===b.activeElement&&(!b.hasFocus||b.hasFocus())&&(!!a.type||!!a.href)},active:function(a){return a===a.ownerDocument.activeElement},first:bf(function(a,b,c){return[0]}),last:bf(function(a,b,c){return[b-1]}),eq:bf(function(a,b,c){return[c<0?c+b:c]}),even:bf(function(a,b,c){for(var d=0;d<b;d+=2)a.push(d);return a}),odd:bf(function(a,b,c){for(var d=1;d<b;d+=2)a.push(d);return a}),lt:bf(function(a,b,c){for(var d=c<0?c+b:c;--d>=0;)a.push(d);return a}),gt:bf(function(a,b,c){for(var d=c<0?c+b:c;++d<b;)a.push(d);return a})}},j=s.compareDocumentPosition?function(a,b){return a===b?(k=!0,0):(!a.compareDocumentPosition||!b.compareDocumentPosition?a.compareDocumentPosition:a.compareDocumentPosition(b)&4)?-1:1}:function(a,b){if(a===b)return k=!0,0;if(a.sourceIndex&&b.sourceIndex)return a.sourceIndex-b.sourceIndex;var c,d,e=[],f=[],g=a.parentNode,h=b.parentNode,i=g;if(g===h)return bg(a,b);if(!g)return-1;if(!h)return 1;while(i)e.unshift(i),i=i.parentNode;i=h;while(i)f.unshift(i),i=i.parentNode;c=e.length,d=f.length;for(var j=0;j<c&&j<d;j++)if(e[j]!==f[j])return bg(e[j],f[j]);return j===c?bg(a,f[j],-1):bg(e[j],b,1)},[0,0].sort(j),m=!k,bc.uniqueSort=function(a){var b,c=1;k=m,a.sort(j);if(k)for(;b=a[c];c++)b===a[c-1]&&a.splice(c--,1);return a},bc.error=function(a){throw new Error("Syntax error, unrecognized expression: "+a)},i=bc.compile=function(a,b){var c,d=[],e=[],f=D[o][a];if(!f){b||(b=bh(a)),c=b.length;while(c--)f=bm(b[c]),f[o]?d.push(f):e.push(f);f=D(a,bn(e,d))}return f},r.querySelectorAll&&function(){var a,b=bp,c=/'|\\/g,d=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,e=[":focus"],f=[":active",":focus"],h=s.matchesSelector||s.mozMatchesSelector||s.webkitMatchesSelector||s.oMatchesSelector||s.msMatchesSelector;X(function(a){a.innerHTML="<select><option selected=''></option></select>",a.querySelectorAll("[selected]").length||e.push("\\["+E+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),a.querySelectorAll(":checked").length||e.push(":checked")}),X(function(a){a.innerHTML="<p test=''></p>",a.querySelectorAll("[test^='']").length&&e.push("[*^$]="+E+"*(?:\"\"|'')"),a.innerHTML="<input type='hidden'/>",a.querySelectorAll(":enabled").length||e.push(":enabled",":disabled")}),e=new RegExp(e.join("|")),bp=function(a,d,f,g,h){if(!g&&!h&&(!e||!e.test(a))){var i,j,k=!0,l=o,m=d,n=d.nodeType===9&&a;if(d.nodeType===1&&d.nodeName.toLowerCase()!=="object"){i=bh(a),(k=d.getAttribute("id"))?l=k.replace(c,"\\$&"):d.setAttribute("id",l),l="[id='"+l+"'] ",j=i.length;while(j--)i[j]=l+i[j].join("");m=R.test(a)&&d.parentNode||d,n=i.join(",")}if(n)try{return w.apply(f,x.call(m.querySelectorAll(n),0)),f}catch(p){}finally{k||d.removeAttribute("id")}}return b(a,d,f,g,h)},h&&(X(function(b){a=h.call(b,"div");try{h.call(b,"[test!='']:sizzle"),f.push("!=",J)}catch(c){}}),f=new RegExp(f.join("|")),bc.matchesSelector=function(b,c){c=c.replace(d,"='$1']");if(!g(b)&&!f.test(c)&&(!e||!e.test(c)))try{var i=h.call(b,c);if(i||a||b.document&&b.document.nodeType!==11)return i}catch(j){}return bc(c,null,null,[b]).length>0})}(),e.pseudos.nth=e.pseudos.eq,e.filters=bq.prototype=e.pseudos,e.setFilters=new bq,bc.attr=p.attr,p.find=bc,p.expr=bc.selectors,p.expr[":"]=p.expr.pseudos,p.unique=bc.uniqueSort,p.text=bc.getText,p.isXMLDoc=bc.isXML,p.contains=bc.contains}(a);var bc=/Until$/,bd=/^(?:parents|prev(?:Until|All))/,be=/^.[^:#\[\.,]*$/,bf=p.expr.match.needsContext,bg={children:!0,contents:!0,next:!0,prev:!0};p.fn.extend({find:function(a){var b,c,d,e,f,g,h=this;if(typeof a!="string")return p(a).filter(function(){for(b=0,c=h.length;b<c;b++)if(p.contains(h[b],this))return!0});g=this.pushStack("","find",a);for(b=0,c=this.length;b<c;b++){d=g.length,p.find(a,this[b],g);if(b>0)for(e=d;e<g.length;e++)for(f=0;f<d;f++)if(g[f]===g[e]){g.splice(e--,1);break}}return g},has:function(a){var b,c=p(a,this),d=c.length;return this.filter(function(){for(b=0;b<d;b++)if(p.contains(this,c[b]))return!0})},not:function(a){return this.pushStack(bj(this,a,!1),"not",a)},filter:function(a){return this.pushStack(bj(this,a,!0),"filter",a)},is:function(a){return!!a&&(typeof a=="string"?bf.test(a)?p(a,this.context).index(this[0])>=0:p.filter(a,this).length>0:this.filter(a).length>0)},closest:function(a,b){var c,d=0,e=this.length,f=[],g=bf.test(a)||typeof a!="string"?p(a,b||this.context):0;for(;d<e;d++){c=this[d];while(c&&c.ownerDocument&&c!==b&&c.nodeType!==11){if(g?g.index(c)>-1:p.find.matchesSelector(c,a)){f.push(c);break}c=c.parentNode}}return f=f.length>1?p.unique(f):f,this.pushStack(f,"closest",a)},index:function(a){return a?typeof a=="string"?p.inArray(this[0],p(a)):p.inArray(a.jquery?a[0]:a,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(a,b){var c=typeof a=="string"?p(a,b):p.makeArray(a&&a.nodeType?[a]:a),d=p.merge(this.get(),c);return this.pushStack(bh(c[0])||bh(d[0])?d:p.unique(d))},addBack:function(a){return this.add(a==null?this.prevObject:this.prevObject.filter(a))}}),p.fn.andSelf=p.fn.addBack,p.each({parent:function(a){var b=a.parentNode;return b&&b.nodeType!==11?b:null},parents:function(a){return p.dir(a,"parentNode")},parentsUntil:function(a,b,c){return p.dir(a,"parentNode",c)},next:function(a){return bi(a,"nextSibling")},prev:function(a){return bi(a,"previousSibling")},nextAll:function(a){return p.dir(a,"nextSibling")},prevAll:function(a){return p.dir(a,"previousSibling")},nextUntil:function(a,b,c){return p.dir(a,"nextSibling",c)},prevUntil:function(a,b,c){return p.dir(a,"previousSibling",c)},siblings:function(a){return p.sibling((a.parentNode||{}).firstChild,a)},children:function(a){return p.sibling(a.firstChild)},contents:function(a){return p.nodeName(a,"iframe")?a.contentDocument||a.contentWindow.document:p.merge([],a.childNodes)}},function(a,b){p.fn[a]=function(c,d){var e=p.map(this,b,c);return bc.test(a)||(d=c),d&&typeof d=="string"&&(e=p.filter(d,e)),e=this.length>1&&!bg[a]?p.unique(e):e,this.length>1&&bd.test(a)&&(e=e.reverse()),this.pushStack(e,a,k.call(arguments).join(","))}}),p.extend({filter:function(a,b,c){return c&&(a=":not("+a+")"),b.length===1?p.find.matchesSelector(b[0],a)?[b[0]]:[]:p.find.matches(a,b)},dir:function(a,c,d){var e=[],f=a[c];while(f&&f.nodeType!==9&&(d===b||f.nodeType!==1||!p(f).is(d)))f.nodeType===1&&e.push(f),f=f[c];return e},sibling:function(a,b){var c=[];for(;a;a=a.nextSibling)a.nodeType===1&&a!==b&&c.push(a);return c}});var bl="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",bm=/ jQuery\d+="(?:null|\d+)"/g,bn=/^\s+/,bo=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,bp=/<([\w:]+)/,bq=/<tbody/i,br=/<|&#?\w+;/,bs=/<(?:script|style|link)/i,bt=/<(?:script|object|embed|option|style)/i,bu=new RegExp("<(?:"+bl+")[\\s/>]","i"),bv=/^(?:checkbox|radio)$/,bw=/checked\s*(?:[^=]|=\s*.checked.)/i,bx=/\/(java|ecma)script/i,by=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,bz={option:[1,"<select multiple='multiple'>","</select>"],legend:[1,"<fieldset>","</fieldset>"],thead:[1,"<table>","</table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],area:[1,"<map>","</map>"],_default:[0,"",""]},bA=bk(e),bB=bA.appendChild(e.createElement("div"));bz.optgroup=bz.option,bz.tbody=bz.tfoot=bz.colgroup=bz.caption=bz.thead,bz.th=bz.td,p.support.htmlSerialize||(bz._default=[1,"X<div>","</div>"]),p.fn.extend({text:function(a){return p.access(this,function(a){return a===b?p.text(this):this.empty().append((this[0]&&this[0].ownerDocument||e).createTextNode(a))},null,a,arguments.length)},wrapAll:function(a){if(p.isFunction(a))return this.each(function(b){p(this).wrapAll(a.call(this,b))});if(this[0]){var b=p(a,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&b.insertBefore(this[0]),b.map(function(){var a=this;while(a.firstChild&&a.firstChild.nodeType===1)a=a.firstChild;return a}).append(this)}return this},wrapInner:function(a){return p.isFunction(a)?this.each(function(b){p(this).wrapInner(a.call(this,b))}):this.each(function(){var b=p(this),c=b.contents();c.length?c.wrapAll(a):b.append(a)})},wrap:function(a){var b=p.isFunction(a);return this.each(function(c){p(this).wrapAll(b?a.call(this,c):a)})},unwrap:function(){return this.parent().each(function(){p.nodeName(this,"body")||p(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.appendChild(a)})},prepend:function(){return this.domManip(arguments,!0,function(a){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(a,this.firstChild)})},before:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(a,this),"before",this.selector)}},after:function(){if(!bh(this[0]))return this.domManip(arguments,!1,function(a){this.parentNode.insertBefore(a,this.nextSibling)});if(arguments.length){var a=p.clean(arguments);return this.pushStack(p.merge(this,a),"after",this.selector)}},remove:function(a,b){var c,d=0;for(;(c=this[d])!=null;d++)if(!a||p.filter(a,[c]).length)!b&&c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),p.cleanData([c])),c.parentNode&&c.parentNode.removeChild(c);return this},empty:function(){var a,b=0;for(;(a=this[b])!=null;b++){a.nodeType===1&&p.cleanData(a.getElementsByTagName("*"));while(a.firstChild)a.removeChild(a.firstChild)}return this},clone:function(a,b){return a=a==null?!1:a,b=b==null?a:b,this.map(function(){return p.clone(this,a,b)})},html:function(a){return p.access(this,function(a){var c=this[0]||{},d=0,e=this.length;if(a===b)return c.nodeType===1?c.innerHTML.replace(bm,""):b;if(typeof a=="string"&&!bs.test(a)&&(p.support.htmlSerialize||!bu.test(a))&&(p.support.leadingWhitespace||!bn.test(a))&&!bz[(bp.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(bo,"<$1></$2>");try{for(;d<e;d++)c=this[d]||{},c.nodeType===1&&(p.cleanData(c.getElementsByTagName("*")),c.innerHTML=a);c=0}catch(f){}}c&&this.empty().append(a)},null,a,arguments.length)},replaceWith:function(a){return bh(this[0])?this.length?this.pushStack(p(p.isFunction(a)?a():a),"replaceWith",a):this:p.isFunction(a)?this.each(function(b){var c=p(this),d=c.html();c.replaceWith(a.call(this,b,d))}):(typeof a!="string"&&(a=p(a).detach()),this.each(function(){var b=this.nextSibling,c=this.parentNode;p(this).remove(),b?p(b).before(a):p(c).append(a)}))},detach:function(a){return this.remove(a,!0)},domManip:function(a,c,d){a=[].concat.apply([],a);var e,f,g,h,i=0,j=a[0],k=[],l=this.length;if(!p.support.checkClone&&l>1&&typeof j=="string"&&bw.test(j))return this.each(function(){p(this).domManip(a,c,d)});if(p.isFunction(j))return this.each(function(e){var f=p(this);a[0]=j.call(this,e,c?f.html():b),f.domManip(a,c,d)});if(this[0]){e=p.buildFragment(a,this,k),g=e.fragment,f=g.firstChild,g.childNodes.length===1&&(g=f);if(f){c=c&&p.nodeName(f,"tr");for(h=e.cacheable||l-1;i<l;i++)d.call(c&&p.nodeName(this[i],"table")?bC(this[i],"tbody"):this[i],i===h?g:p.clone(g,!0,!0))}g=f=null,k.length&&p.each(k,function(a,b){b.src?p.ajax?p.ajax({url:b.src,type:"GET",dataType:"script",async:!1,global:!1,"throws":!0}):p.error("no ajax"):p.globalEval((b.text||b.textContent||b.innerHTML||"").replace(by,"")),b.parentNode&&b.parentNode.removeChild(b)})}return this}}),p.buildFragment=function(a,c,d){var f,g,h,i=a[0];return c=c||e,c=!c.nodeType&&c[0]||c,c=c.ownerDocument||c,a.length===1&&typeof i=="string"&&i.length<512&&c===e&&i.charAt(0)==="<"&&!bt.test(i)&&(p.support.checkClone||!bw.test(i))&&(p.support.html5Clone||!bu.test(i))&&(g=!0,f=p.fragments[i],h=f!==b),f||(f=c.createDocumentFragment(),p.clean(a,c,f,d),g&&(p.fragments[i]=h&&f)),{fragment:f,cacheable:g}},p.fragments={},p.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(a,b){p.fn[a]=function(c){var d,e=0,f=[],g=p(c),h=g.length,i=this.length===1&&this[0].parentNode;if((i==null||i&&i.nodeType===11&&i.childNodes.length===1)&&h===1)return g[b](this[0]),this;for(;e<h;e++)d=(e>0?this.clone(!0):this).get(),p(g[e])[b](d),f=f.concat(d);return this.pushStack(f,a,g.selector)}}),p.extend({clone:function(a,b,c){var d,e,f,g;p.support.html5Clone||p.isXMLDoc(a)||!bu.test("<"+a.nodeName+">")?g=a.cloneNode(!0):(bB.innerHTML=a.outerHTML,bB.removeChild(g=bB.firstChild));if((!p.support.noCloneEvent||!p.support.noCloneChecked)&&(a.nodeType===1||a.nodeType===11)&&!p.isXMLDoc(a)){bE(a,g),d=bF(a),e=bF(g);for(f=0;d[f];++f)e[f]&&bE(d[f],e[f])}if(b){bD(a,g);if(c){d=bF(a),e=bF(g);for(f=0;d[f];++f)bD(d[f],e[f])}}return d=e=null,g},clean:function(a,b,c,d){var f,g,h,i,j,k,l,m,n,o,q,r,s=b===e&&bA,t=[];if(!b||typeof b.createDocumentFragment=="undefined")b=e;for(f=0;(h=a[f])!=null;f++){typeof h=="number"&&(h+="");if(!h)continue;if(typeof h=="string")if(!br.test(h))h=b.createTextNode(h);else{s=s||bk(b),l=b.createElement("div"),s.appendChild(l),h=h.replace(bo,"<$1></$2>"),i=(bp.exec(h)||["",""])[1].toLowerCase(),j=bz[i]||bz._default,k=j[0],l.innerHTML=j[1]+h+j[2];while(k--)l=l.lastChild;if(!p.support.tbody){m=bq.test(h),n=i==="table"&&!m?l.firstChild&&l.firstChild.childNodes:j[1]==="<table>"&&!m?l.childNodes:[];for(g=n.length-1;g>=0;--g)p.nodeName(n[g],"tbody")&&!n[g].childNodes.length&&n[g].parentNode.removeChild(n[g])}!p.support.leadingWhitespace&&bn.test(h)&&l.insertBefore(b.createTextNode(bn.exec(h)[0]),l.firstChild),h=l.childNodes,l.parentNode.removeChild(l)}h.nodeType?t.push(h):p.merge(t,h)}l&&(h=l=s=null);if(!p.support.appendChecked)for(f=0;(h=t[f])!=null;f++)p.nodeName(h,"input")?bG(h):typeof h.getElementsByTagName!="undefined"&&p.grep(h.getElementsByTagName("input"),bG);if(c){q=function(a){if(!a.type||bx.test(a.type))return d?d.push(a.parentNode?a.parentNode.removeChild(a):a):c.appendChild(a)};for(f=0;(h=t[f])!=null;f++)if(!p.nodeName(h,"script")||!q(h))c.appendChild(h),typeof h.getElementsByTagName!="undefined"&&(r=p.grep(p.merge([],h.getElementsByTagName("script")),q),t.splice.apply(t,[f+1,0].concat(r)),f+=r.length)}return t},cleanData:function(a,b){var c,d,e,f,g=0,h=p.expando,i=p.cache,j=p.support.deleteExpando,k=p.event.special;for(;(e=a[g])!=null;g++)if(b||p.acceptData(e)){d=e[h],c=d&&i[d];if(c){if(c.events)for(f in c.events)k[f]?p.event.remove(e,f):p.removeEvent(e,f,c.handle);i[d]&&(delete i[d],j?delete e[h]:e.removeAttribute?e.removeAttribute(h):e[h]=null,p.deletedIds.push(d))}}}}),function(){var a,b;p.uaMatch=function(a){a=a.toLowerCase();var b=/(chrome)[ \/]([\w.]+)/.exec(a)||/(webkit)[ \/]([\w.]+)/.exec(a)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(a)||/(msie) ([\w.]+)/.exec(a)||a.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(a)||[];return{browser:b[1]||"",version:b[2]||"0"}},a=p.uaMatch(g.userAgent),b={},a.browser&&(b[a.browser]=!0,b.version=a.version),b.chrome?b.webkit=!0:b.webkit&&(b.safari=!0),p.browser=b,p.sub=function(){function a(b,c){return new a.fn.init(b,c)}p.extend(!0,a,this),a.superclass=this,a.fn=a.prototype=this(),a.fn.constructor=a,a.sub=this.sub,a.fn.init=function c(c,d){return d&&d instanceof p&&!(d instanceof a)&&(d=a(d)),p.fn.init.call(this,c,d,b)},a.fn.init.prototype=a.fn;var b=a(e);return a}}();var bH,bI,bJ,bK=/alpha\([^)]*\)/i,bL=/opacity=([^)]*)/,bM=/^(top|right|bottom|left)$/,bN=/^(none|table(?!-c[ea]).+)/,bO=/^margin/,bP=new RegExp("^("+q+")(.*)$","i"),bQ=new RegExp("^("+q+")(?!px)[a-z%]+$","i"),bR=new RegExp("^([-+])=("+q+")","i"),bS={},bT={position:"absolute",visibility:"hidden",display:"block"},bU={letterSpacing:0,fontWeight:400},bV=["Top","Right","Bottom","Left"],bW=["Webkit","O","Moz","ms"],bX=p.fn.toggle;p.fn.extend({css:function(a,c){return p.access(this,function(a,c,d){return d!==b?p.style(a,c,d):p.css(a,c)},a,c,arguments.length>1)},show:function(){return b$(this,!0)},hide:function(){return b$(this)},toggle:function(a,b){var c=typeof a=="boolean";return p.isFunction(a)&&p.isFunction(b)?bX.apply(this,arguments):this.each(function(){(c?a:bZ(this))?p(this).show():p(this).hide()})}}),p.extend({cssHooks:{opacity:{get:function(a,b){if(b){var c=bH(a,"opacity");return c===""?"1":c}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{"float":p.support.cssFloat?"cssFloat":"styleFloat"},style:function(a,c,d,e){if(!a||a.nodeType===3||a.nodeType===8||!a.style)return;var f,g,h,i=p.camelCase(c),j=a.style;c=p.cssProps[i]||(p.cssProps[i]=bY(j,i)),h=p.cssHooks[c]||p.cssHooks[i];if(d===b)return h&&"get"in h&&(f=h.get(a,!1,e))!==b?f:j[c];g=typeof d,g==="string"&&(f=bR.exec(d))&&(d=(f[1]+1)*f[2]+parseFloat(p.css(a,c)),g="number");if(d==null||g==="number"&&isNaN(d))return;g==="number"&&!p.cssNumber[i]&&(d+="px");if(!h||!("set"in h)||(d=h.set(a,d,e))!==b)try{j[c]=d}catch(k){}},css:function(a,c,d,e){var f,g,h,i=p.camelCase(c);return c=p.cssProps[i]||(p.cssProps[i]=bY(a.style,i)),h=p.cssHooks[c]||p.cssHooks[i],h&&"get"in h&&(f=h.get(a,!0,e)),f===b&&(f=bH(a,c)),f==="normal"&&c in bU&&(f=bU[c]),d||e!==b?(g=parseFloat(f),d||p.isNumeric(g)?g||0:f):f},swap:function(a,b,c){var d,e,f={};for(e in b)f[e]=a.style[e],a.style[e]=b[e];d=c.call(a);for(e in b)a.style[e]=f[e];return d}}),a.getComputedStyle?bH=function(b,c){var d,e,f,g,h=a.getComputedStyle(b,null),i=b.style;return h&&(d=h[c],d===""&&!p.contains(b.ownerDocument,b)&&(d=p.style(b,c)),bQ.test(d)&&bO.test(c)&&(e=i.width,f=i.minWidth,g=i.maxWidth,i.minWidth=i.maxWidth=i.width=d,d=h.width,i.width=e,i.minWidth=f,i.maxWidth=g)),d}:e.documentElement.currentStyle&&(bH=function(a,b){var c,d,e=a.currentStyle&&a.currentStyle[b],f=a.style;return e==null&&f&&f[b]&&(e=f[b]),bQ.test(e)&&!bM.test(b)&&(c=f.left,d=a.runtimeStyle&&a.runtimeStyle.left,d&&(a.runtimeStyle.left=a.currentStyle.left),f.left=b==="fontSize"?"1em":e,e=f.pixelLeft+"px",f.left=c,d&&(a.runtimeStyle.left=d)),e===""?"auto":e}),p.each(["height","width"],function(a,b){p.cssHooks[b]={get:function(a,c,d){if(c)return a.offsetWidth===0&&bN.test(bH(a,"display"))?p.swap(a,bT,function(){return cb(a,b,d)}):cb(a,b,d)},set:function(a,c,d){return b_(a,c,d?ca(a,b,d,p.support.boxSizing&&p.css(a,"boxSizing")==="border-box"):0)}}}),p.support.opacity||(p.cssHooks.opacity={get:function(a,b){return bL.test((b&&a.currentStyle?a.currentStyle.filter:a.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":b?"1":""},set:function(a,b){var c=a.style,d=a.currentStyle,e=p.isNumeric(b)?"alpha(opacity="+b*100+")":"",f=d&&d.filter||c.filter||"";c.zoom=1;if(b>=1&&p.trim(f.replace(bK,""))===""&&c.removeAttribute){c.removeAttribute("filter");if(d&&!d.filter)return}c.filter=bK.test(f)?f.replace(bK,e):f+" "+e}}),p(function(){p.support.reliableMarginRight||(p.cssHooks.marginRight={get:function(a,b){return p.swap(a,{display:"inline-block"},function(){if(b)return bH(a,"marginRight")})}}),!p.support.pixelPosition&&p.fn.position&&p.each(["top","left"],function(a,b){p.cssHooks[b]={get:function(a,c){if(c){var d=bH(a,b);return bQ.test(d)?p(a).position()[b]+"px":d}}}})}),p.expr&&p.expr.filters&&(p.expr.filters.hidden=function(a){return a.offsetWidth===0&&a.offsetHeight===0||!p.support.reliableHiddenOffsets&&(a.style&&a.style.display||bH(a,"display"))==="none"},p.expr.filters.visible=function(a){return!p.expr.filters.hidden(a)}),p.each({margin:"",padding:"",border:"Width"},function(a,b){p.cssHooks[a+b]={expand:function(c){var d,e=typeof c=="string"?c.split(" "):[c],f={};for(d=0;d<4;d++)f[a+bV[d]+b]=e[d]||e[d-2]||e[0];return f}},bO.test(a)||(p.cssHooks[a+b].set=b_)});var cd=/%20/g,ce=/\[\]$/,cf=/\r?\n/g,cg=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,ch=/^(?:select|textarea)/i;p.fn.extend({serialize:function(){return p.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?p.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||ch.test(this.nodeName)||cg.test(this.type))}).map(function(a,b){var c=p(this).val();return c==null?null:p.isArray(c)?p.map(c,function(a,c){return{name:b.name,value:a.replace(cf,"\r\n")}}):{name:b.name,value:c.replace(cf,"\r\n")}}).get()}}),p.param=function(a,c){var d,e=[],f=function(a,b){b=p.isFunction(b)?b():b==null?"":b,e[e.length]=encodeURIComponent(a)+"="+encodeURIComponent(b)};c===b&&(c=p.ajaxSettings&&p.ajaxSettings.traditional);if(p.isArray(a)||a.jquery&&!p.isPlainObject(a))p.each(a,function(){f(this.name,this.value)});else for(d in a)ci(d,a[d],c,f);return e.join("&").replace(cd,"+")};var cj,ck,cl=/#.*$/,cm=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,cn=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,co=/^(?:GET|HEAD)$/,cp=/^\/\//,cq=/\?/,cr=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,cs=/([?&])_=[^&]*/,ct=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,cu=p.fn.load,cv={},cw={},cx=["*/"]+["*"];try{ck=f.href}catch(cy){ck=e.createElement("a"),ck.href="",ck=ck.href}cj=ct.exec(ck.toLowerCase())||[],p.fn.load=function(a,c,d){if(typeof a!="string"&&cu)return cu.apply(this,arguments);if(!this.length)return this;var e,f,g,h=this,i=a.indexOf(" ");return i>=0&&(e=a.slice(i,a.length),a=a.slice(0,i)),p.isFunction(c)?(d=c,c=b):c&&typeof c=="object"&&(f="POST"),p.ajax({url:a,type:f,dataType:"html",data:c,complete:function(a,b){d&&h.each(d,g||[a.responseText,b,a])}}).done(function(a){g=arguments,h.html(e?p("<div>").append(a.replace(cr,"")).find(e):a)}),this},p.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(a,b){p.fn[b]=function(a){return this.on(b,a)}}),p.each(["get","post"],function(a,c){p[c]=function(a,d,e,f){return p.isFunction(d)&&(f=f||e,e=d,d=b),p.ajax({type:c,url:a,data:d,success:e,dataType:f})}}),p.extend({getScript:function(a,c){return p.get(a,b,c,"script")},getJSON:function(a,b,c){return p.get(a,b,c,"json")},ajaxSetup:function(a,b){return b?cB(a,p.ajaxSettings):(b=a,a=p.ajaxSettings),cB(a,b),a},ajaxSettings:{url:ck,isLocal:cn.test(cj[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":cx},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":a.String,"text html":!0,"text json":p.parseJSON,"text xml":p.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:cz(cv),ajaxTransport:cz(cw),ajax:function(a,c){function y(a,c,f,i){var k,s,t,u,w,y=c;if(v===2)return;v=2,h&&clearTimeout(h),g=b,e=i||"",x.readyState=a>0?4:0,f&&(u=cC(l,x,f));if(a>=200&&a<300||a===304)l.ifModified&&(w=x.getResponseHeader("Last-Modified"),w&&(p.lastModified[d]=w),w=x.getResponseHeader("Etag"),w&&(p.etag[d]=w)),a===304?(y="notmodified",k=!0):(k=cD(l,u),y=k.state,s=k.data,t=k.error,k=!t);else{t=y;if(!y||a)y="error",a<0&&(a=0)}x.status=a,x.statusText=(c||y)+"",k?o.resolveWith(m,[s,y,x]):o.rejectWith(m,[x,y,t]),x.statusCode(r),r=b,j&&n.trigger("ajax"+(k?"Success":"Error"),[x,l,k?s:t]),q.fireWith(m,[x,y]),j&&(n.trigger("ajaxComplete",[x,l]),--p.active||p.event.trigger("ajaxStop"))}typeof a=="object"&&(c=a,a=b),c=c||{};var d,e,f,g,h,i,j,k,l=p.ajaxSetup({},c),m=l.context||l,n=m!==l&&(m.nodeType||m instanceof p)?p(m):p.event,o=p.Deferred(),q=p.Callbacks("once memory"),r=l.statusCode||{},t={},u={},v=0,w="canceled",x={readyState:0,setRequestHeader:function(a,b){if(!v){var c=a.toLowerCase();a=u[c]=u[c]||a,t[a]=b}return this},getAllResponseHeaders:function(){return v===2?e:null},getResponseHeader:function(a){var c;if(v===2){if(!f){f={};while(c=cm.exec(e))f[c[1].toLowerCase()]=c[2]}c=f[a.toLowerCase()]}return c===b?null:c},overrideMimeType:function(a){return v||(l.mimeType=a),this},abort:function(a){return a=a||w,g&&g.abort(a),y(0,a),this}};o.promise(x),x.success=x.done,x.error=x.fail,x.complete=q.add,x.statusCode=function(a){if(a){var b;if(v<2)for(b in a)r[b]=[r[b],a[b]];else b=a[x.status],x.always(b)}return this},l.url=((a||l.url)+"").replace(cl,"").replace(cp,cj[1]+"//"),l.dataTypes=p.trim(l.dataType||"*").toLowerCase().split(s),l.crossDomain==null&&(i=ct.exec(l.url.toLowerCase())||!1,l.crossDomain=i&&i.join(":")+(i[3]?"":i[1]==="http:"?80:443)!==cj.join(":")+(cj[3]?"":cj[1]==="http:"?80:443)),l.data&&l.processData&&typeof l.data!="string"&&(l.data=p.param(l.data,l.traditional)),cA(cv,l,c,x);if(v===2)return x;j=l.global,l.type=l.type.toUpperCase(),l.hasContent=!co.test(l.type),j&&p.active++===0&&p.event.trigger("ajaxStart");if(!l.hasContent){l.data&&(l.url+=(cq.test(l.url)?"&":"?")+l.data,delete l.data),d=l.url;if(l.cache===!1){var z=p.now(),A=l.url.replace(cs,"$1_="+z);l.url=A+(A===l.url?(cq.test(l.url)?"&":"?")+"_="+z:"")}}(l.data&&l.hasContent&&l.contentType!==!1||c.contentType)&&x.setRequestHeader("Content-Type",l.contentType),l.ifModified&&(d=d||l.url,p.lastModified[d]&&x.setRequestHeader("If-Modified-Since",p.lastModified[d]),p.etag[d]&&x.setRequestHeader("If-None-Match",p.etag[d])),x.setRequestHeader("Accept",l.dataTypes[0]&&l.accepts[l.dataTypes[0]]?l.accepts[l.dataTypes[0]]+(l.dataTypes[0]!=="*"?", "+cx+"; q=0.01":""):l.accepts["*"]);for(k in l.headers)x.setRequestHeader(k,l.headers[k]);if(!l.beforeSend||l.beforeSend.call(m,x,l)!==!1&&v!==2){w="abort";for(k in{success:1,error:1,complete:1})x[k](l[k]);g=cA(cw,l,c,x);if(!g)y(-1,"No Transport");else{x.readyState=1,j&&n.trigger("ajaxSend",[x,l]),l.async&&l.timeout>0&&(h=setTimeout(function(){x.abort("timeout")},l.timeout));try{v=1,g.send(t,y)}catch(B){if(v<2)y(-1,B);else throw B}}return x}return x.abort()},active:0,lastModified:{},etag:{}});var cE=[],cF=/\?/,cG=/(=)\?(?=&|$)|\?\?/,cH=p.now();p.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var a=cE.pop()||p.expando+"_"+cH++;return this[a]=!0,a}}),p.ajaxPrefilter("json jsonp",function(c,d,e){var f,g,h,i=c.data,j=c.url,k=c.jsonp!==!1,l=k&&cG.test(j),m=k&&!l&&typeof i=="string"&&!(c.contentType||"").indexOf("application/x-www-form-urlencoded")&&cG.test(i);if(c.dataTypes[0]==="jsonp"||l||m)return f=c.jsonpCallback=p.isFunction(c.jsonpCallback)?c.jsonpCallback():c.jsonpCallback,g=a[f],l?c.url=j.replace(cG,"$1"+f):m?c.data=i.replace(cG,"$1"+f):k&&(c.url+=(cF.test(j)?"&":"?")+c.jsonp+"="+f),c.converters["script json"]=function(){return h||p.error(f+" was not called"),h[0]},c.dataTypes[0]="json",a[f]=function(){h=arguments},e.always(function(){a[f]=g,c[f]&&(c.jsonpCallback=d.jsonpCallback,cE.push(f)),h&&p.isFunction(g)&&g(h[0]),h=g=b}),"script"}),p.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(a){return p.globalEval(a),a}}}),p.ajaxPrefilter("script",function(a){a.cache===b&&(a.cache=!1),a.crossDomain&&(a.type="GET",a.global=!1)}),p.ajaxTransport("script",function(a){if(a.crossDomain){var c,d=e.head||e.getElementsByTagName("head")[0]||e.documentElement;return{send:function(f,g){c=e.createElement("script"),c.async="async",a.scriptCharset&&(c.charset=a.scriptCharset),c.src=a.url,c.onload=c.onreadystatechange=function(a,e){if(e||!c.readyState||/loaded|complete/.test(c.readyState))c.onload=c.onreadystatechange=null,d&&c.parentNode&&d.removeChild(c),c=b,e||g(200,"success")},d.insertBefore(c,d.firstChild)},abort:function(){c&&c.onload(0,1)}}}});var cI,cJ=a.ActiveXObject?function(){for(var a in cI)cI[a](0,1)}:!1,cK=0;p.ajaxSettings.xhr=a.ActiveXObject?function(){return!this.isLocal&&cL()||cM()}:cL,function(a){p.extend(p.support,{ajax:!!a,cors:!!a&&"withCredentials"in a})}(p.ajaxSettings.xhr()),p.support.ajax&&p.ajaxTransport(function(c){if(!c.crossDomain||p.support.cors){var d;return{send:function(e,f){var g,h,i=c.xhr();c.username?i.open(c.type,c.url,c.async,c.username,c.password):i.open(c.type,c.url,c.async);if(c.xhrFields)for(h in c.xhrFields)i[h]=c.xhrFields[h];c.mimeType&&i.overrideMimeType&&i.overrideMimeType(c.mimeType),!c.crossDomain&&!e["X-Requested-With"]&&(e["X-Requested-With"]="XMLHttpRequest");try{for(h in e)i.setRequestHeader(h,e[h])}catch(j){}i.send(c.hasContent&&c.data||null),d=function(a,e){var h,j,k,l,m;try{if(d&&(e||i.readyState===4)){d=b,g&&(i.onreadystatechange=p.noop,cJ&&delete cI[g]);if(e)i.readyState!==4&&i.abort();else{h=i.status,k=i.getAllResponseHeaders(),l={},m=i.responseXML,m&&m.documentElement&&(l.xml=m);try{l.text=i.responseText}catch(a){}try{j=i.statusText}catch(n){j=""}!h&&c.isLocal&&!c.crossDomain?h=l.text?200:404:h===1223&&(h=204)}}}catch(o){e||f(-1,o)}l&&f(h,j,l,k)},c.async?i.readyState===4?setTimeout(d,0):(g=++cK,cJ&&(cI||(cI={},p(a).unload(cJ)),cI[g]=d),i.onreadystatechange=d):d()},abort:function(){d&&d(0,1)}}}});var cN,cO,cP=/^(?:toggle|show|hide)$/,cQ=new RegExp("^(?:([-+])=|)("+q+")([a-z%]*)$","i"),cR=/queueHooks$/,cS=[cY],cT={"*":[function(a,b){var c,d,e=this.createTween(a,b),f=cQ.exec(b),g=e.cur(),h=+g||0,i=1,j=20;if(f){c=+f[2],d=f[3]||(p.cssNumber[a]?"":"px");if(d!=="px"&&h){h=p.css(e.elem,a,!0)||c||1;do i=i||".5",h=h/i,p.style(e.elem,a,h+d);while(i!==(i=e.cur()/g)&&i!==1&&--j)}e.unit=d,e.start=h,e.end=f[1]?h+(f[1]+1)*c:c}return e}]};p.Animation=p.extend(cW,{tweener:function(a,b){p.isFunction(a)?(b=a,a=["*"]):a=a.split(" ");var c,d=0,e=a.length;for(;d<e;d++)c=a[d],cT[c]=cT[c]||[],cT[c].unshift(b)},prefilter:function(a,b){b?cS.unshift(a):cS.push(a)}}),p.Tween=cZ,cZ.prototype={constructor:cZ,init:function(a,b,c,d,e,f){this.elem=a,this.prop=c,this.easing=e||"swing",this.options=b,this.start=this.now=this.cur(),this.end=d,this.unit=f||(p.cssNumber[c]?"":"px")},cur:function(){var a=cZ.propHooks[this.prop];return a&&a.get?a.get(this):cZ.propHooks._default.get(this)},run:function(a){var b,c=cZ.propHooks[this.prop];return this.options.duration?this.pos=b=p.easing[this.easing](a,this.options.duration*a,0,1,this.options.duration):this.pos=b=a,this.now=(this.end-this.start)*b+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),c&&c.set?c.set(this):cZ.propHooks._default.set(this),this}},cZ.prototype.init.prototype=cZ.prototype,cZ.propHooks={_default:{get:function(a){var b;return a.elem[a.prop]==null||!!a.elem.style&&a.elem.style[a.prop]!=null?(b=p.css(a.elem,a.prop,!1,""),!b||b==="auto"?0:b):a.elem[a.prop]},set:function(a){p.fx.step[a.prop]?p.fx.step[a.prop](a):a.elem.style&&(a.elem.style[p.cssProps[a.prop]]!=null||p.cssHooks[a.prop])?p.style(a.elem,a.prop,a.now+a.unit):a.elem[a.prop]=a.now}}},cZ.propHooks.scrollTop=cZ.propHooks.scrollLeft={set:function(a){a.elem.nodeType&&a.elem.parentNode&&(a.elem[a.prop]=a.now)}},p.each(["toggle","show","hide"],function(a,b){var c=p.fn[b];p.fn[b]=function(d,e,f){return d==null||typeof d=="boolean"||!a&&p.isFunction(d)&&p.isFunction(e)?c.apply(this,arguments):this.animate(c$(b,!0),d,e,f)}}),p.fn.extend({fadeTo:function(a,b,c,d){return this.filter(bZ).css("opacity",0).show().end().animate({opacity:b},a,c,d)},animate:function(a,b,c,d){var e=p.isEmptyObject(a),f=p.speed(b,c,d),g=function(){var b=cW(this,p.extend({},a),f);e&&b.stop(!0)};return e||f.queue===!1?this.each(g):this.queue(f.queue,g)},stop:function(a,c,d){var e=function(a){var b=a.stop;delete a.stop,b(d)};return typeof a!="string"&&(d=c,c=a,a=b),c&&a!==!1&&this.queue(a||"fx",[]),this.each(function(){var b=!0,c=a!=null&&a+"queueHooks",f=p.timers,g=p._data(this);if(c)g[c]&&g[c].stop&&e(g[c]);else for(c in g)g[c]&&g[c].stop&&cR.test(c)&&e(g[c]);for(c=f.length;c--;)f[c].elem===this&&(a==null||f[c].queue===a)&&(f[c].anim.stop(d),b=!1,f.splice(c,1));(b||!d)&&p.dequeue(this,a)})}}),p.each({slideDown:c$("show"),slideUp:c$("hide"),slideToggle:c$("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(a,b){p.fn[a]=function(a,c,d){return this.animate(b,a,c,d)}}),p.speed=function(a,b,c){var d=a&&typeof a=="object"?p.extend({},a):{complete:c||!c&&b||p.isFunction(a)&&a,duration:a,easing:c&&b||b&&!p.isFunction(b)&&b};d.duration=p.fx.off?0:typeof d.duration=="number"?d.duration:d.duration in p.fx.speeds?p.fx.speeds[d.duration]:p.fx.speeds._default;if(d.queue==null||d.queue===!0)d.queue="fx";return d.old=d.complete,d.complete=function(){p.isFunction(d.old)&&d.old.call(this),d.queue&&p.dequeue(this,d.queue)},d},p.easing={linear:function(a){return a},swing:function(a){return.5-Math.cos(a*Math.PI)/2}},p.timers=[],p.fx=cZ.prototype.init,p.fx.tick=function(){var a,b=p.timers,c=0;for(;c<b.length;c++)a=b[c],!a()&&b[c]===a&&b.splice(c--,1);b.length||p.fx.stop()},p.fx.timer=function(a){a()&&p.timers.push(a)&&!cO&&(cO=setInterval(p.fx.tick,p.fx.interval))},p.fx.interval=13,p.fx.stop=function(){clearInterval(cO),cO=null},p.fx.speeds={slow:600,fast:200,_default:400},p.fx.step={},p.expr&&p.expr.filters&&(p.expr.filters.animated=function(a){return p.grep(p.timers,function(b){return a===b.elem}).length});var c_=/^(?:body|html)$/i;p.fn.offset=function(a){if(arguments.length)return a===b?this:this.each(function(b){p.offset.setOffset(this,a,b)});var c,d,e,f,g,h,i,j={top:0,left:0},k=this[0],l=k&&k.ownerDocument;if(!l)return;return(d=l.body)===k?p.offset.bodyOffset(k):(c=l.documentElement,p.contains(c,k)?(typeof k.getBoundingClientRect!="undefined"&&(j=k.getBoundingClientRect()),e=da(l),f=c.clientTop||d.clientTop||0,g=c.clientLeft||d.clientLeft||0,h=e.pageYOffset||c.scrollTop,i=e.pageXOffset||c.scrollLeft,{top:j.top+h-f,left:j.left+i-g}):j)},p.offset={bodyOffset:function(a){var b=a.offsetTop,c=a.offsetLeft;return p.support.doesNotIncludeMarginInBodyOffset&&(b+=parseFloat(p.css(a,"marginTop"))||0,c+=parseFloat(p.css(a,"marginLeft"))||0),{top:b,left:c}},setOffset:function(a,b,c){var d=p.css(a,"position");d==="static"&&(a.style.position="relative");var e=p(a),f=e.offset(),g=p.css(a,"top"),h=p.css(a,"left"),i=(d==="absolute"||d==="fixed")&&p.inArray("auto",[g,h])>-1,j={},k={},l,m;i?(k=e.position(),l=k.top,m=k.left):(l=parseFloat(g)||0,m=parseFloat(h)||0),p.isFunction(b)&&(b=b.call(a,c,f)),b.top!=null&&(j.top=b.top-f.top+l),b.left!=null&&(j.left=b.left-f.left+m),"using"in b?b.using.call(a,j):e.css(j)}},p.fn.extend({position:function(){if(!this[0])return;var a=this[0],b=this.offsetParent(),c=this.offset(),d=c_.test(b[0].nodeName)?{top:0,left:0}:b.offset();return c.top-=parseFloat(p.css(a,"marginTop"))||0,c.left-=parseFloat(p.css(a,"marginLeft"))||0,d.top+=parseFloat(p.css(b[0],"borderTopWidth"))||0,d.left+=parseFloat(p.css(b[0],"borderLeftWidth"))||0,{top:c.top-d.top,left:c.left-d.left}},offsetParent:function(){return this.map(function(){var a=this.offsetParent||e.body;while(a&&!c_.test(a.nodeName)&&p.css(a,"position")==="static")a=a.offsetParent;return a||e.body})}}),p.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(a,c){var d=/Y/.test(c);p.fn[a]=function(e){return p.access(this,function(a,e,f){var g=da(a);if(f===b)return g?c in g?g[c]:g.document.documentElement[e]:a[e];g?g.scrollTo(d?p(g).scrollLeft():f,d?f:p(g).scrollTop()):a[e]=f},a,e,arguments.length,null)}}),p.each({Height:"height",Width:"width"},function(a,c){p.each({padding:"inner"+a,content:c,"":"outer"+a},function(d,e){p.fn[e]=function(e,f){var g=arguments.length&&(d||typeof e!="boolean"),h=d||(e===!0||f===!0?"margin":"border");return p.access(this,function(c,d,e){var f;return p.isWindow(c)?c.document.documentElement["client"+a]:c.nodeType===9?(f=c.documentElement,Math.max(c.body["scroll"+a],f["scroll"+a],c.body["offset"+a],f["offset"+a],f["client"+a])):e===b?p.css(c,d,e,h):p.style(c,d,e,h)},c,g?e:b,g,null)}})}),a.jQuery=a.$=p,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return p})})(window);
\ No newline at end of file
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/gradlew.bat	(date 1613491889000)
@@ -0,0 +1,100 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windows variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/build.gradle	(date 1613491889000)
@@ -0,0 +1,95 @@
+plugins {
+    id 'org.springframework.boot' version '2.1.7.RELEASE'
+    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
+    id 'java'
+}
+
+
+group = 'com.syzegee'
+version = '0.0.1-SNAPSHOT'
+sourceCompatibility = '11'
+
+jar {
+    manifest {
+        attributes 'Main-Class': 'com.syzegee.customer.events.CustomerEventsApplication'
+    }
+}
+
+
+configurations {
+    developmentOnly
+    runtimeClasspath {
+        extendsFrom developmentOnly
+    }
+    compileOnly {
+        extendsFrom annotationProcessor
+    }
+}
+
+repositories {
+    mavenCentral()
+}
+ext {
+    set('swaggerVersion', "2.9.2")
+    set('keycloakVersion', '7.0.1')
+}
+dependencies {
+    implementation 'org.springframework.boot:spring-boot-starter-web'
+    implementation 'org.springframework.boot:spring-boot-starter-actuator'
+    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
+    compile group: 'org.springframework.boot', name: 'spring-boot-starter-tomcat', version: '2.1.7.RELEASE'
+    runtimeOnly 'org.postgresql:postgresql'
+    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
+    compile group: 'postgresql', name: 'postgresql', version: '9.1-901-1.jdbc4'
+    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
+    compileOnly 'org.projectlombok:lombok'
+    annotationProcessor 'org.projectlombok:lombok'
+    testImplementation 'org.springframework.boot:spring-boot-starter-test'
+    implementation 'org.springframework.boot:spring-boot-starter-actuator'
+    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
+    implementation 'org.springframework.boot:spring-boot-starter-web'
+    implementation 'org.springframework.kafka:spring-kafka'
+    implementation 'org.springframework.boot:spring-boot-starter-security'
+    implementation 'org.keycloak:keycloak-spring-boot-starter'
+    compile 'org.springdoc:springdoc-openapi-ui:1.2.17'
+    compileOnly 'org.projectlombok:lombok'
+    runtimeOnly 'org.springframework.boot:spring-boot-devtools'
+    runtimeOnly 'org.postgresql:postgresql'
+    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
+    compile group: 'postgresql', name: 'postgresql', version: '9.1-901-1.jdbc4'
+    annotationProcessor 'org.projectlombok:lombok'
+    testImplementation 'org.springframework.boot:spring-boot-starter-test'
+    testImplementation 'org.springframework.kafka:spring-kafka-test'
+    testImplementation 'org.apache.httpcomponents:httpclient'
+    testCompile('junit:junit:4.12')
+    testCompile('io.cucumber:cucumber-junit:2.3.1')
+    testCompile('io.cucumber:cucumber-java:2.3.1')
+    testCompile('io.cucumber:cucumber-spring:3.0.2')
+    testCompile('com.github.tomakehurst:wiremock:2.16.0')
+    compile group: 'org.json', name: 'json', version: '20190722'
+    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
+    compile "javax.mail:mail:1.4.7"
+    compile group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
+    compile group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'
+    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
+//      craftercms
+    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jersey', version: '2.1.3.RELEASE'
+    compile group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
+    compile "org.json:json:20180813"
+    compile "com.sun.xml.bind:jaxb-core:2.2.8-b01"
+    compile "com.sun.xml.bind:jaxb-impl:2.2-promoted-b65"
+    implementation "io.springfox:springfox-swagger2:$swaggerVersion"
+    implementation "io.springfox:springfox-swagger-ui:$swaggerVersion"
+
+//     Keycloak
+//     compile 'org.springframework.boot:spring-boot-starter-security'
+//    implementation 'org.keycloak:keycloak-spring-boot-starter'
+}
+dependencyManagement {
+    imports {
+        mavenBom "org.keycloak.bom:keycloak-adapter-bom:${keycloakVersion}"
+    }
+}
+test {
+    ignoreFailures = true
+}
\ No newline at end of file
Index: Customer.postman_collection.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Customer.postman_collection.json b/Customer.postman_collection.json
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/Customer.postman_collection.json	(date 1613491889000)
@@ -0,0 +1,350 @@
+{
+	"info": {
+		"_postman_id": "e776d8c0-eb4e-49e2-927b-819870fa87cc",
+		"name": "Customer",
+		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
+	},
+	"item": [
+		{
+			"name": "Customer Activate",
+			"request": {
+				"method": "POST",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json"
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\r\n\t\r\n   \"customerUserId\":\"dev.worthy1@gmail.com\",\r\n   \"activationCode\":\"920566\"\r\n}"
+				},
+				"url": {
+					"raw": "http://localhost:8081/v1/customer/activate",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8081",
+					"path": [
+						"v1",
+						"customer",
+						"activate"
+					]
+				}
+			},
+			"response": []
+		},
+		{
+			"name": "web enabled",
+			"request": {
+				"auth": {
+					"type": "noauth"
+				},
+				"method": "POST",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json"
+					},
+					{
+						"key": "Authorization",
+						"value": "Bearer sdfdf",
+						"type": "text",
+						"disabled": true
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\r\n    \"orgDetail\": {\r\n        \"organizationName\":\"Syzgee\",\r\n         \"createdBy\": \"John smith\"\r\n    },\r\n    \"customerDetail\": {\r\n             \"createdBy\": \"John smith\"\r\n    },\r\n    \"userDetail\": {\r\n        \"firstName\": \"Lakshmi\",\r\n        \"lastName\": \"N S\",\r\n        \"emailId\": \"dev.worthy2@gmail.com\",\r\n        \"createdBy\": \"John smith\"\r\n    }\r\n}"
+				},
+				"url": {
+					"raw": "http://localhost:8081/v1/customer/webenabled",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8081",
+					"path": [
+						"v1",
+						"customer",
+						"webenabled"
+					]
+				}
+			},
+			"response": []
+		},
+		{
+			"name": "Customer user details",
+			"request": {
+				"auth": {
+					"type": "noauth"
+				},
+				"method": "POST",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json"
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\n    customerUserByEmailId(emailId: \"dev.worthy1@gmail.com\"){\n    emailId\n    customerId\n    firstName\n    lastName\n    correlationId\n    createdBy\n    createdDate\n    updatedBy\n    updatedDate\n\n    }\n }"
+				},
+				"url": {
+					"raw": "http://localhost:8080/api/v1/customerUserDetails",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8080",
+					"path": [
+						"api",
+						"v1",
+						"customerUserDetails"
+					]
+				}
+			},
+			"response": []
+		},
+		{
+			"name": "Get solicitation Name by customer Id",
+			"request": {
+				"auth": {
+					"type": "bearer",
+					"bearer": [
+						{
+							"key": "token",
+							"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJuRmhiUXdURTZVNk0wc3lsUHFIWVZiWVV2NTFINHBFbEUtNXp2Nlp6T1VnIn0.eyJqdGkiOiI4Mzg3MWY3NS0zZmNlLTQ4NDktYmFhZC05YTIyNmU0NDdmZTciLCJleHAiOjE1OTQ5MDMzMDMsIm5iZiI6MCwiaWF0IjoxNTk0ODk3MzAzLCJpc3MiOiJodHRwOi8vZWMyLTE4LTE5MS0xOTktMjM3LnVzLWVhc3QtMi5jb21wdXRlLmFtYXpvbmF3cy5jb206ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJhdWQiOlsiTWF1dGljLXJlYWxtIiwic3plbGxzLXJlYWxtIiwibWFzdGVyLXJlYWxtIiwibWF1dGljLXJlYWxtIiwiYWNjb3VudCJdLCJzdWIiOiI3NmQ0OGMwYi02ZDEyLTRiNjgtOWIwMi04YzM1MzQyMzdhNTMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzemVsbHMtc2VydmVyIiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiNjdhMTNmY2YtMTA0MC00YzM4LTg3NDEtNGYxOWNhOTlmZGFmIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwODAiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImNyZWF0ZS1yZWFsbSIsIm9mZmxpbmVfYWNjZXNzIiwiYWRtaW4iLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7InN6ZWxscy1zZXJ2ZXIiOnsicm9sZXMiOlsidW1hX3Byb3RlY3Rpb24iXX0sIk1hdXRpYy1yZWFsbSI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsImNyZWF0ZS1jbGllbnQiLCJtYW5hZ2UtdXNlcnMiLCJxdWVyeS1yZWFsbXMiLCJ2aWV3LWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktdXNlcnMiLCJtYW5hZ2UtZXZlbnRzIiwibWFuYWdlLXJlYWxtIiwidmlldy1ldmVudHMiLCJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJtYW5hZ2UtY2xpZW50cyIsInF1ZXJ5LWdyb3VwcyJdfSwic3plbGxzLXJlYWxtIjp7InJvbGVzIjpbInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwidmlldy1yZWFsbSIsIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiLCJpbXBlcnNvbmF0aW9uIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJtYXN0ZXItcmVhbG0iOnsicm9sZXMiOlsidmlldy1yZWFsbSIsInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwibWFuYWdlLWlkZW50aXR5LXByb3ZpZGVycyIsImltcGVyc29uYXRpb24iLCJjcmVhdGUtY2xpZW50IiwibWFuYWdlLXVzZXJzIiwicXVlcnktcmVhbG1zIiwidmlldy1hdXRob3JpemF0aW9uIiwicXVlcnktY2xpZW50cyIsInF1ZXJ5LXVzZXJzIiwibWFuYWdlLWV2ZW50cyIsIm1hbmFnZS1yZWFsbSIsInZpZXctZXZlbnRzIiwidmlldy11c2VycyIsInZpZXctY2xpZW50cyIsIm1hbmFnZS1hdXRob3JpemF0aW9uIiwibWFuYWdlLWNsaWVudHMiLCJxdWVyeS1ncm91cHMiXX0sIm1hdXRpYy1yZWFsbSI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsImNyZWF0ZS1jbGllbnQiLCJtYW5hZ2UtdXNlcnMiLCJxdWVyeS1yZWFsbXMiLCJ2aWV3LWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktdXNlcnMiLCJtYW5hZ2UtZXZlbnRzIiwibWFuYWdlLXJlYWxtIiwidmlldy1ldmVudHMiLCJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJtYW5hZ2UtY2xpZW50cyIsInF1ZXJ5LWdyb3VwcyJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJ1c2VyX2lkIjoiNzZkNDhjMGItNmQxMi00YjY4LTliMDItOGMzNTM0MjM3YTUzIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZGV2LndvcnRoeTFAZ21haWwuY29tIn0.Fyii2j5QN3NQg1PLiUDdW-sL6tBVxVBLitzSZUkyNyZvQcQhB2zZPgl7tDbJGg4KoP5zSSTii0vH_cOPV4dkH7ap06gvYjC9-B6V-CMgP9eoa6ZNsDoijJVKFdeWQ-5tIIjyEMUoqQTeD8so0MMZJGL2ijdrw2mWmUN7l0mhh_H-aTOVK5tfsRljeVcUkl-vOce5CUH6BAdKXTG98nlsAd0nyGWG_UHoEuOyaQOsOJ9JxIwYMFpcGyZkZu5uAWBlRQXcy9RCvFj2ldKKfPPz5piaiCZ1Uvma1xhGoPPTQ-zIx_NegZjpLf0ydgdMGen7rYP1qVvga2U3BvIyAvW55w",
+							"type": "string"
+						}
+					]
+				},
+				"method": "POST",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json",
+						"type": "text"
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\r\n    getSolicitationPackage(customerId: 66){\r\n        solicitationId\r\n        solicitationName\r\n\r\n        }\r\n }",
+					"options": {
+						"raw": {
+							"language": "text"
+						}
+					}
+				},
+				"url": {
+					"raw": "http://localhost:8080/api/v1/solicitation/list",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8080",
+					"path": [
+						"api",
+						"v1",
+						"solicitation",
+						"list"
+					]
+				}
+			},
+			"response": []
+		},
+		{
+			"name": "Create update Profile",
+			"request": {
+				"auth": {
+					"type": "bearer",
+					"bearer": [
+						{
+							"key": "token",
+							"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJuRmhiUXdURTZVNk0wc3lsUHFIWVZiWVV2NTFINHBFbEUtNXp2Nlp6T1VnIn0.eyJqdGkiOiJhMzI3YWZmYS1hMzAwLTQzYTktYWIxNi1lYTA2YWYzOWY1MTYiLCJleHAiOjE1OTUyNDgxODgsIm5iZiI6MCwiaWF0IjoxNTk1MjQyMTg4LCJpc3MiOiJodHRwOi8vZWMyLTE4LTE5MS0xOTktMjM3LnVzLWVhc3QtMi5jb21wdXRlLmFtYXpvbmF3cy5jb206ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJhdWQiOlsiTWF1dGljLXJlYWxtIiwic3plbGxzLXJlYWxtIiwibWFzdGVyLXJlYWxtIiwibWF1dGljLXJlYWxtIiwiYWNjb3VudCJdLCJzdWIiOiJkYTUyZDA3ZC1lODg3LTRiMzgtOWM5NS1lMDhmY2I4ZDliZTQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzemVsbHMtc2VydmVyIiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiY2Q5YWZiOTAtODllMy00NjFmLWIyNmQtNTYxYzZhMTkxNGU3IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwODAiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImNyZWF0ZS1yZWFsbSIsIm9mZmxpbmVfYWNjZXNzIiwiYWRtaW4iLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7InN6ZWxscy1zZXJ2ZXIiOnsicm9sZXMiOlsidW1hX3Byb3RlY3Rpb24iXX0sIk1hdXRpYy1yZWFsbSI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsImNyZWF0ZS1jbGllbnQiLCJtYW5hZ2UtdXNlcnMiLCJxdWVyeS1yZWFsbXMiLCJ2aWV3LWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktdXNlcnMiLCJtYW5hZ2UtZXZlbnRzIiwibWFuYWdlLXJlYWxtIiwidmlldy1ldmVudHMiLCJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJtYW5hZ2UtY2xpZW50cyIsInF1ZXJ5LWdyb3VwcyJdfSwic3plbGxzLXJlYWxtIjp7InJvbGVzIjpbInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwidmlldy1yZWFsbSIsIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiLCJpbXBlcnNvbmF0aW9uIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJtYXN0ZXItcmVhbG0iOnsicm9sZXMiOlsidmlldy1yZWFsbSIsInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwibWFuYWdlLWlkZW50aXR5LXByb3ZpZGVycyIsImltcGVyc29uYXRpb24iLCJjcmVhdGUtY2xpZW50IiwibWFuYWdlLXVzZXJzIiwicXVlcnktcmVhbG1zIiwidmlldy1hdXRob3JpemF0aW9uIiwicXVlcnktY2xpZW50cyIsInF1ZXJ5LXVzZXJzIiwibWFuYWdlLWV2ZW50cyIsIm1hbmFnZS1yZWFsbSIsInZpZXctZXZlbnRzIiwidmlldy11c2VycyIsInZpZXctY2xpZW50cyIsIm1hbmFnZS1hdXRob3JpemF0aW9uIiwibWFuYWdlLWNsaWVudHMiLCJxdWVyeS1ncm91cHMiXX0sIm1hdXRpYy1yZWFsbSI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsImNyZWF0ZS1jbGllbnQiLCJtYW5hZ2UtdXNlcnMiLCJxdWVyeS1yZWFsbXMiLCJ2aWV3LWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktdXNlcnMiLCJtYW5hZ2UtZXZlbnRzIiwibWFuYWdlLXJlYWxtIiwidmlldy1ldmVudHMiLCJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJtYW5hZ2UtY2xpZW50cyIsInF1ZXJ5LWdyb3VwcyJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJ1c2VyX2lkIjoiZGE1MmQwN2QtZTg4Ny00YjM4LTljOTUtZTA4ZmNiOGQ5YmU0IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXJ1bkBnbWFpbC5jb20ifQ.GPIAhuUF_pqcX_W5tUZUVIMblO2Ar7KD6YQPW_TQomcW5TkeMMjXTDo4XfwKRWyhL1rFNv11vXDjUs6SVliOpd1cSLBMDMSCoSoq6REG7p-7dI2YoScwfqxRSU8bgkBMnG0w1g_kA8Hr-V543cUVo8xvvJNMx1e_5LKMnospmFjwFwDODz8Dhy35IXVIsb81HnjztoN4sjVLoTPHNafltleWL6yz9Xcg6-Nd3u1aUAurH1DJjpJBcIBuPcTAxRhA79lAHCf61pg-3inl9hQ1eHuajDZSyek5VLarGfz5IovgY76LWBlFWri_xNEI-GJ-hNKskse8626DjREpxl0shQ",
+							"type": "string"
+						}
+					]
+				},
+				"method": "PUT",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json"
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\r\n    \"orgDetail\": {\r\n        \"organizationSize\": \"500+\",\r\n        \"updatedBy\": \"John smith1\"\r\n    },\r\n    \"customerDetail\": {\r\n        \"userId\": \"12345689\",\r\n        \"businessName\": \"sagr jackiea\",\r\n        \"businessEmail\": \"dev.worthy@gmail.com\",\r\n        \"businessType\": \"FLIGHT\",\r\n        \"businessCategory\": \"C2B\",\r\n        \"phoneNo\": \"9980137288\",\r\n        \"currency\": \"345\",\r\n        \"communicationPreferences\": \"sms\",\r\n        \"region\": \"India\",\r\n        \"updatedBy\": \"John smith1\"\r\n    },\r\n    \"custAddressDetail\": \r\n        {\r\n        \"addressLine1\": \"HSR Layout\",\r\n        \"addressLine2\": \"BTM\",\r\n        \"addressLine3\": \"India\",\r\n        \"city\": \"Bangalore\",\r\n        \"sate\": \"karnataka\",\r\n        \"zipCode\": \"571602\",\r\n        \"countryCode\": \"55555\",\r\n        \"createdBy\": \"John smith\"\r\n      }\r\n      ,\r\n    \"tierDetail\": {\r\n        \"tierName\": \"Custom\",\r\n        \"createdBy\": \"John smith\"\r\n    },\r\n    \"benefitDetail\": [\r\n        {\r\n            \"benefitName\": \"events\",\r\n            \"vendorId\": [\r\n                1,\r\n                2\r\n            ],\r\n            \"imageUrl\": \"http://google.com/sfsfs\",\r\n            \"redirectUrl\": \"http://werwerw.com/\",\r\n            \"createdBy\": \"John smith\"\r\n        },\r\n        {\r\n            \"benefitName\": \"travel\",\r\n            \"vendorId\": [\r\n                3,\r\n                1\r\n            ],\r\n            \"imageUrl\": \"http://google.com/werwerw\",\r\n            \"redirectUrl\": \"http://dgdfgd.com/\",\r\n            \"createdBy\": \"John smith\"\r\n        },\r\n        {\r\n            \"benefitName\": \"cashback\",\r\n            \"vendorId\": [\r\n                3,\r\n                1\r\n            ],\r\n            \"imageUrl\": \"http://google.com/cashback\",\r\n            \"redirectUrl\": \"http://dgdfgd.com/\",\r\n            \"createdBy\": \"John smith\"\r\n        },\r\n        {\r\n            \"benefitName\": \"abc\",\r\n            \"vendorId\": [\r\n                3,\r\n                1\r\n            ],\r\n            \"imageUrl\": \"http://google.com/abc\",\r\n            \"redirectUrl\": \"http://dgdfgd.com/\",\r\n            \"createdBy\": \"John smith\"\r\n        },\r\n\t\t{\r\n            \"benefitName\": \"Dining\",\r\n            \"vendorId\": [\r\n                3,\r\n                1\r\n            ],\r\n            \"imageUrl\": \"http://google.com/abc\",\r\n            \"redirectUrl\": \"http://dgdfgd.com/\",\r\n            \"createdBy\": \"John smith\"\r\n        }\r\n    ],\r\n    \"packagesDetail\": [\r\n        {\r\n            \"packageName\": \"Independence Day Package\",\r\n            \"benefits\": [\r\n                {\r\n                    \"benefitName\": \"travel\",\r\n                    \"createdBy\": \"John smith\"\r\n                },\r\n                {\r\n                    \"benefitName\": \"abc\",\r\n                    \"createdBy\": \"John smith\"\r\n                },\r\n                {\r\n                    \"benefitName\": \"events\",\r\n                    \"createdBy\": \"John smith\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"packageName\": \"Republic Day Package\",\r\n            \"benefits\": [\r\n                {\r\n                    \"benefitName\": \"cashback\",\r\n                    \"createdBy\": \"John smith\"\r\n                },\r\n                {\r\n                    \"benefitName\": \"travel\",\r\n                    \"createdBy\": \"John smith\"\r\n                },\r\n                {\r\n                    \"benefitName\": \"Dining\",\r\n                    \"createdBy\": \"John smith\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"solicitationDetail\": [\r\n        {\r\n            \"solicitationName\": \"Winter Campaign\",\r\n            \"solicitationDesc\": \"This Campaign blah blah\",\r\n            \"startDate\": \"2020-11-10\",\r\n            \"endDate\": \"2020-09-14\",\r\n            \"packages\": [\r\n                \"Independence Day Package\"\r\n            ]\r\n        },\r\n        {\r\n            \"solicitationName\": \"Winter Campaign\",\r\n            \"solicitationDesc\": \"This Campaign blah blah\",\r\n            \"startDate\": \"2020-11-10\",\r\n            \"endDate\": \"2020-09-14\",\r\n            \"packages\": [\r\n                \"Independence Day Package\",\r\n                \"Republic Day Package\"\r\n            ]\r\n        }\r\n    ],\r\n    \"domainDetails\": {\r\n        \"siteCode\": \"001\",\r\n        \"templateCode\": \"0022\",\r\n        \"siteName\": \"test\",\r\n        \"siteDesc\": \"wildjasmine sites \",\r\n        \"siteType\": \"Travel\",\r\n        \"domainName\": \"www.wildjasmine.com\",\r\n        \"logo\": \"logo\",\r\n        \"tagline\": \"we think big data\"\r\n    },\r\n    \"customerRule\": {\r\n        \"projectName\": \"Wildjasminess\",\r\n        \"defaultRuleName\": \"syzegee platform rule\"\r\n    },\r\n    \"customerTemplate\": {\r\n        \"customerTemplateId\": \"tp123\"\r\n    }\r\n}"
+				},
+				"url": {
+					"raw": "http://localhost:8081/v1/customer/86",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8081",
+					"path": [
+						"v1",
+						"customer",
+						"86"
+					]
+				}
+			},
+			"response": []
+		},
+		{
+			"name": "Get Solicitation",
+			"request": {
+				"auth": {
+					"type": "noauth"
+				},
+				"method": "POST",
+				"header": [
+					{
+						"key": "Authorization",
+						"value": "dfdfdsds",
+						"type": "text"
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "\n{\nsolicitationPackage(customer_id:\"66\",solicitation_id:\"3115\"){\n  solicitationId\n  customer{\n    customerId\n    }\n  packages{\n        packageId\n        packageName\n        }\n  }\n}\n"
+				},
+				"url": {
+					"raw": "http://localhost:8080/api/v1/solicitation",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8080",
+					"path": [
+						"api",
+						"v1",
+						"solicitation"
+					]
+				}
+			},
+			"response": []
+		},
+		{
+			"name": "Get Customer",
+			"request": {
+				"auth": {
+					"type": "noauth"
+				},
+				"method": "POST",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json"
+					},
+					{
+						"key": "Authorization",
+						"value": "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJuRmhiUXdURTZVNk0wc3lsUHFIWVZiWVV2NTFINHBFbEUtNXp2Nlp6T1VnIn0.eyJqdGkiOiIxZDA3MTZiMC1iYzBhLTQ5ZTEtODAyMS01ZjQwNjZkOWUzOWQiLCJleHAiOjE1OTQ4MDY4NDgsIm5iZiI6MCwiaWF0IjoxNTk0ODAwODQ4LCJpc3MiOiJodHRwOi8vZWMyLTE4LTE5MS0xOTktMjM3LnVzLWVhc3QtMi5jb21wdXRlLmFtYXpvbmF3cy5jb206ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJhdWQiOlsiTWF1dGljLXJlYWxtIiwic3plbGxzLXJlYWxtIiwibWFzdGVyLXJlYWxtIiwibWF1dGljLXJlYWxtIiwiYWNjb3VudCJdLCJzdWIiOiJkYTUyZDA3ZC1lODg3LTRiMzgtOWM5NS1lMDhmY2I4ZDliZTQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzemVsbHMtc2VydmVyIiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiMTdmNTlmMDctMzIzZS00ZWRkLTliNmQtMjliMzQ0N2M5MzRiIiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwODAiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImNyZWF0ZS1yZWFsbSIsIm9mZmxpbmVfYWNjZXNzIiwiYWRtaW4iLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7InN6ZWxscy1zZXJ2ZXIiOnsicm9sZXMiOlsidW1hX3Byb3RlY3Rpb24iXX0sIk1hdXRpYy1yZWFsbSI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsImNyZWF0ZS1jbGllbnQiLCJtYW5hZ2UtdXNlcnMiLCJxdWVyeS1yZWFsbXMiLCJ2aWV3LWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktdXNlcnMiLCJtYW5hZ2UtZXZlbnRzIiwibWFuYWdlLXJlYWxtIiwidmlldy1ldmVudHMiLCJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJtYW5hZ2UtY2xpZW50cyIsInF1ZXJ5LWdyb3VwcyJdfSwic3plbGxzLXJlYWxtIjp7InJvbGVzIjpbInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwidmlldy1yZWFsbSIsIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiLCJpbXBlcnNvbmF0aW9uIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJtYXN0ZXItcmVhbG0iOnsicm9sZXMiOlsidmlldy1yZWFsbSIsInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwibWFuYWdlLWlkZW50aXR5LXByb3ZpZGVycyIsImltcGVyc29uYXRpb24iLCJjcmVhdGUtY2xpZW50IiwibWFuYWdlLXVzZXJzIiwicXVlcnktcmVhbG1zIiwidmlldy1hdXRob3JpemF0aW9uIiwicXVlcnktY2xpZW50cyIsInF1ZXJ5LXVzZXJzIiwibWFuYWdlLWV2ZW50cyIsIm1hbmFnZS1yZWFsbSIsInZpZXctZXZlbnRzIiwidmlldy11c2VycyIsInZpZXctY2xpZW50cyIsIm1hbmFnZS1hdXRob3JpemF0aW9uIiwibWFuYWdlLWNsaWVudHMiLCJxdWVyeS1ncm91cHMiXX0sIm1hdXRpYy1yZWFsbSI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsImNyZWF0ZS1jbGllbnQiLCJtYW5hZ2UtdXNlcnMiLCJxdWVyeS1yZWFsbXMiLCJ2aWV3LWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktdXNlcnMiLCJtYW5hZ2UtZXZlbnRzIiwibWFuYWdlLXJlYWxtIiwidmlldy1ldmVudHMiLCJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJtYW5hZ2UtY2xpZW50cyIsInF1ZXJ5LWdyb3VwcyJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJ1c2VyX2lkIjoiZGE1MmQwN2QtZTg4Ny00YjM4LTljOTUtZTA4ZmNiOGQ5YmU0IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXJ1bkBnbWFpbC5jb20ifQ.YHoX2hPvk88hrzg7Gj6O6MeK23MI05rlSvKh5_63cZbZXcKdzGDZUaAh3zSZvYXhZeDPutvvUBPvlAFqafPA6Hfwwd0gCPlgUxV1cYhabefIYKpooL-PJ8z9X6ZO-rjCiINFEVq6wGiazXw-OYvHDGh6Zh8CzEOwxQFl5NCx6BETx3g2zYS_vBV8A7QHWoy5h15dOU_ev0gi4HvMna8Ntr_E8RFVCojnTBBFFXrUoGTqs0s5xDTLs94xjOobcRKTfYoOyrDPZC5QmNiLhDyNvkimOkoRhuzP98LNJa88Peu4kzXRXLMvS8caUtqYU5rWfvhydN5VEJ_hPmgNqoJNlA",
+						"type": "text",
+						"disabled": true
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\r\ncustomer(id:\"133\"){\r\n\tcustomerId\r\n    userId\r\n\tcommunicationPreferences\r\n\tfirstName\r\n    state\r\n    businessName\r\n    businessEmail\r\n    industryType\r\n    region\r\n    phone\r\n    currency\r\n    correlationId\r\n    organizationId{\r\n    \torganizationId\r\n    \torganizationName\r\n    \torganizationDesc\r\n    \tcorrelationId\r\n\t\tstate    \t\r\n    \t}\r\n\t\tcustomerUserCollection{\r\n\t\t\tfirstName\r\n    lastName\r\n    emailId\r\n    customerId\r\n    isActive\r\n    correlationId\r\n\t\t}\r\n\tcustomerAddresses {\r\n    \tcustomerAddressId\r\n    \taddressLine1\r\n    \taddressLine2\r\n    \taddressLine3\r\n\t\tcity\r\n    \tstate\r\n    \tsate\r\n    \tzipCode\r\n    \tcountryCode\r\n    \tcorrelationId\r\n    \t}\r\n    tiers{\r\n\t\ttierId\r\n    \ttierName\r\n    \tcorrelationId\r\n    \tstate\r\n    \tpackages{\r\n    \t\tpackageId\r\n    \t\tpackageName\r\n\t\t\tcorrelationId\r\n    \t\tstate\r\n    \t\tpackagesBenefits{\r\n    \t\t\tpackageBenefitId\r\n    \t\t\tcustomerBenefitId{\r\n    \t\t\t\tcustomerBenefitId\r\n\t\t\t\t\tbenefitName\r\n            description\r\n            imageURL\r\n            redirectURL\r\n    \t\t\t\tvendorId\r\n    \t\t\t\tstate\r\n    \t\t\t\tcorrelationId\r\n    \t\t\t}\r\n\t\t\t\tcorrelationId\r\n    \t\t\tstate\r\n    \t\t\t}\r\n    \t\t}\r\n    \t}\r\n    \tcustomerBenefits{\r\n    \t\tcustomerBenefitId\r\n    \t\tvendorId\r\n    \t\tstate\r\n    \t\tcorrelationId\r\n    \t}\r\n    \tdomainDetails{\r\n    \t\tsiteId\r\n    \t\tsiteCode\r\n    \t\ttemplateCode\r\n    \t\tsiteName\r\n    \t\tsiteDesc\r\n    \t\tdomainName\r\n    \t\tlogo\r\n    \t\ttagline\r\n    \t\tcorrelationId\r\n    \t}\r\n\t\tpackages{\r\n\t\t\tpackageId\r\n    \t\tpackageName\r\n\t\t\tcorrelationId\r\n    \t\tstate\r\n    \t\tpackagesBenefits{\r\n    \t\t\tpackageBenefitId\r\n    \t\t\tcustomerBenefitId{\r\n    \t\t\t\tcustomerBenefitId\r\n\t\t\t\t\tbenefitName\r\n            description\r\n            imageURL\r\n            redirectURL\r\n    \t\t\t\tvendorId\r\n    \t\t\t\tstate\r\n    \t\t\t\tcorrelationId\r\n    \t\t\t}\r\n\t\t\t\tcorrelationId\r\n    \t\t\tstate\r\n    \t\t\t}\r\n\t\t}\r\n\t\tsolicitationPackages{\r\n\t\t\tsolicitationPackageId\r\n    solicitationId\r\n    startFrom\r\n    endDate\r\n    isActive\r\n\tpackages{\r\n    \t\tpackageId\r\n    \t\tpackageName\r\n\t\t\tcorrelationId\r\n    \t\tstate\r\n    \t\tpackagesBenefits{\r\n    \t\t\tpackageBenefitId\r\n    \t\t\tcustomerBenefitId{\r\n    \t\t\t\tcustomerBenefitId\r\n    \t\t\t\tvendorId\r\n    \t\t\t\tstate\r\n    \t\t\t\tcorrelationId\r\n    \t\t\t}\r\n\t\t\t\tcorrelationId\r\n    \t\t\tstate\r\n    \t\t\t}\r\n    \t\t}\r\n\t\t}\r\n    }\r\n}"
+				},
+				"url": {
+					"raw": "http://localhost:8080/api/v1/customersWithoutAuth",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8080",
+					"path": [
+						"api",
+						"v1",
+						"customersWithoutAuth"
+					]
+				}
+			},
+			"response": []
+		},
+		{
+			"name": "Decryption",
+			"protocolProfileBehavior": {
+				"disableBodyPruning": true
+			},
+			"request": {
+				"method": "GET",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json"
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": ""
+				},
+				"url": {
+					"raw": "http://localhost:8080/api/v1/decryption?memberid=fiX6YZYO7js=",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8080",
+					"path": [
+						"api",
+						"v1",
+						"decryption"
+					],
+					"query": [
+						{
+							"key": "memberid",
+							"value": "fiX6YZYO7js="
+						}
+					]
+				}
+			},
+			"response": []
+		},
+		{
+			"name": "Encryption",
+			"protocolProfileBehavior": {
+				"disableBodyPruning": true
+			},
+			"request": {
+				"method": "GET",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json"
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": ""
+				},
+				"url": {
+					"raw": "http://localhost:8080/api/v1/encryption?memberid=565",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8080",
+					"path": [
+						"api",
+						"v1",
+						"encryption"
+					],
+					"query": [
+						{
+							"key": "memberid",
+							"value": "565"
+						}
+					]
+				}
+			},
+			"response": []
+		}
+	],
+	"protocolProfileBehavior": {}
+}
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/.gitignore	(date 1613491889000)
@@ -0,0 +1,305 @@
+*#
+*.iml
+*.ipr
+*.iws
+*.jar
+*.sw?
+*~
+.#*
+.*.md.html
+.DS_Store
+.attach_pid*
+.classpath
+.factorypath
+.gradle
+.idea
+.metadata
+.project
+.recommenders
+.settings
+.springBeans
+/code
+MANIFEST.MF
+_site/
+activemq-data
+bin
+build
+!/**/src/**/bin
+!/**/src/**/build
+build.log
+dependency-reduced-pom.xml
+dump.rdb
+interpolated*.xml
+lib/
+manifest.yml
+out
+overridedb.*
+target
+transaction-logs
+.flattened-pom.xml
+secrets.yml
+.gradletasknamecache
+.sts4-cache
+*.lock
+
+
+
+# Created by https://www.toptal.com/developers/gitignore/api/java,gradle,maven,eclipse,intellij
+# Edit at https://www.toptal.com/developers/gitignore?templates=java,gradle,maven,eclipse,intellij
+
+### Eclipse ###
+.metadata
+bin/
+tmp/
+*.tmp
+*.bak
+*.swp
+*~.nib
+local.properties
+.settings/
+.loadpath
+.recommenders
+
+# External tool builders
+.externalToolBuilders/
+
+# Locally stored "Eclipse launch configurations"
+*.launch
+
+# PyDev specific (Python IDE for Eclipse)
+*.pydevproject
+
+# CDT-specific (C/C++ Development Tooling)
+.cproject
+
+# CDT- autotools
+.autotools
+
+# Java annotation processor (APT)
+.factorypath
+
+# PDT-specific (PHP Development Tools)
+.buildpath
+
+# sbteclipse plugin
+.target
+
+# Tern plugin
+.tern-project
+
+# TeXlipse plugin
+.texlipse
+
+# STS (Spring Tool Suite)
+.springBeans
+
+# Code Recommenders
+.recommenders/
+
+# Annotation Processing
+.apt_generated/
+.apt_generated_test/
+
+# Scala IDE specific (Scala & Java development for Eclipse)
+.cache-main
+.scala_dependencies
+.worksheet
+
+# Uncomment this line if you wish to ignore the project description file.
+# Typically, this file would be tracked if it contains build/dependency configurations:
+#.project
+
+### Eclipse Patch ###
+# Spring Boot Tooling
+.sts4-cache/
+
+### Intellij ###
+# Covers JetBrains IDEs: IntelliJ, RubyMine, PhpStorm, AppCode, PyCharm, CLion, Android Studio, WebStorm and Rider
+# Reference: https://intellij-support.jetbrains.com/hc/en-us/articles/206544839
+
+# User-specific stuff
+.idea/**/workspace.xml
+.idea/**/tasks.xml
+.idea/**/usage.statistics.xml
+.idea/**/dictionaries
+.idea/**/shelf
+
+# Generated files
+.idea/**/contentModel.xml
+
+# Sensitive or high-churn files
+.idea/**/dataSources/
+.idea/**/dataSources.ids
+.idea/**/dataSources.local.xml
+.idea/**/sqlDataSources.xml
+.idea/**/dynamic.xml
+.idea/**/uiDesigner.xml
+.idea/**/dbnavigator.xml
+
+# Gradle
+.idea/**/gradle.xml
+.idea/**/libraries
+
+# Gradle and Maven with auto-import
+# When using Gradle or Maven with auto-import, you should exclude module files,
+# since they will be recreated, and may cause churn.  Uncomment if using
+# auto-import.
+# .idea/artifacts
+# .idea/compiler.xml
+# .idea/jarRepositories.xml
+# .idea/modules.xml
+# .idea/*.iml
+# .idea/modules
+# *.iml
+# *.ipr
+
+# CMake
+cmake-build-*/
+
+# Mongo Explorer plugin
+.idea/**/mongoSettings.xml
+
+# File-based project format
+*.iws
+
+# IntelliJ
+out/
+
+# mpeltonen/sbt-idea plugin
+.idea_modules/
+
+# JIRA plugin
+atlassian-ide-plugin.xml
+
+# Cursive Clojure plugin
+.idea/replstate.xml
+
+# Crashlytics plugin (for Android Studio and IntelliJ)
+com_crashlytics_export_strings.xml
+crashlytics.properties
+crashlytics-build.properties
+fabric.properties
+
+# Editor-based Rest Client
+.idea/httpRequests
+
+# Android studio 3.1+ serialized cache file
+.idea/caches/build_file_checksums.ser
+
+### Intellij Patch ###
+# Comment Reason: https://github.com/joeblau/gitignore.io/issues/186#issuecomment-215987721
+
+# *.iml
+# modules.xml
+# .idea/misc.xml
+# *.ipr
+
+# Sonarlint plugin
+.idea/**/sonarlint/
+
+# SonarQube Plugin
+.idea/**/sonarIssues.xml
+
+# Markdown Navigator plugin
+.idea/**/markdown-navigator.xml
+.idea/**/markdown-navigator-enh.xml
+.idea/**/markdown-navigator/
+
+# Cache file creation bug
+# See https://youtrack.jetbrains.com/issue/JBR-2257
+.idea/$CACHE_FILE$
+
+### Java ###
+# Compiled class file
+*.class
+
+# Log file
+*.log
+
+# BlueJ files
+*.ctxt
+
+# Mobile Tools for Java (J2ME)
+.mtj.tmp/
+
+# Package Files #
+*.jar
+*.war
+*.nar
+*.ear
+*.zip
+*.tar.gz
+*.rar
+
+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
+hs_err_pid*
+
+### Maven ###
+target/
+pom.xml.tag
+pom.xml.releaseBackup
+pom.xml.versionsBackup
+pom.xml.next
+release.properties
+dependency-reduced-pom.xml
+buildNumber.properties
+.mvn/timing.properties
+# https://github.com/takari/maven-wrapper#usage-without-binary-jar
+.mvn/wrapper/maven-wrapper.jar
+
+### Gradle ###
+.gradle
+build/
+
+# Ignore Gradle GUI config
+gradle-app.setting
+
+# Avoid ignoring Gradle wrapper jar file (.jar files are usually ignored)
+!gradle-wrapper.jar
+
+# Cache of project
+.gradletasknamecache
+
+# # Work around https://youtrack.jetbrains.com/issue/IDEA-116898
+# gradle/wrapper/gradle-wrapper.properties
+
+### Gradle Patch ###
+**/build/
+
+# End of https://www.toptal.com/developers/gitignore/api/java,gradle,maven,eclipse,intellij
+
+# built application files
+*.apk
+*.ap_
+
+# files for the dex VM
+*.dex
+
+# Java class files
+*.class
+
+# generated files
+bin/
+gen/
+
+# Local configuration file (sdk path, etc)
+local.properties
+
+# Eclipse project files
+.classpath
+.project
+
+# Proguard folder generated by Eclipse
+proguard/
+
+# Intellij project files
+*.iml
+*.ipr
+*.iws
+.idea/
+
+#Gradle
+.gradletasknamecache
+.gradle/
+build/
+bin/
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/README.md	(date 1613491889000)
@@ -0,0 +1,31 @@
+# customer-events
+
+Customer Events Project
+
+customer events: http://3.15.40.28:8081/
+
+## API List
+| API	| Type	| Url					| Controller|
+| ----	| ---	| --					| ----------|
+| Customer Activate | POST| /v1/customer/activate|  MemberController|
+| web enabled| POST|  /v1/customer/webenabled| CustomerController|
+| Decryption| GET| /api/v1/decryption?memberid=fiX6YZYO7js=| MemberController|
+| Encryption| GET| /api/v1/decryption?memberid=fiX6YZYO7js=| MemberController|
+| Create update Profile| PUT| /v1/customer/104| CustomerController|
+
+## Steps to Run an application
+1. Take the latest copy of the code from the repository
+2. Open project.
+3. build the project using Gradle-><<Project>>->Tasks->build->build.
+4. Once Project get build successfully, press Shift+F10 to run it.
+
+// SQL
+INSERT INTO domain_details (site_id, customer_id, site_code,template_code,site_name)
+VALUES (007, 133, '301','bbss','TestSelva');
+INSERT INTO domain_details (site_id, customer_id, site_code,template_code,site_name)
+VALUES (008, 133, '301','bbss','TestSelva');
+
+select * from domain_details where customer_id = 133
+
+select * from customer_user where email_id='selvaganeshan_s@yahoo.com'
+delete from customer_user where customer_user.last_name = 'Sakthivel'
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1613491889000)
@@ -0,0 +1,6 @@
+#Thu Sep 19 17:17:37 IST 2019
+distributionUrl=https\://services.gradle.org/distributions/gradle-5.6-all.zip
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStorePath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
Index: Customer Event.postman_collection.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Customer Event.postman_collection.json b/Customer Event.postman_collection.json
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/Customer Event.postman_collection.json	(date 1613491889000)
@@ -0,0 +1,119 @@
+{
+	"info": {
+		"_postman_id": "e776d8c0-eb4e-49e2-927b-819870fa87cc",
+		"name": "Customer Event",
+		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
+	},
+	"item": [
+		{
+			"name": "Customer Activate",
+			"request": {
+				"method": "POST",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json"
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\r\n\t\r\n   \"customerUserId\":\"dev.worthy1@gmail.com\",\r\n   \"activationCode\":\"920566\"\r\n}"
+				},
+				"url": {
+					"raw": "http://localhost:8081/v1/customer/activate",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8081",
+					"path": [
+						"v1",
+						"customer",
+						"activate"
+					]
+				}
+			},
+			"response": []
+		},
+		{
+			"name": "web enabled",
+			"request": {
+				"auth": {
+					"type": "noauth"
+				},
+				"method": "POST",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json"
+					},
+					{
+						"key": "Authorization",
+						"value": "Bearer sdfdf",
+						"type": "text",
+						"disabled": true
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\r\n    \"orgDetail\": {\r\n        \"organizationName\":\"Syzgee\",\r\n         \"createdBy\": \"John smith\"\r\n    },\r\n    \"customerDetail\": {\r\n             \"createdBy\": \"John smith\"\r\n    },\r\n    \"userDetail\": {\r\n        \"firstName\": \"Lakshmi\",\r\n        \"lastName\": \"N S\",\r\n        \"emailId\": \"dev.worthy2@gmail.com\",\r\n        \"createdBy\": \"John smith\"\r\n    }\r\n}"
+				},
+				"url": {
+					"raw": "http://localhost:8081/v1/customer/webenabled",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8081",
+					"path": [
+						"v1",
+						"customer",
+						"webenabled"
+					]
+				}
+			},
+			"response": []
+		},
+		{
+			"name": "Create update Profile",
+			"request": {
+				"auth": {
+					"type": "bearer",
+					"bearer": [
+						{
+							"key": "token",
+							"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJuRmhiUXdURTZVNk0wc3lsUHFIWVZiWVV2NTFINHBFbEUtNXp2Nlp6T1VnIn0.eyJqdGkiOiJhMzI3YWZmYS1hMzAwLTQzYTktYWIxNi1lYTA2YWYzOWY1MTYiLCJleHAiOjE1OTUyNDgxODgsIm5iZiI6MCwiaWF0IjoxNTk1MjQyMTg4LCJpc3MiOiJodHRwOi8vZWMyLTE4LTE5MS0xOTktMjM3LnVzLWVhc3QtMi5jb21wdXRlLmFtYXpvbmF3cy5jb206ODA4MC9hdXRoL3JlYWxtcy9tYXN0ZXIiLCJhdWQiOlsiTWF1dGljLXJlYWxtIiwic3plbGxzLXJlYWxtIiwibWFzdGVyLXJlYWxtIiwibWF1dGljLXJlYWxtIiwiYWNjb3VudCJdLCJzdWIiOiJkYTUyZDA3ZC1lODg3LTRiMzgtOWM5NS1lMDhmY2I4ZDliZTQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJzemVsbHMtc2VydmVyIiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiY2Q5YWZiOTAtODllMy00NjFmLWIyNmQtNTYxYzZhMTkxNGU3IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwODAiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImNyZWF0ZS1yZWFsbSIsIm9mZmxpbmVfYWNjZXNzIiwiYWRtaW4iLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7InN6ZWxscy1zZXJ2ZXIiOnsicm9sZXMiOlsidW1hX3Byb3RlY3Rpb24iXX0sIk1hdXRpYy1yZWFsbSI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsImNyZWF0ZS1jbGllbnQiLCJtYW5hZ2UtdXNlcnMiLCJxdWVyeS1yZWFsbXMiLCJ2aWV3LWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktdXNlcnMiLCJtYW5hZ2UtZXZlbnRzIiwibWFuYWdlLXJlYWxtIiwidmlldy1ldmVudHMiLCJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJtYW5hZ2UtY2xpZW50cyIsInF1ZXJ5LWdyb3VwcyJdfSwic3plbGxzLXJlYWxtIjp7InJvbGVzIjpbInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwidmlldy1yZWFsbSIsIm1hbmFnZS1pZGVudGl0eS1wcm92aWRlcnMiLCJpbXBlcnNvbmF0aW9uIiwiY3JlYXRlLWNsaWVudCIsIm1hbmFnZS11c2VycyIsInF1ZXJ5LXJlYWxtcyIsInZpZXctYXV0aG9yaXphdGlvbiIsInF1ZXJ5LWNsaWVudHMiLCJxdWVyeS11c2VycyIsIm1hbmFnZS1ldmVudHMiLCJtYW5hZ2UtcmVhbG0iLCJ2aWV3LWV2ZW50cyIsInZpZXctdXNlcnMiLCJ2aWV3LWNsaWVudHMiLCJtYW5hZ2UtYXV0aG9yaXphdGlvbiIsIm1hbmFnZS1jbGllbnRzIiwicXVlcnktZ3JvdXBzIl19LCJtYXN0ZXItcmVhbG0iOnsicm9sZXMiOlsidmlldy1yZWFsbSIsInZpZXctaWRlbnRpdHktcHJvdmlkZXJzIiwibWFuYWdlLWlkZW50aXR5LXByb3ZpZGVycyIsImltcGVyc29uYXRpb24iLCJjcmVhdGUtY2xpZW50IiwibWFuYWdlLXVzZXJzIiwicXVlcnktcmVhbG1zIiwidmlldy1hdXRob3JpemF0aW9uIiwicXVlcnktY2xpZW50cyIsInF1ZXJ5LXVzZXJzIiwibWFuYWdlLWV2ZW50cyIsIm1hbmFnZS1yZWFsbSIsInZpZXctZXZlbnRzIiwidmlldy11c2VycyIsInZpZXctY2xpZW50cyIsIm1hbmFnZS1hdXRob3JpemF0aW9uIiwibWFuYWdlLWNsaWVudHMiLCJxdWVyeS1ncm91cHMiXX0sIm1hdXRpYy1yZWFsbSI6eyJyb2xlcyI6WyJ2aWV3LWlkZW50aXR5LXByb3ZpZGVycyIsInZpZXctcmVhbG0iLCJtYW5hZ2UtaWRlbnRpdHktcHJvdmlkZXJzIiwiaW1wZXJzb25hdGlvbiIsImNyZWF0ZS1jbGllbnQiLCJtYW5hZ2UtdXNlcnMiLCJxdWVyeS1yZWFsbXMiLCJ2aWV3LWF1dGhvcml6YXRpb24iLCJxdWVyeS1jbGllbnRzIiwicXVlcnktdXNlcnMiLCJtYW5hZ2UtZXZlbnRzIiwibWFuYWdlLXJlYWxtIiwidmlldy1ldmVudHMiLCJ2aWV3LXVzZXJzIiwidmlldy1jbGllbnRzIiwibWFuYWdlLWF1dGhvcml6YXRpb24iLCJtYW5hZ2UtY2xpZW50cyIsInF1ZXJ5LWdyb3VwcyJdfSwiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJwcm9maWxlIGVtYWlsIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJ1c2VyX2lkIjoiZGE1MmQwN2QtZTg4Ny00YjM4LTljOTUtZTA4ZmNiOGQ5YmU0IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiYXJ1bkBnbWFpbC5jb20ifQ.GPIAhuUF_pqcX_W5tUZUVIMblO2Ar7KD6YQPW_TQomcW5TkeMMjXTDo4XfwKRWyhL1rFNv11vXDjUs6SVliOpd1cSLBMDMSCoSoq6REG7p-7dI2YoScwfqxRSU8bgkBMnG0w1g_kA8Hr-V543cUVo8xvvJNMx1e_5LKMnospmFjwFwDODz8Dhy35IXVIsb81HnjztoN4sjVLoTPHNafltleWL6yz9Xcg6-Nd3u1aUAurH1DJjpJBcIBuPcTAxRhA79lAHCf61pg-3inl9hQ1eHuajDZSyek5VLarGfz5IovgY76LWBlFWri_xNEI-GJ-hNKskse8626DjREpxl0shQ",
+							"type": "string"
+						}
+					]
+				},
+				"method": "PUT",
+				"header": [
+					{
+						"key": "Content-Type",
+						"value": "application/json"
+					}
+				],
+				"body": {
+					"mode": "raw",
+					"raw": "{\r\n    \"orgDetail\": {\r\n        \"organizationSize\": \"500+\",\r\n        \"updatedBy\": \"John smith1\"\r\n    },\r\n    \"customerDetail\": {\r\n        \"userId\": \"12345689\",\r\n        \"businessName\": \"sagr jackiea\",\r\n        \"businessEmail\": \"dev.worthy@gmail.com\",\r\n        \"businessType\": \"FLIGHT\",\r\n        \"businessCategory\": \"C2B\",\r\n        \"phoneNo\": \"9980137288\",\r\n        \"currency\": \"345\",\r\n        \"communicationPreferences\": \"sms\",\r\n        \"region\": \"India\",\r\n        \"updatedBy\": \"John smith1\"\r\n    },\r\n    \"custAddressDetail\": \r\n        {\r\n        \"addressLine1\": \"HSR Layout\",\r\n        \"addressLine2\": \"BTM\",\r\n        \"addressLine3\": \"India\",\r\n        \"city\": \"Bangalore\",\r\n        \"sate\": \"karnataka\",\r\n        \"zipCode\": \"571602\",\r\n        \"countryCode\": \"55555\",\r\n        \"createdBy\": \"John smith\"\r\n      }\r\n      ,\r\n    \"tierDetail\": {\r\n        \"tierName\": \"Custom\",\r\n        \"createdBy\": \"John smith\"\r\n    },\r\n    \"benefitDetail\": [\r\n        {\r\n            \"benefitName\": \"events\",\r\n            \"vendorId\": [\r\n                1,\r\n                2\r\n            ],\r\n            \"imageUrl\": \"http://google.com/sfsfs\",\r\n            \"redirectUrl\": \"http://werwerw.com/\",\r\n            \"createdBy\": \"John smith\"\r\n        },\r\n        {\r\n            \"benefitName\": \"travel\",\r\n            \"vendorId\": [\r\n                3,\r\n                1\r\n            ],\r\n            \"imageUrl\": \"http://google.com/werwerw\",\r\n            \"redirectUrl\": \"http://dgdfgd.com/\",\r\n            \"createdBy\": \"John smith\"\r\n        },\r\n        {\r\n            \"benefitName\": \"cashback\",\r\n            \"vendorId\": [\r\n                3,\r\n                1\r\n            ],\r\n            \"imageUrl\": \"http://google.com/cashback\",\r\n            \"redirectUrl\": \"http://dgdfgd.com/\",\r\n            \"createdBy\": \"John smith\"\r\n        },\r\n        {\r\n            \"benefitName\": \"abc\",\r\n            \"vendorId\": [\r\n                3,\r\n                1\r\n            ],\r\n            \"imageUrl\": \"http://google.com/abc\",\r\n            \"redirectUrl\": \"http://dgdfgd.com/\",\r\n            \"createdBy\": \"John smith\"\r\n        },\r\n\t\t{\r\n            \"benefitName\": \"Dining\",\r\n            \"vendorId\": [\r\n                3,\r\n                1\r\n            ],\r\n            \"imageUrl\": \"http://google.com/abc\",\r\n            \"redirectUrl\": \"http://dgdfgd.com/\",\r\n            \"createdBy\": \"John smith\"\r\n        }\r\n    ],\r\n    \"packagesDetail\": [\r\n        {\r\n            \"packageName\": \"Independence Day Package\",\r\n            \"benefits\": [\r\n                {\r\n                    \"benefitName\": \"travel\",\r\n                    \"createdBy\": \"John smith\"\r\n                },\r\n                {\r\n                    \"benefitName\": \"abc\",\r\n                    \"createdBy\": \"John smith\"\r\n                },\r\n                {\r\n                    \"benefitName\": \"events\",\r\n                    \"createdBy\": \"John smith\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"packageName\": \"Republic Day Package\",\r\n            \"benefits\": [\r\n                {\r\n                    \"benefitName\": \"cashback\",\r\n                    \"createdBy\": \"John smith\"\r\n                },\r\n                {\r\n                    \"benefitName\": \"travel\",\r\n                    \"createdBy\": \"John smith\"\r\n                },\r\n                {\r\n                    \"benefitName\": \"Dining\",\r\n                    \"createdBy\": \"John smith\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"solicitationDetail\": [\r\n        {\r\n            \"solicitationName\": \"Winter Campaign\",\r\n            \"solicitationDesc\": \"This Campaign blah blah\",\r\n            \"startDate\": \"2020-11-10\",\r\n            \"endDate\": \"2020-09-14\",\r\n            \"packages\": [\r\n                \"Independence Day Package\"\r\n            ]\r\n        },\r\n        {\r\n            \"solicitationName\": \"Winter Campaign\",\r\n            \"solicitationDesc\": \"This Campaign blah blah\",\r\n            \"startDate\": \"2020-11-10\",\r\n            \"endDate\": \"2020-09-14\",\r\n            \"packages\": [\r\n                \"Independence Day Package\",\r\n                \"Republic Day Package\"\r\n            ]\r\n        }\r\n    ],\r\n    \"domainDetails\": {\r\n        \"siteCode\": \"001\",\r\n        \"templateCode\": \"0022\",\r\n        \"siteName\": \"test\",\r\n        \"siteDesc\": \"wildjasmine sites \",\r\n        \"siteType\": \"Travel\",\r\n        \"domainName\": \"www.wildjasmine.com\",\r\n        \"logo\": \"logo\",\r\n        \"tagline\": \"we think big data\"\r\n    },\r\n    \"customerRule\": {\r\n        \"projectName\": \"Wildjasminess\",\r\n        \"defaultRuleName\": \"syzegee platform rule\"\r\n    },\r\n    \"customerTemplate\": {\r\n        \"customerTemplateId\": \"tp123\"\r\n    }\r\n}"
+				},
+				"url": {
+					"raw": "http://localhost:8081/v1/customer/86",
+					"protocol": "http",
+					"host": [
+						"localhost"
+					],
+					"port": "8081",
+					"path": [
+						"v1",
+						"customer",
+						"86"
+					]
+				}
+			},
+			"response": []
+		}
+	],
+	"protocolProfileBehavior": {}
+}
\ No newline at end of file
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew b/gradlew
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/gradlew	(date 1613491889000)
@@ -0,0 +1,188 @@
+#!/usr/bin/env sh
+
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=$(save "$@")
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+# by default we should be in the correct project dir, but when run from Finder on Mac, the cwd is wrong
+if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
+  cd "$(dirname "$0")"
+fi
+
+exec "$JAVACMD" "$@"
Index: HELP.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/HELP.md b/HELP.md
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/HELP.md	(date 1613491889000)
@@ -0,0 +1,25 @@
+# Getting Started
+
+### Reference Documentation
+For further reference, please consider the following sections:
+
+* [Official Gradle documentation](https://docs.gradle.org)
+* [Spring Boot Actuator](https://docs.spring.io/spring-boot/docs/{bootVersion}/reference/htmlsingle/#production-ready)
+* [Spring Web Starter](https://docs.spring.io/spring-boot/docs/{bootVersion}/reference/htmlsingle/#boot-features-developing-web-applications)
+* [Spring Data JPA](https://docs.spring.io/spring-boot/docs/{bootVersion}/reference/htmlsingle/#boot-features-jpa-and-spring-data)
+* [Spring Boot DevTools](https://docs.spring.io/spring-boot/docs/{bootVersion}/reference/htmlsingle/#using-boot-devtools)
+
+### Guides
+The following guides illustrate how to use some features concretely:
+
+* [Building a RESTful Web Service with Spring Boot Actuator](https://spring.io/guides/gs/actuator-service/)
+* [Building a RESTful Web Service](https://spring.io/guides/gs/rest-service/)
+* [Serving Web Content with Spring MVC](https://spring.io/guides/gs/serving-web-content/)
+* [Building REST services with Spring](https://spring.io/guides/tutorials/bookmarks/)
+* [Accessing Data with JPA](https://spring.io/guides/gs/accessing-data-jpa/)
+
+### Additional Links
+These additional references should also help you:
+
+* [Gradle Build Scans – insights for your project's build](https://scans.gradle.com#gradle)
+
Index: settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/settings.gradle	(date 1613491889000)
@@ -0,0 +1,1 @@
+rootProject.name = 'customer-events'
Index: src/main/java/com/syzegee/customer/events/CustomerEventsApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/CustomerEventsApplication.java b/src/main/java/com/syzegee/customer/events/CustomerEventsApplication.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/CustomerEventsApplication.java	(date 1613491889000)
@@ -0,0 +1,17 @@
+package com.syzegee.customer.events;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+
+
+@SpringBootApplication
+@EnableAutoConfiguration
+public class CustomerEventsApplication {
+
+	public static void main(String[] args) {
+		SpringApplication.run(CustomerEventsApplication.class, args);
+	}
+
+}
Index: src/main/java/com/syzegee/customer/events/util/CrafterTokenUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/CrafterTokenUtil.java b/src/main/java/com/syzegee/customer/events/util/CrafterTokenUtil.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/CrafterTokenUtil.java	(date 1613491889000)
@@ -0,0 +1,25 @@
+package com.syzegee.customer.events.util;
+
+import static com.syzegee.customer.events.constants.Constants.*;
+
+public class CrafterTokenUtil {
+
+    public static String token(String token) {
+         String tokenValue = null;
+
+        if (token != null && token.contains(HEADER_NAME_XSRF_TOKEN)) {
+            int xsrfstartIndex = token.lastIndexOf(XSRF_TOKEN);
+            int xsrfLastIndex = token.lastIndexOf(";");
+            tokenValue = token.substring(11, xsrfLastIndex);
+            System.out.println(" keyString : " + tokenValue);
+        }
+        if (token != null && token.contains(HEADER_NAME_JSESSIONID)) {
+            int jessionstartIndex = token.indexOf(JSESSIONID);
+            int jessionLastIndex = token.indexOf(";");
+            tokenValue = token.substring(11, jessionLastIndex);
+            System.out.println(" Json keyString : " + tokenValue);
+        }
+        return tokenValue;
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/util/MessageProducerConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/MessageProducerConfig.java b/src/main/java/com/syzegee/customer/events/util/MessageProducerConfig.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/MessageProducerConfig.java	(date 1613491889000)
@@ -0,0 +1,50 @@
+package com.syzegee.customer.events.util;
+
+import lombok.extern.slf4j.Slf4j;
+import org.apache.kafka.clients.producer.ProducerConfig;
+import org.apache.kafka.common.serialization.StringSerializer;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.kafka.core.DefaultKafkaProducerFactory;
+import org.springframework.kafka.core.KafkaTemplate;
+import org.springframework.kafka.core.ProducerFactory;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Configuration
+public class MessageProducerConfig {
+
+    @Value("${kafka.bootstrap-servers}")
+    private String bootstrapAddress;
+
+    private static final String ENABLE_AUTO_COMMIT = "enable.auto.commit";
+
+    @Bean
+    public Map<String,Object> producerConfig(){
+        Map<String,Object> configProps=new HashMap<String,Object>();
+        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,bootstrapAddress);
+        configProps.put(ENABLE_AUTO_COMMIT, false);
+        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
+        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
+        return configProps;
+    }
+
+    @Bean
+    public ProducerFactory<String, String> producerFactory(){
+        return new DefaultKafkaProducerFactory<>(producerConfig());
+    }
+
+    @Bean
+    public KafkaTemplate<String, String> kafkaTemplate(){
+
+        return new KafkaTemplate<>(producerFactory());
+    }
+}
+
+
Index: src/main/java/com/syzegee/customer/events/util/DateUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/DateUtil.java b/src/main/java/com/syzegee/customer/events/util/DateUtil.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/DateUtil.java	(date 1613491889000)
@@ -0,0 +1,72 @@
+package com.syzegee.customer.events.util;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.Locale;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class DateUtil {
+
+    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
+    Calendar c = Calendar.getInstance();
+
+    public Date getDateformat(Date dateformat) {
+        Date date = null;
+        try {
+            final String format = sdf.format(dateformat);
+            date = sdf.parse(format);
+            return date;
+        } catch (ParseException ex) {
+            log.error("Error: " + ex);
+        }
+        return date;
+    }
+
+    public Date addDaysToDate(Date startDate, String termValue) {
+        log.info("----------------------Start::addDaysToDate----------------------");
+        Date endDate = null;
+        try {
+            c.setTime(sdf.parse(String.valueOf(startDate)));
+            c.add(Calendar.DAY_OF_MONTH, Integer.valueOf(termValue));
+            String newDate = sdf.format(c.getTime());
+            endDate = sdf.parse(newDate);
+        } catch (ParseException ex) {
+            log.error("Error: " + ex);
+        }
+        log.info("----------------------End::generateAlphanumericOtp----------------------");
+        return endDate;
+    }
+
+    public Date addMonthsToDate(Date startDate, String termValue) {
+        log.info("----------------------Start::addMonthsToDate----------------------");
+        Date endDate = null;
+        try {
+            SimpleDateFormat sdf1 = new SimpleDateFormat("EE MMM dd HH:mm:ss z yyyy", Locale.ENGLISH);
+            c.setTime(sdf1.parse(String.valueOf(startDate)));
+            c.add(Calendar.MONTH, Integer.valueOf(termValue));
+            String newDate = sdf.format(c.getTime());
+            endDate = sdf.parse(newDate);
+        } catch (ParseException ex) {
+            log.error("Error: " + ex);
+        }
+        log.info("----------------------End::addMonthsToDate----------------------");
+        return endDate;
+    }
+
+    public long getDifferenceForCurrentDate(long requestedTime) {
+        Date currentDate = new Date();
+        long currentTimeInMilliseconds = currentDate.getTime();
+        long difference = currentTimeInMilliseconds - requestedTime;
+        return difference;
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/util/ResponseBuilder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/ResponseBuilder.java b/src/main/java/com/syzegee/customer/events/util/ResponseBuilder.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/ResponseBuilder.java	(date 1613491889000)
@@ -0,0 +1,32 @@
+//package com.syzegee.customer.events.util;
+//
+//import com.syzegee.member.events.domain.response.ReturnDetail;
+//import org.json.JSONObject;
+//import org.springframework.stereotype.Component;
+//import com.syzegee.member.events.util.constant.*;
+//
+//import lombok.extern.slf4j.Slf4j;
+//
+//
+
+/**
+ * @author Sagar
+ */
+//@Component
+//@Slf4j
+//public class ResponseBuilder {
+//
+//    public ReturnDetail returnDetail(JSONObject result) {
+//        return ReturnDetail.builder().code(result.getInt(Constants.CODE)).messageDescription(result.getString(Constants.TITLE))
+//                        .messageSource(Constants.MEMBER_MEMBERSHIPSUBCRIPTION).build();
+//    }
+//
+//    public ReturnDetail successReturnDetail(int code, String messageDescription, String messageSource) {
+//        return ReturnDetail.builder().code(code).messageDescription(messageDescription).messageSource(messageSource).build();
+//    }
+//
+//    public ReturnDetail errorReturnDetail(int code, String errorDetails, String messageSource) {
+//        return ReturnDetail.builder().code(code).errorDetails(errorDetails).messageSource(messageSource).build();
+//    }
+//}
+//
Index: src/main/java/com/syzegee/customer/events/util/MessageConsumerConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/MessageConsumerConfig.java b/src/main/java/com/syzegee/customer/events/util/MessageConsumerConfig.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/MessageConsumerConfig.java	(date 1613491889000)
@@ -0,0 +1,56 @@
+package com.syzegee.customer.events.util;
+
+import lombok.extern.slf4j.Slf4j;
+import org.apache.kafka.clients.consumer.ConsumerConfig;
+import org.apache.kafka.common.serialization.StringDeserializer;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.kafka.annotation.EnableKafka;
+import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
+import org.springframework.kafka.core.ConsumerFactory;
+import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
+
+import java.util.HashMap;
+import java.util.Map;
+
+
+@Slf4j
+@Configuration
+@EnableKafka
+public class MessageConsumerConfig {
+
+    @Value("${kafka.bootstrap-servers}")
+    private String bootstrapAddress;
+    @Value("${kafka.consumer_groupId}")
+    private String groupId;
+
+
+    @Bean
+    public Map<String,Object> consumerConfig(){
+        Map<String,Object> consumerProperties=new HashMap<String,Object>();
+        consumerProperties.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
+        consumerProperties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapAddress);
+        consumerProperties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
+        consumerProperties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
+        consumerProperties.put(ConsumerConfig.GROUP_ID_CONFIG,groupId);
+        consumerProperties.put("enable.partition.eof","false");
+        return consumerProperties;
+    }
+
+    @Bean
+    public ConsumerFactory<String, String> consumerFactory(){
+        return new DefaultKafkaConsumerFactory<>(consumerConfig());
+    }
+
+    @Bean
+    public ConcurrentKafkaListenerContainerFactory<String, String> kafkaListenerContainerFactory(){
+        ConcurrentKafkaListenerContainerFactory<String, String> factory=new
+                ConcurrentKafkaListenerContainerFactory<String,String>();
+        factory.setConsumerFactory(consumerFactory());
+        factory.setConcurrency(Integer.parseInt("5"));
+        return factory;
+    }
+
+}
+
Index: src/main/java/com/syzegee/customer/events/util/JsonUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/JsonUtil.java b/src/main/java/com/syzegee/customer/events/util/JsonUtil.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/JsonUtil.java	(date 1613491889000)
@@ -0,0 +1,96 @@
+package com.syzegee.customer.events.util;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.google.gson.Gson;
+import com.syzegee.customer.events.model.*;
+import com.syzegee.customer.events.model.crafter.CustomerSiteEvent;
+import com.syzegee.customer.events.model.crafter.CustomerTemplateEvent;
+import com.syzegee.customer.events.model.ruleengine.CustomerRuleEvent;
+import com.syzegee.customer.events.entity.CustomerInbox;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.stereotype.Component;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class JsonUtil {
+    public JsonNode stringToJsonNode(String value) {
+        try {
+            return new ObjectMapper().readTree(value);
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    public String objectToString(Object value) {
+        try {
+            return new ObjectMapper().writeValueAsString(value);
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    public JsonNode objectToJsonNode(Object object) {
+        return stringToJsonNode(objectToString(object));
+    }
+
+    //get the customer details from inbox and convert to into CustomerCreateDetail domain class
+    public CustomerCreateDetail getCreateDetailfromJson(CustomerInbox customerCreateDetail) {
+        Gson gson = new Gson();
+        CustomerCreateDetail createDetail = gson.fromJson(customerCreateDetail.getDetails(), CustomerCreateDetail.class);
+        return createDetail;
+    }
+
+    //get the customer details from inbox and convert to into CustomerCreateDetail domain class
+    public CustomerSiteUpdateRequest getSiteUpdateDetailfromJson(CustomerInbox customerSiteUpdateDetail) {
+        Gson gson = new Gson();
+        CustomerSiteUpdateRequest siteUpdateDetail = gson.fromJson(customerSiteUpdateDetail.getDetails(), CustomerSiteUpdateRequest.class);
+        return siteUpdateDetail;
+    }
+    //get the CustomerEvent from Listener and convert to into CustomerEvent domain class
+    public CustomerEvent getCustomerEventFromJson(String event) {
+        Gson gson = new Gson();
+        CustomerEvent customerEvent = gson.fromJson(event, CustomerEvent.class);
+        return customerEvent;
+    }
+
+    //get the CustomerRuleEvent from Listener and convert to into CustomerRuleEvent domain class
+    public CustomerRuleEvent getCustomerRuleEventFromJson(String event) {
+        Gson gson = new Gson();
+        CustomerRuleEvent customerRuleEvent = gson.fromJson(event, CustomerRuleEvent.class);
+        return customerRuleEvent;
+    }
+
+    //get the CustomerTemplateEvent from Listener and convert to into CustomerTemplateEvent domain class
+    public CustomerTemplateEvent getCustomerTemplateEventFromJson(String event) {
+        Gson gson = new Gson();
+        CustomerTemplateEvent customerTemplateEvent = gson.fromJson(event, CustomerTemplateEvent.class);
+        return customerTemplateEvent;
+    }
+
+    //get the CustomerTemplateEvent from Listener and convert to into CustomerTemplateEvent domain class
+    public CustomerSiteEvent getCustomerSiteUpdateEventFromJson(String event) {
+        Gson gson = new Gson();
+        CustomerSiteEvent customerSiteUpdateEvent = gson.fromJson(event, CustomerSiteEvent.class);
+        return customerSiteUpdateEvent;
+    }
+    public MarketingAutomationCreationEvent getMarketingAutomationtFromJson(String event) {
+        Gson gson = new Gson();
+        MarketingAutomationCreationEvent marketingAutomationCreationEvent = gson.fromJson(event, MarketingAutomationCreationEvent.class);
+        return marketingAutomationCreationEvent;
+    }
+    public CustomerDomainStatusUpdateEvent getMarketingAutomationtEventCreatedFromJson(String event) {
+        Gson gson = new Gson();
+        CustomerDomainStatusUpdateEvent customerDomainStatusUpdateEvent = gson.fromJson(event, CustomerDomainStatusUpdateEvent.class);
+        return customerDomainStatusUpdateEvent;
+    }
+
+    public CustomerUpdateDetail getCustomerUpdateDetailFromJson(String event) {
+        Gson gson = new Gson();
+        CustomerUpdateDetail customerSiteUpdateEvent = gson.fromJson(event, CustomerUpdateDetail.class);
+        return customerSiteUpdateEvent;
+    }
+}
Index: src/main/java/com/syzegee/customer/events/util/BuilderGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/BuilderGenerator.java b/src/main/java/com/syzegee/customer/events/util/BuilderGenerator.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/BuilderGenerator.java	(date 1613491889000)
@@ -0,0 +1,63 @@
+package com.syzegee.customer.events.util;
+
+import com.syzegee.customer.events.entity.CustomerInbox;
+import com.syzegee.customer.events.entity.CustomerUser;
+import com.syzegee.customer.events.model.CustomerCreateDetail;
+import com.syzegee.customer.events.model.CustomerEvent;
+import com.syzegee.customer.events.model.CustomerResponse;
+import com.syzegee.customer.events.model.MarketingAutomationCreationEvent;
+import com.syzegee.customer.events.model.crafter.CustomerSiteEvent;
+import com.syzegee.customer.events.model.ruleengine.CustomerRuleEvent;
+import org.springframework.stereotype.Component;
+
+import static com.syzegee.customer.events.constants.Constants.*;
+import static com.syzegee.customer.events.constants.Constants.CUSTOMER_SITE_CREATION;
+
+@Component
+public class BuilderGenerator {
+
+
+    public CustomerEvent generateCustomerEvent(CustomerCreateDetail customerCreateDetail,CustomerInbox customerInbox) {
+        return CustomerEvent.builder().state(CUSTOMER_UPDATED)
+                .correlationId(customerInbox.getCorrelationId()).customerRequestId(customerInbox.getCustomerRequestId())
+                .customerId(customerInbox.getCustomerId())
+                .customerDetail(customerCreateDetail.getCustomerDetail())
+                .orgDetail(customerCreateDetail.getOrgDetail())
+                .tierDetail(customerCreateDetail.getTierDetail())
+                .custAddressDetail(customerCreateDetail.getCustAddressDetail())
+                .build();
+    }
+
+    public CustomerResponse generateCustomerResponse(CustomerInbox customerInbox) {
+        return CustomerResponse.builder().customerId(customerInbox.getCustomerId())
+                .correlationId(customerInbox.getCorrelationId())
+                .customerRequestId(customerInbox.getCustomerRequestId())
+                .message("Customer create request has been received and you will be receiving an Email ").build();
+    }
+
+    public CustomerRuleEvent generateCustomerRuleEvent(CustomerInbox customerInbox) {
+        return CustomerRuleEvent.builder().state(CUSTOMER_RULE_CREATED)
+                .projectId(001L)
+                .correlationId(customerInbox.getCorrelationId()).customerRequestId(customerInbox.getCustomerRequestId())
+                .customerId(customerInbox.getCustomerId()).build();
+    }
+
+    public MarketingAutomationCreationEvent generateMarketingAutomationEvent(CustomerCreateDetail customerCreateDetail, CustomerUser customerUser) {
+        return MarketingAutomationCreationEvent.builder().state(MARKETING_AUTOMATION)
+                .customerEmail(customerCreateDetail.getCustomerDetail().getCustomerUserEmailId())
+                .customerOrganizationName(customerCreateDetail.getOrgDetail().getOrganizationName())
+                .customerId(customerCreateDetail.getCustomerDetail().getUserId())
+                .customerFirstName(customerUser.getFirstName())
+                .customerLastName(customerUser.getLastName())
+                .customerId(customerCreateDetail.getCustomerDetail().getCustomerId()).build();
+    }
+
+    public CustomerSiteEvent generateCustomerSiteEvent(CustomerCreateDetail customerCreateDetail, CustomerInbox customerInbox) {
+        return CustomerSiteEvent.builder().state(CUSTOMER_SITE_CREATION)
+                .benefitDetailsList(customerCreateDetail.getBenefitDetail())
+             //   .customerTemplateId(customerCreateDetail.getCustomerTemplate().getCustomerTemplateId())
+                .correlationId(customerInbox.getCorrelationId()).customerRequestId(customerInbox.getCustomerRequestId())
+                .customerId(customerInbox.getCustomerId()).build();
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/util/ActivationTemplate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/ActivationTemplate.java b/src/main/java/com/syzegee/customer/events/util/ActivationTemplate.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/ActivationTemplate.java	(date 1613491889000)
@@ -0,0 +1,121 @@
+package com.syzegee.customer.events.util;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class ActivationTemplate {
+    @Value("${mail.activationLink}")
+    private String activationLink;
+
+    public String createActivationTemplate(String email,String activationCode) {
+        log.info("Initiate createActivationTemplate in ActivationTemplate");
+        String template = "<!DOCTYPE html>\n"
+                + "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
+                + "<head>\n"
+                + "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n"
+                + "<!--[if !mso]><!-->\n"
+                + "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n"
+                + "<!--<![endif]-->\n"
+                + "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n"
+                + "<title>Welcome Customer</title>\n"
+                + "<style type=\"text/css\">\n"
+                + "body {\n"
+                + "-webkit-text-size-adjust: 100%;\n"
+                + "-ms-text-size-adjust: 100%;\n"
+                + "margin: 0;\n"
+                + "padding: 0;\n"
+                + "font-family: \"Roboto\", sans-serif !important;\n"
+                + "}\n"
+                + ".wrapper {\n"
+                + "width: 100%;\n"
+                + "table-layout: fixed;\n"
+                + "-webkit-text-size-adjust: 100%;\n"
+                + "-ms-text-size-adjust: 100%;\n"
+                + "}\n"
+                + ".outer {\n"
+                + "width: 100%;\n"
+                + "}\n"
+                + "@media only screen and (max-width: 480px) {\n"
+                + "@-ms-viewport {\n"
+                + "width: 320px;\n"
+                + "}\n"
+                + "@viewport {\n"
+                + "width: 320px;\n"
+                + "}\n"
+                + "}\n"
+                + "@media screen and (min-width: 481px) {\n"
+                + ".container {\n"
+                + "width: 600px !important;\n"
+                + "}\n"
+                + "}\n"
+                + "@import url(\"https://fonts.googleapis.com/css?family=Roboto&display=swap\");\n"
+                + "</style>\n"
+                + "</head>\n"
+                + "\n"
+                + "<body style=\"background:#F5F5F5;\">\n"
+                + "<center class=\"wrapper\">\n"
+                + "<table\n"
+                + "class=\"outer\"\n"
+                + "align=\"left\"\n"
+                + "width=\"100%\"\n"
+                + "bgcolor=\"#F5F5F5\"\n"
+                + "cellpadding=\"0\"\n"
+                + "cellspacing=\"0\"\n"
+                + "border=\"0\"\n"
+                + ">\n"
+                + "<tr>\n"
+                + "<td style=\"padding: 120px 85px;\">\n"
+                + "<p>\n"
+                + "Hi <span style=\"color:#11a9dc\">" + email + "</span>,\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "We've received your request for a single-use code to active your\n"
+                + "Syzegee account.\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "Your single-use code is:\n"
+                + "<span style=\"font-weight: 600\">" + activationCode + "</span>\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "And\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "Click here for complete your\n"
+                + "<a style=\"color:#11a9dc\" href=" + activationLink + ">signup</a> process\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "Or\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "Copy the below link and paste in your browser address bar\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "<span  style=\"color:#11a9dc\"\n"
+                + "><a style=\"color:#11a9dc\" href=\"" + activationLink + "\">" + activationLink + "</a></span\n"
+                + ">\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "Thanks,\n"
+                + "<br />\n"
+                + "The Syzegee team\n"
+                + "</p>\n"
+                + "</td>\n"
+                + "</tr>\n"
+                + "</table>\n"
+                + "</center>\n"
+                + "</body>\n"
+                + "</html>";
+        log.info("End of createActivationTemplate in ActivationTemplate");
+        return template;
+    }
+}
Index: src/main/java/com/syzegee/customer/events/util/CommunicationConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/CommunicationConfig.java b/src/main/java/com/syzegee/customer/events/util/CommunicationConfig.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/CommunicationConfig.java	(date 1613491889000)
@@ -0,0 +1,68 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.util;
+
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+
+import com.syzegee.customer.events.exception.CustomerRuntimeException;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Component;
+
+import javax.mail.*;
+import javax.mail.internet.InternetAddress;
+import javax.mail.internet.MimeMessage;
+import javax.mail.internet.MimeMultipart;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class CommunicationConfig {
+
+    public boolean emailTemplateInfo(String template,String email) {
+        log.info("Initiate emailTemplateConfig in CommunicationConfig");
+        boolean isSuccess = false;
+        Properties props = new Properties();
+        String senderEmail = "girishathanikar54@gmail.com";
+        String senderPassword = "7259667143$$##";
+        try {
+            InputStream is = CommunicationConfig.class.getResourceAsStream("/mail_settings.properties");
+            props.load(is);
+            Session session = Session.getInstance(props, new javax.mail.Authenticator() {
+                @Override
+                protected PasswordAuthentication getPasswordAuthentication() {
+                    return new PasswordAuthentication(senderEmail, senderPassword);
+                }
+            });
+            Message message = new MimeMessage(session);
+            message.setFrom(new InternetAddress(senderEmail));//provider defalut account
+            message.setRecipients(Message.RecipientType.TO,
+                    InternetAddress.parse(email)); //To reciever mail id
+            message.setSubject("Welcome to Szells Platform");
+            message.setContent(template, "text/html; charset=utf-8");
+            Multipart multipart = new MimeMultipart(template);
+            Transport.send(message);
+            isSuccess = true;
+        } catch (MessagingException | IOException e) {
+            log.info("error in sending email ");
+            log.error("stack trace>>  ",e);
+
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "Exception while sending email");
+        }
+        log.info("end of emailTemplateConfig CommunicationConfig");
+        return isSuccess;
+    }
+}
Index: src/main/java/com/syzegee/customer/events/util/CorrelationIdUtil.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/CorrelationIdUtil.java b/src/main/java/com/syzegee/customer/events/util/CorrelationIdUtil.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/CorrelationIdUtil.java	(date 1613491889000)
@@ -0,0 +1,58 @@
+package com.syzegee.customer.events.util;
+
+import com.syzegee.customer.events.exception.CustomerServiceException;
+import org.apache.commons.lang3.RandomStringUtils;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Component;
+
+import java.util.UUID;
+import java.util.regex.Pattern;
+
+
+/**
+ * @author Sagar
+ */
+@Component
+public class CorrelationIdUtil {
+
+
+    public static String generateCorrelationId() {
+        String correlationId = UUID.randomUUID().toString();
+        return correlationId;
+    }
+    
+    public static String generateActivationCode(String correlationId) {
+	    String activationCode = RandomStringUtils.randomNumeric(6);
+        return activationCode;
+    }
+    
+    
+
+    public static String generateCorrelationId(String uuid) throws CustomerServiceException {
+        try {
+            if (uuid.isEmpty()) {
+                return generateCorrelationId();
+            } else {
+                if (!isUUID(uuid)) {
+                    throw new CustomerServiceException(HttpStatus.BAD_REQUEST,HttpStatus.BAD_REQUEST.value(), "correlationId must be valid UUID format");
+                }
+            }
+        } catch (Exception e) {
+			throw new CustomerServiceException(HttpStatus.BAD_REQUEST,HttpStatus.BAD_REQUEST.value(), "correlationId must be valid UUID format");
+        }
+        return uuid;
+    }
+
+    static final Pattern UUIDs = Pattern
+            .compile("(?i)^[0-9a-z]{8}-?[0-9a-z]{4}-?[0-9a-z]{4}-?[0-9a-z]{4}-?[0-9a-z]{12}$");
+
+    public static boolean isUUID(String string) {
+        try {
+            return UUIDs.matcher(string).matches();
+        } catch (Exception ex) {
+            return false;
+        }
+    }
+    
+
+}
Index: src/main/java/com/syzegee/customer/events/util/SiteInviteTemplate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/SiteInviteTemplate.java b/src/main/java/com/syzegee/customer/events/util/SiteInviteTemplate.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/SiteInviteTemplate.java	(date 1613491889000)
@@ -0,0 +1,116 @@
+package com.syzegee.customer.events.util;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class SiteInviteTemplate {
+    @Value("${mail.siteInviteLink}")
+    private String siteInviteLink;
+
+    public String createSiteInviteTemplate(String email) {
+        log.info("Initiate createSiteInviteTemplate in ActivationTemplate");
+        String template = "<!DOCTYPE html>\n"
+                + "<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
+                + "<head>\n"
+                + "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n"
+                + "<!--[if !mso]><!-->\n"
+                + "<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n"
+                + "<!--<![endif]-->\n"
+                + "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n"
+                + "<title>Welcome Customer</title>\n"
+                + "<style type=\"text/css\">\n"
+                + "body {\n"
+                + "-webkit-text-size-adjust: 100%;\n"
+                + "-ms-text-size-adjust: 100%;\n"
+                + "margin: 0;\n"
+                + "padding: 0;\n"
+                + "font-family: \"Roboto\", sans-serif !important;\n"
+                + "}\n"
+                + ".wrapper {\n"
+                + "width: 100%;\n"
+                + "table-layout: fixed;\n"
+                + "-webkit-text-size-adjust: 100%;\n"
+                + "-ms-text-size-adjust: 100%;\n"
+                + "}\n"
+                + ".outer {\n"
+                + "width: 100%;\n"
+                + "}\n"
+                + "@media only screen and (max-width: 480px) {\n"
+                + "@-ms-viewport {\n"
+                + "width: 320px;\n"
+                + "}\n"
+                + "@viewport {\n"
+                + "width: 320px;\n"
+                + "}\n"
+                + "}\n"
+                + "@media screen and (min-width: 481px) {\n"
+                + ".container {\n"
+                + "width: 600px !important;\n"
+                + "}\n"
+                + "}\n"
+                + "@import url(\"https://fonts.googleapis.com/css?family=Roboto&display=swap\");\n"
+                + "</style>\n"
+                + "</head>\n"
+                + "\n"
+                + "<body style=\"background:#F5F5F5;\">\n"
+                + "<center class=\"wrapper\">\n"
+                + "<table\n"
+                + "class=\"outer\"\n"
+                + "align=\"left\"\n"
+                + "width=\"100%\"\n"
+                + "bgcolor=\"#F5F5F5\"\n"
+                + "cellpadding=\"0\"\n"
+                + "cellspacing=\"0\"\n"
+                + "border=\"0\"\n"
+                + ">\n"
+                + "<tr>\n"
+                + "<td style=\"padding: 120px 85px;\">\n"
+                + "<p>\n"
+                + "Hi <span style=\"color:#11a9dc\">" + email + "</span>,\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "Your site has been created for \n"
+                + "Syzegee account.\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "And\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "Click here to view your site \n"
+                + "<a style=\"color:#11a9dc\" href=" + siteInviteLink + ">craftersite</a> \n"
+                + "<br />\n"
+                + "<br />\n"
+                + "Or\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "Copy the below link and paste in your browser address bar\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "<span style=\"color:#11a9dc\"\n"
+                + ">" + siteInviteLink + "</span\n"
+                + ">\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "<br />\n"
+                + "Thanks,\n"
+                + "<br />\n"
+                + "The Syzegee team\n"
+                + "</p>\n"
+                + "</td>\n"
+                + "</tr>\n"
+                + "</table>\n"
+                + "</center>\n"
+                + "</body>\n"
+                + "</html>";
+        log.info("End of createSiteInviteTemplate in ActivationTemplate");
+        return template;
+    }
+}
Index: src/main/java/com/syzegee/customer/events/util/MailSender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/MailSender.java b/src/main/java/com/syzegee/customer/events/util/MailSender.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/MailSender.java	(date 1613491889000)
@@ -0,0 +1,78 @@
+package com.syzegee.customer.events.util;
+
+import com.syzegee.customer.events.exception.CustomerServiceException;
+import com.syzegee.customer.events.exception.GenericException;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Component;
+
+import javax.mail.Message;
+import javax.mail.MessagingException;
+import javax.mail.Session;
+import javax.mail.Transport;
+import javax.mail.internet.InternetAddress;
+import javax.mail.internet.MimeMessage;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Properties;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class MailSender {
+
+    @Value("${mail.from}")
+    private String from;
+    @Value("${mail.fromName}")
+    private String fromName;
+    @Value("${mail.host}")
+    private String host;
+    @Value("${mail.smtpUsername}")
+    private String smtpUsername;
+    @Value("${mail.smtpPassword}")
+    private String smtpPassword;
+    @Value("${mail.port}")
+    private int port;
+    @Value("${mail.subject}")
+    private String subject;
+
+    public boolean emailTemplateInfo(String template, String email) throws IOException {
+        log.info("Initiate emailTemplateConfig in CommunicationConfig");
+        boolean isSuccess = false;
+        Properties props = new Properties();
+
+        try {
+            InputStream is = MailSender.class.getResourceAsStream("/mail_settings.properties");
+            props.load(is);
+            // Create a Session object to represent a mail session with the specified properties.
+            Session session = Session.getDefaultInstance(props);
+            // Create a message with the specified information.
+            MimeMessage msg = new MimeMessage(session);
+            msg.setFrom(new InternetAddress(from, fromName));
+            msg.setRecipient(Message.RecipientType.TO, new InternetAddress(email));
+            msg.setSubject(subject);
+            msg.setContent(template, "text/html; charset=utf-8");
+
+            // Create a transport.
+            Transport transport = session.getTransport();
+            // Connect to Amazon SES using the SMTP username and password you specified above.
+            transport.connect(host, smtpUsername, smtpPassword);
+
+            // Send the email.
+            transport.sendMessage(msg, msg.getAllRecipients());
+            isSuccess = true;
+            log.info("Email sent!");
+        } catch (MessagingException | IOException e) {
+            log.info("error in sending email ");
+            log.error("stack trace>>  ", e);
+           
+			throw new CustomerServiceException(HttpStatus.BAD_REQUEST,HttpStatus.BAD_REQUEST.value(),"Exception while sending email : Email Id is not validated");
+        }
+        log.info("end of emailTemplateConfig CommunicationConfig");
+        return isSuccess;
+    }
+}
+
Index: src/main/java/com/syzegee/customer/events/model/ActivationValidateResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/ActivationValidateResponse.java b/src/main/java/com/syzegee/customer/events/model/ActivationValidateResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/ActivationValidateResponse.java	(date 1613491889000)
@@ -0,0 +1,21 @@
+package com.syzegee.customer.events.model;
+
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class ActivationValidateResponse {
+
+    private Boolean status;
+    private Long customerId;
+}
Index: src/main/java/com/syzegee/customer/events/enums/CustomerStatusEnum.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/enums/CustomerStatusEnum.java b/src/main/java/com/syzegee/customer/events/enums/CustomerStatusEnum.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/enums/CustomerStatusEnum.java	(date 1613491889000)
@@ -0,0 +1,40 @@
+package com.syzegee.customer.events.enums;
+
+import com.syzegee.customer.events.entity.CustomerStatus;
+
+public enum CustomerStatusEnum implements ICustomerStatus<CustomerStatus>{
+    UPDATE_CUSTOMER_STATUS((x)->{
+        CustomerStatus customerStatus=(CustomerStatus) x;
+        customerStatus.setCmsSiteUpdateStatus(true);
+        customerStatus.setOnBoardStatus(true);
+     //   customerStatus.setMarketingAutomationStatus(true);
+        return customerStatus;
+    }),
+    UPDATE_CMS_SITE_STATUS((x)->{
+        CustomerStatus customerStatus=(CustomerStatus) x;
+        customerStatus.setCmsSiteUpdateStatus(true);
+        return customerStatus;
+    }),
+    UPDATE_ONBOARD_STATUS((x)->{
+        CustomerStatus customerStatus=(CustomerStatus) x;
+        customerStatus.setOnBoardStatus(true);
+        return customerStatus;
+    }),
+    UPDATE_MARKETING_AUTOMATION_STATUS((x)->{
+        CustomerStatus customerStatus=(CustomerStatus) x;
+        customerStatus.setMarketingAutomationStatus(true);
+        return customerStatus;
+    });
+
+
+    private ICustomerStatus<CustomerStatus> iCustomerStatus;
+
+    CustomerStatusEnum(ICustomerStatus iCustomerStatus) {
+        this.iCustomerStatus = iCustomerStatus;
+    }
+
+    @Override
+    public CustomerStatus updateStatus(CustomerStatus x) {
+        return iCustomerStatus.updateStatus(x);
+    }
+}
Index: src/main/java/com/syzegee/customer/events/enums/ICustomerStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/enums/ICustomerStatus.java b/src/main/java/com/syzegee/customer/events/enums/ICustomerStatus.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/enums/ICustomerStatus.java	(date 1613491889000)
@@ -0,0 +1,8 @@
+package com.syzegee.customer.events.enums;
+
+import com.syzegee.customer.events.entity.CustomerStatus;
+
+@FunctionalInterface
+public interface ICustomerStatus<T> {
+    T updateStatus(T x);
+}
Index: src/main/java/com/syzegee/customer/events/util/CrafterXmlConverter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/util/CrafterXmlConverter.java b/src/main/java/com/syzegee/customer/events/util/CrafterXmlConverter.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/util/CrafterXmlConverter.java	(date 1613491889000)
@@ -0,0 +1,113 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.util;
+
+
+import com.syzegee.customer.events.model.crafter.Features;
+import com.syzegee.customer.events.model.crafter.Item;
+import com.syzegee.customer.events.model.crafter.Page;
+
+import javax.xml.bind.JAXBContext;
+import javax.xml.bind.JAXBException;
+import javax.xml.bind.Marshaller;
+import java.io.StringWriter;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * @author Sagar
+ */
+public class CrafterXmlConverter {
+
+    public String xmlPayload(Item[] items,String email,String logo) throws JAXBException {
+        Features feature = Features.builder().item(items).build();
+        Page page = Page.builder().content_type("/page/entry")
+                .placeInNav("false")
+                .display_template("/templates/web/entry.ftl")
+                .merge_strategy("inherit-levels")
+                .file_name("index.xml")
+                .internal_name("Home example")
+                .orderDefault_f("-1").header("<span>Next Level</span>")
+                .content("<span>Digital Concierge Service</span>")
+                .description("<span>Accelerate and personalize content delivery with Syzegee.</span>")
+                .objectGroupId("8d7f")
+                .objectId("8d7f21fa-5e09-00aa-8340-853b7db302da")
+                .folder_name("")
+                .createdDate("2017-1-31T16:18:14.000Z")
+                .createdDate_dt("2017-1-31T16:18:14.000Z")
+                .lastModifiedDate("2017-12-22T21:49:29.275Z")
+                .lastModifiedDate_dt("2017-12-22T21:49:29.275Z")
+                .menu_bar_link_1("Admin")
+                .menu_bar_link_2("News")
+                .menu_bar_link_3("Client Login")
+                .menu_bar_link_4("Contact Us")
+                .menu_bar_link_5("Careers")
+                .logo_image("/static-assets/image/"+logo)
+                .hero_title(" Create movements of value that drive people closer to your brand.")
+                .hero_text(" Digital promotions and loyalty solutions for the world best brand")
+                .generation_card_title("Generation Z eBook")
+                .generation_card_text("Apply storyliving phygital, and gamification tactics to\n"
+                + " reach this group as it grows its influence and purchasing\n"
+                + "                    power.")
+                .generation_card_image("/static-assets/image/six-ways.jpg")
+                .generation_title_1("Merkle/HelloWorld named a stromg performer in both Loyalty\n"
+                + "                      Services &amp; Technology")
+                .generation_text_1(" Download a complimentary copy of the Forrester\n"
+                + "                      Wave<sup>TM</sup> : Loyalty Service Provider, Q3 2019.")
+                .generation_title_2("2019 Loyalty Barometer Report")
+                .generation_text_2("Did you know 54% of consumers want swifter reward\n"
+                + "                      redemption? Get exclusive insights on what consumers\n"
+                + "                      really want.")
+                .generation_title_3("Report:Nine Insights for a Solid Prizing strategy")
+                .generation_text_3(" Updated research reveals 64% of consumers preferences when\n"
+                + "                      its comes to being rewarded by brands")
+                .royal_title("Royal Caribbean International")
+                .royal_text("Engagement Hub To Reward Exploration")
+                .anheuser_title("Anheuser-Busch InBev")
+                .anheuser_text("Trade Marketing Promotions House")
+                .carousel_title(email)
+                .carousel_image_1("/static-assets/image/carousel-01.jpg")
+                .carousel_image_2("/static-assets/image/carousel-02.jpg")
+                .carousel_image_3("/static-assets/image/carousel-03.jpg")
+                .carousel_image_4("/static-assets/image/carousel-04.jpg")
+                .features(feature)
+                .copyright_text("&#169;2019, Syzegee - All Rights Reserved")
+                .copyright_link_1("Privacy policy")
+                .copyright_link_2("Mobile Terms &amp; Conditions")
+                .copyright_link_3("Site map")
+                .disabled("false").build();
+
+        JAXBContext context = JAXBContext.newInstance(Page.class);
+        Marshaller marshaller = context.createMarshaller();
+        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
+
+        StringWriter ss = new StringWriter();
+        marshaller.marshal(page, ss);
+
+        return ss.toString();
+    }
+
+    public String setFeatures(List<String> binifitName,String email,String logo) throws JAXBException {
+        List<Item> binifits = new ArrayList<>();
+
+        for (String benefit : binifitName) {
+            Item itemOne = new Item();
+            itemOne.setKey("/site/components/features/" + benefit.toLowerCase() + ".xml");
+            itemOne.setValue(benefit.toUpperCase());
+            itemOne.setInclude("/site/components/features/" + benefit.toLowerCase() + ".xml");
+            itemOne.setDisableFlattening("false");
+            binifits.add(itemOne);
+        }
+        Object[] toArray = binifits.toArray();
+        Item[] items = new Item[toArray.length];
+
+        for (int i = 0; i < toArray.length; i++) {
+            items[i] = (Item) toArray[i];
+        }
+        return xmlPayload(items,email,logo);
+
+    }
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerDomainStatusUpdateEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerDomainStatusUpdateEvent.java b/src/main/java/com/syzegee/customer/events/model/CustomerDomainStatusUpdateEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerDomainStatusUpdateEvent.java	(date 1613491889000)
@@ -0,0 +1,32 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerDomainStatusUpdateEvent {
+        private String customerUserName;
+        private String customerEmail;
+        private String customerOrganizationName;
+        private Long customerId;
+        private String customerFirstName;
+        private String customerLastName;
+        private String state;
+        private String correlationId;
+        private String siteName;
+        private String siteType;
+        private String domainName;
+        private String templateCode;
+        private Date createdDate;
+        private String createdBy;
+        private String updatedBy;
+        private Date updatedDate;
+        private boolean active;
+ }
Index: src/main/java/com/syzegee/customer/events/model/CustomerSiteUpdateRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerSiteUpdateRequest.java b/src/main/java/com/syzegee/customer/events/model/CustomerSiteUpdateRequest.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerSiteUpdateRequest.java	(date 1613491889000)
@@ -0,0 +1,21 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.Tolerate;
+
+import java.util.List;
+
+@Data
+@Builder
+@AllArgsConstructor
+public class CustomerSiteUpdateRequest {
+    private CustomerDetail customerDetail;
+    private List<BenefitDetail> benefitDetail;
+    @Tolerate
+    public CustomerSiteUpdateRequest() {
+
+    }
+}
Index: src/main/java/com/syzegee/customer/events/model/BenefitDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/BenefitDetail.java b/src/main/java/com/syzegee/customer/events/model/BenefitDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/BenefitDetail.java	(date 1613491889000)
@@ -0,0 +1,39 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+import java.util.List;
+
+
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class BenefitDetail {
+
+    private Long id;
+    private Long customerId;
+    private List<Long> vendorId;
+    private String state;
+    private String benefitName;
+    private boolean active;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+    private String imageUrl;
+    private String redirectUrl;
+    private String description;
+    private boolean newlyAdded;
+    private boolean deleted;
+
+    private CustomerDomainDetails domainDetails;
+
+    public BenefitDetail(Long id, String benefitName) {
+    }
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerDetail.java b/src/main/java/com/syzegee/customer/events/model/CustomerDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerDetail.java	(date 1613491889000)
@@ -0,0 +1,47 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerDetail {
+    
+    private Long customerId;
+    private Long organizationId;
+    private Long userId;
+    private String businessName;
+    private String businessEmail;
+    private String businessCategory;
+    private String businessType;
+    private String customerUserEmailId;
+    private String currency;
+    private String region;
+    private String phoneNo;
+    private boolean isActive;
+    private boolean activationStatus;
+    private boolean activationCode;
+    private String state;
+    private Date createdDate;
+    private String createdBy;
+    private Date updatedDate;
+    private String updatedBy;
+    private String communicationPreferences;
+
+}
\ No newline at end of file
Index: src/main/java/com/syzegee/customer/events/model/CustomerUserRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerUserRequest.java b/src/main/java/com/syzegee/customer/events/model/CustomerUserRequest.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerUserRequest.java	(date 1613491889000)
@@ -0,0 +1,30 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+import java.util.List;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerUserRequest {
+
+    private String correlationId;
+    private Date createdDate;
+    private String firstName;
+    private String lastName;
+    private String emailId;
+    private Boolean isActive;
+    private String createdBy;
+    private String updatedBy;
+    private Date updatedDate;
+    private List<CustomerUserRoleRequest> roles;
+
+
+
+}
Index: src/main/java/com/syzegee/customer/events/model/SolicitationPackageResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/SolicitationPackageResponse.java b/src/main/java/com/syzegee/customer/events/model/SolicitationPackageResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/SolicitationPackageResponse.java	(date 1613491889000)
@@ -0,0 +1,27 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class SolicitationPackageResponse {
+
+	private Integer solicitationId;
+	private Integer customerId;
+	private Integer packageId;
+	private Date startForm;
+	private Date endDate;
+	private boolean isActive;
+	private String createdBy;
+	private Date createdAt;
+	private String updatedBy;
+	private Date updatedAt;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerCreateDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerCreateDetail.java b/src/main/java/com/syzegee/customer/events/model/CustomerCreateDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerCreateDetail.java	(date 1613491889000)
@@ -0,0 +1,35 @@
+package com.syzegee.customer.events.model;
+
+import com.syzegee.customer.events.model.crafter.CustomerTemplate;
+import com.syzegee.customer.events.model.ruleengine.CustomerRule;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+
+import java.util.List;
+
+/**
+ * @author Sagar
+ */
+@Data
+@Builder
+@AllArgsConstructor
+public class CustomerCreateDetail {
+    private OrganizationDetail orgDetail;
+    private CustomerDetail customerDetail;
+    private CustomerAddressDetail custAddressDetail;
+    private TierDetail tierDetail;
+    private List<BenefitDetail> benefitDetail;
+    private List<PackagesDetail> packagesDetail;
+    private CustomerDomainDetails domainDetails;
+    private CustomerRule customerRule;
+    private CustomerTemplate customerTemplate;
+    private List<SolicitationDetail> solicitationDetail;
+
+    @Tolerate
+    public CustomerCreateDetail() {
+
+    }
+}
Index: src/main/java/com/syzegee/customer/events/model/CreateUpdateCustomerRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CreateUpdateCustomerRequest.java b/src/main/java/com/syzegee/customer/events/model/CreateUpdateCustomerRequest.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CreateUpdateCustomerRequest.java	(date 1613491889000)
@@ -0,0 +1,16 @@
+package com.syzegee.customer.events.model;
+
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class CreateUpdateCustomerRequest {
+	    private Long customerId;
+	    private Long userId;
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerResponse.java b/src/main/java/com/syzegee/customer/events/model/CustomerResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerResponse.java	(date 1613491889000)
@@ -0,0 +1,32 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+/**
+ *
+ * @author Sagar
+ */
+@Data
+@Builder
+@AllArgsConstructor
+public class CustomerResponse {
+
+    private Long customerId;
+    private String correlationId;
+    private String message;
+    private String customerRequestId;
+    
+    
+
+    @Tolerate
+    public CustomerResponse(){}
+    
+    @Override
+    public String toString() {
+    	
+    	return "{"+"customerId="+customerId+",message="+message+",correlationId="+correlationId+",customerRequestId="+customerRequestId+"}";
+    }
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerUserResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerUserResponse.java b/src/main/java/com/syzegee/customer/events/model/CustomerUserResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerUserResponse.java	(date 1613491889000)
@@ -0,0 +1,26 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+import java.util.List;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerUserResponse {
+
+    private String correlationId;
+    private Date createdDate;
+    private String emailId;
+    private Boolean isActive;
+    private String createdBy;
+    private List<CustomerUserRoleResponse> roles;
+
+
+
+}
Index: src/main/java/com/syzegee/customer/events/model/LocationDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/LocationDetail.java b/src/main/java/com/syzegee/customer/events/model/LocationDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/LocationDetail.java	(date 1613491889000)
@@ -0,0 +1,28 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class LocationDetail {
+
+    private Long locationId;
+    private long accountId;
+    private String locationName;
+    private Boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+}
Index: src/main/java/com/syzegee/customer/events/model/TierDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/TierDetail.java b/src/main/java/com/syzegee/customer/events/model/TierDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/TierDetail.java	(date 1613491889000)
@@ -0,0 +1,28 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class TierDetail {
+
+    private Long id;
+    private Long customerId;
+    private String tierName;
+    private boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerActivationDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerActivationDetails.java b/src/main/java/com/syzegee/customer/events/model/CustomerActivationDetails.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerActivationDetails.java	(date 1613491889000)
@@ -0,0 +1,20 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerActivationDetails {
+    private CustomerDetail customerDetail;
+    private OrganizationDetail orgDetail;
+    private CustomerUserDetail userDetail;
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerDomainDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerDomainDetails.java b/src/main/java/com/syzegee/customer/events/model/CustomerDomainDetails.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerDomainDetails.java	(date 1613491889000)
@@ -0,0 +1,34 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * @author Sagar
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerDomainDetails {
+    private Long siteId;
+    private Long customerId;
+    private String siteCode;
+    private String templateCode;
+    private String siteName;
+    private String siteDesc;
+    private String siteType;
+    private String domainName;
+    private String logo;
+    private String tagline;
+    private boolean isActive;
+    private String correlationId;
+    private String state;
+    private String createdBy;
+    private String createdDate;
+    private String updatedBy;
+    private String updatedDate;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerEvent.java b/src/main/java/com/syzegee/customer/events/model/CustomerEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerEvent.java	(date 1613491889000)
@@ -0,0 +1,23 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerEvent {
+
+    private Long customerId;
+    private String state;
+    private String correlationId;
+    private String customerRequestId;
+    private CustomerDetail customerDetail;
+    private CustomerAddressDetail custAddressDetail;
+    private OrganizationDetail orgDetail;
+    private TierDetail tierDetail;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/PackageBenefitsDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/PackageBenefitsDetail.java b/src/main/java/com/syzegee/customer/events/model/PackageBenefitsDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/PackageBenefitsDetail.java	(date 1613491889000)
@@ -0,0 +1,27 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class PackageBenefitsDetail {
+    private Long id;
+    private Long packageId;
+    private Long benefitId;
+    private boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerAddressDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerAddressDetail.java b/src/main/java/com/syzegee/customer/events/model/CustomerAddressDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerAddressDetail.java	(date 1613491889000)
@@ -0,0 +1,41 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerAddressDetail {
+    
+    //private Long customerAddressId;
+    private Long customerId;
+    private String addressLine1;
+    private String addressLine2;
+    private String addressLine3;
+    private String city;
+    private String sate;
+    private String zipCode;
+    private String countryCode;
+    private Boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/ActivationValidateDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/ActivationValidateDetails.java b/src/main/java/com/syzegee/customer/events/model/ActivationValidateDetails.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/ActivationValidateDetails.java	(date 1613491889000)
@@ -0,0 +1,21 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class ActivationValidateDetails {
+
+    private String activationCode;
+    private String customerUserId;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerUpdateDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerUpdateDetail.java b/src/main/java/com/syzegee/customer/events/model/CustomerUpdateDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerUpdateDetail.java	(date 1613491889000)
@@ -0,0 +1,25 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerUpdateDetail {
+        private Long customerId;
+        private CustomerDetail customerDetail;
+        private OrganizationDetail orgDetail;
+        private CustomerAddressDetail custAddressDetail;
+        private TierDetail tierDetail;
+        private PackagesDetail packagesDetail;
+        private BenefitDetail benefitDetail;
+        private PackageBenefitsDetail packageBenefitsDetail;
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerUserRoleRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerUserRoleRequest.java b/src/main/java/com/syzegee/customer/events/model/CustomerUserRoleRequest.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerUserRoleRequest.java	(date 1613491889000)
@@ -0,0 +1,23 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerUserRoleRequest {
+
+    private String correlationId;
+    private Date createdDate;
+    private Long customerUserId;
+    private String roleType;
+    private String createdBy;
+    private String updatedBy;
+    private Date updatedDate;
+}
Index: src/main/java/com/syzegee/customer/events/model/OrganizationDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/OrganizationDetail.java b/src/main/java/com/syzegee/customer/events/model/OrganizationDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/OrganizationDetail.java	(date 1613491889000)
@@ -0,0 +1,35 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class OrganizationDetail {
+
+    private Long organizationId;
+    private String organizationName;
+    private String organizationDesc;
+    private String organizationSize;
+    private Boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+}
Index: src/main/java/com/syzegee/customer/events/model/ActivateResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/ActivateResponse.java b/src/main/java/com/syzegee/customer/events/model/ActivateResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/ActivateResponse.java	(date 1613491889000)
@@ -0,0 +1,19 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * @author Riya Patel
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class ActivateResponse {
+    private Long customerId;
+}
+
+
Index: src/main/java/com/syzegee/customer/events/model/MarketingAutomationCreationEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/MarketingAutomationCreationEvent.java b/src/main/java/com/syzegee/customer/events/model/MarketingAutomationCreationEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/MarketingAutomationCreationEvent.java	(date 1613491889000)
@@ -0,0 +1,21 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class MarketingAutomationCreationEvent {
+    private String customerUserName;
+    private String customerEmail;
+    private String customerOrganizationName;
+    private Long customerId;
+    private String customerFirstName;
+    private String customerLastName;
+    private String state;
+    private String correlationId;
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerRoleDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerRoleDetail.java b/src/main/java/com/syzegee/customer/events/model/CustomerRoleDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerRoleDetail.java	(date 1613491889000)
@@ -0,0 +1,35 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model;
+
+import com.syzegee.customer.events.entity.Customer;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerRoleDetail {
+   
+    private String customerRoleType;
+    private Boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+    private Customer customerId;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/PackagesDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/PackagesDetail.java b/src/main/java/com/syzegee/customer/events/model/PackagesDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/PackagesDetail.java	(date 1613491889000)
@@ -0,0 +1,34 @@
+package com.syzegee.customer.events.model;
+
+import com.syzegee.customer.events.entity.CustomerBenefit;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+import java.util.List;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class PackagesDetail {
+
+    private Long id;
+    private Long tierId;
+    private Long customerId;
+    private String packageName;
+    private boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+    private List<CustomerBenefit> benefits;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/SolicitationDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/SolicitationDetail.java b/src/main/java/com/syzegee/customer/events/model/SolicitationDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/SolicitationDetail.java	(date 1613491889000)
@@ -0,0 +1,26 @@
+package com.syzegee.customer.events.model;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+import java.util.List;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class SolicitationDetail {
+	private String solicitationName;
+	private String solicitationDesc;
+	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
+	private Date startDate ;
+	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
+	private Date endDate ;
+	private List<String> packages;
+	
+
+}
Index: src/main/java/com/syzegee/customer/events/model/CommunicationEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CommunicationEvent.java b/src/main/java/com/syzegee/customer/events/model/CommunicationEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CommunicationEvent.java	(date 1613491889000)
@@ -0,0 +1,23 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CommunicationEvent {
+
+    private Long customerId;
+    private String userId;
+    private String correlationId;
+    private String activationCode;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/MarketingAutomationEventCreated.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/MarketingAutomationEventCreated.java b/src/main/java/com/syzegee/customer/events/model/MarketingAutomationEventCreated.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/MarketingAutomationEventCreated.java	(date 1613491889000)
@@ -0,0 +1,22 @@
+package com.syzegee.customer.events.model;
+
+import lombok.Builder;
+import lombok.Data;
+
+@Builder
+@Data
+public class MarketingAutomationEventCreated {
+    private String customerUserName;
+    private String customerEmail;
+    private String customerOrganizationName;
+    private Long customerId;
+    private String customerFirstName;
+    private String customerLastName;
+    private String state;
+    private String correlationId;
+    private String siteName;
+    private String siteType;
+    private String domainName;
+    private String templateCode;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerUserRoleResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerUserRoleResponse.java b/src/main/java/com/syzegee/customer/events/model/CustomerUserRoleResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerUserRoleResponse.java	(date 1613491889000)
@@ -0,0 +1,20 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerUserRoleResponse {
+
+
+    private String uri;
+    private String isSuccess;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerUserDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerUserDetail.java b/src/main/java/com/syzegee/customer/events/model/CustomerUserDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerUserDetail.java	(date 1613491889000)
@@ -0,0 +1,36 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerUserDetail {
+
+    private Long customerUserId;
+    private Long customerId;
+    private String firstName;
+    private String lastName;
+    private String emailId;
+    private Boolean isActive;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteEvent.java b/src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteEvent.java	(date 1613491889000)
@@ -0,0 +1,22 @@
+package com.syzegee.customer.events.model.crafter;
+
+import com.syzegee.customer.events.model.BenefitDetail;
+import lombok.Builder;
+import lombok.Data;
+
+import java.util.List;
+
+@Data
+@Builder
+public class CustomerSiteEvent {
+    private Long customerId;
+    private String customerTemplateId;
+    private String state;
+    private String correlationId;
+    private String customerRequestId;
+    private List<BenefitDetail> benefitDetailsList;
+    private String firsName;
+    private String lastName;
+    private String groupName;
+    private String email;
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/CrafterAuhtnticatedToken.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/CrafterAuhtnticatedToken.java b/src/main/java/com/syzegee/customer/events/model/crafter/CrafterAuhtnticatedToken.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/CrafterAuhtnticatedToken.java	(date 1613491889000)
@@ -0,0 +1,12 @@
+package com.syzegee.customer.events.model.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+
+@Builder
+@Data
+public class CrafterAuhtnticatedToken {
+    private String secureKey;
+    private String jessionId;
+    private String xsrfTOken;
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/CrafterCreateSite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/CrafterCreateSite.java b/src/main/java/com/syzegee/customer/events/model/crafter/CrafterCreateSite.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/CrafterCreateSite.java	(date 1613491889000)
@@ -0,0 +1,116 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+public class CrafterCreateSite {
+
+    private String authentication_type;
+    private String blueprint;
+    private String create_option;
+    private String description;
+    private String remote_name;
+    private String remote_password;
+    private String remote_url;
+    private String remote_username;
+    private String site_id;
+    private Boolean use_remote;
+    private Long customerId;
+
+    @Tolerate
+    public CrafterCreateSite(){
+
+    }
+
+    public String getAuthentication_type() {
+        return authentication_type;
+    }
+
+    public void setAuthentication_type(String authentication_type) {
+        this.authentication_type = authentication_type;
+    }
+
+    public String getBlueprint() {
+        return blueprint;
+    }
+
+    public void setBlueprint(String blueprint) {
+        this.blueprint = blueprint;
+    }
+
+    public String getCreate_option() {
+        return create_option;
+    }
+
+    public void setCreate_option(String create_option) {
+        this.create_option = create_option;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getRemote_name() {
+        return remote_name;
+    }
+
+    public void setRemote_name(String remote_name) {
+        this.remote_name = remote_name;
+    }
+
+    public String getRemote_password() {
+        return remote_password;
+    }
+
+    public void setRemote_password(String remote_password) {
+        this.remote_password = remote_password;
+    }
+
+    public String getRemote_url() {
+        return remote_url;
+    }
+
+    public void setRemote_url(String remote_url) {
+        this.remote_url = remote_url;
+    }
+
+    public String getRemote_username() {
+        return remote_username;
+    }
+
+    public void setRemote_username(String remote_username) {
+        this.remote_username = remote_username;
+    }
+
+    public String getSite_id() {
+        return site_id;
+    }
+
+    public void setSite_id(String site_id) {
+        this.site_id = site_id;
+    }
+
+    public Boolean getUse_remote() {
+        return use_remote;
+    }
+
+    public void setUse_remote(Boolean use_remote) {
+        this.use_remote = use_remote;
+    }
+ 
+}
Index: src/main/java/com/syzegee/customer/events/model/CustomerActivationResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/CustomerActivationResponse.java b/src/main/java/com/syzegee/customer/events/model/CustomerActivationResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/CustomerActivationResponse.java	(date 1613491889000)
@@ -0,0 +1,28 @@
+package com.syzegee.customer.events.model;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerActivationResponse {
+
+    private Long customerId;
+    private String emailId;
+    private String correlationId;
+    private String activation_code;
+    
+    @Override
+    public String toString() {
+    	
+    	return "{"+"customerId="+customerId+",emailId="+emailId+",correlationId="+correlationId+",activation_code="+activation_code+"}";
+    }
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/CustomerTemplateEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/CustomerTemplateEvent.java b/src/main/java/com/syzegee/customer/events/model/crafter/CustomerTemplateEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/CustomerTemplateEvent.java	(date 1613491889000)
@@ -0,0 +1,19 @@
+package com.syzegee.customer.events.model.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+public class CustomerTemplateEvent {
+
+    private Long customerId;
+    private String customerTemplateId;
+    private String state;
+    private String correlationId;
+    private String customerRequestId;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteUpdateEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteUpdateEvent.java b/src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteUpdateEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteUpdateEvent.java	(date 1613491889000)
@@ -0,0 +1,14 @@
+package com.syzegee.customer.events.model.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+
+@Data
+@Builder
+public class CustomerSiteUpdateEvent {
+    private Long customerId;
+    private String customerTemplateId;
+    private String state;
+    private String correlationId;
+    private String customerRequestId;
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/Page.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/Page.java b/src/main/java/com/syzegee/customer/events/model/crafter/Page.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/Page.java	(date 1613491889000)
@@ -0,0 +1,92 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
+
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+@XmlRootElement
+@XmlAccessorType(XmlAccessType.FIELD)
+public class Page {
+    
+    @XmlElement(name = "content-type")
+    private String content_type;
+    private String placeInNav;
+    @XmlElement(name = "display-template")
+    private String display_template;
+    @XmlElement(name = "merge-strategy")
+    private String merge_strategy ;
+    @XmlElement(name = "file-name")
+    private String file_name ;
+    @XmlElement(name = "internal-name")
+    private String internal_name ;
+    private String orderDefault_f;
+    private String header;
+    private String content;
+    private String description;
+    private String objectGroupId;
+    private String objectId;
+    @XmlElement(name = "folder-name")
+    private String folder_name;
+    private String createdDate;
+    private String createdDate_dt;
+    private String lastModifiedDate;
+    private String lastModifiedDate_dt;
+    private String menu_bar_link_1;
+    private String menu_bar_link_2;
+    private String menu_bar_link_3;
+    private String menu_bar_link_4;
+    private String menu_bar_link_5;
+    private String logo_image;
+    private String hero_title;
+    private String hero_text;
+    private String generation_card_title;
+    private String generation_card_text;
+    private String generation_card_image;
+
+    private String generation_title_1;
+    private String generation_text_1;
+    private String generation_title_2;
+    private String generation_text_2;
+    private String generation_title_3;
+    private String generation_text_3;
+
+    private String royal_title;
+    private String royal_text;
+
+    private String anheuser_title;
+    private String anheuser_text;
+    private String carousel_title;
+
+    private String carousel_image_1;
+    private String carousel_image_2;
+    private String carousel_image_3;
+    private String carousel_image_4;
+
+    private Features features;
+    private String copyright_text;
+    private String copyright_link_1;
+    private String copyright_link_2;
+    private String copyright_link_3;
+    private String disabled;
+
+
+    @Override
+    public String toString() {
+        return "Page{" + "content_type=" + content_type + ", placeInNav=" + placeInNav + ", display_template=" + display_template + ", merge_strategy=" + merge_strategy + ", file_name=" + file_name + ", internal_name=" + internal_name + ", orderDefault_f=" + orderDefault_f + ", header=" + header + ", content=" + content + ", description=" + description + ", objectGroupId=" + objectGroupId + ", objectId=" + objectId + ", folder_name=" + folder_name + ", createdDate=" + createdDate + ", createdDate_dt=" + createdDate_dt + ", lastModifiedDate=" + lastModifiedDate + ", lastModifiedDate_dt=" + lastModifiedDate_dt + ", menu_bar_link_1=" + menu_bar_link_1 + ", menu_bar_link_2=" + menu_bar_link_2 + ", menu_bar_link_3=" + menu_bar_link_3 + ", menu_bar_link_4=" + menu_bar_link_4 + ", menu_bar_link_5=" + menu_bar_link_5 + ", logo_image=" + logo_image + ", hero_title=" + hero_title + ", hero_text=" + hero_text + ", generation_card_title=" + generation_card_title + ", generation_card_text=" + generation_card_text + ", generation_card_image=" + generation_card_image + ", generation_title_1=" + generation_title_1 + ", generation_text_1=" + generation_text_1 + ", generation_title_2=" + generation_title_2 + ", generation_text_2=" + generation_text_2 + ", generation_title_3=" + generation_title_3 + ", generation_text_3=" + generation_text_3 + ", royal_title=" + royal_title + ", royal_text=" + royal_text + ", anheuser_title=" + anheuser_title + ", anheuser_text=" + anheuser_text + ", carousel_title=" + carousel_title + ", carousel_image_1=" + carousel_image_1 + ", carousel_image_2=" + carousel_image_2 + ", carousel_image_3=" + carousel_image_3 + ", carousel_image_4=" + carousel_image_4 + ", features=" + features + ", copyright_text=" + copyright_text + ", copyright_link_1=" + copyright_link_1 + ", copyright_link_2=" + copyright_link_2 + ", copyright_link_3=" + copyright_link_3 + ", disabled=" + disabled + '}';
+    }
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/CustomerTemplate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/CustomerTemplate.java b/src/main/java/com/syzegee/customer/events/model/crafter/CustomerTemplate.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/CustomerTemplate.java	(date 1613491889000)
@@ -0,0 +1,19 @@
+package com.syzegee.customer.events.model.crafter;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerTemplate {
+
+    private Long customerId;
+    private String customerTemplateId;
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/CrafterLogin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/CrafterLogin.java b/src/main/java/com/syzegee/customer/events/model/crafter/CrafterLogin.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/CrafterLogin.java	(date 1613491889000)
@@ -0,0 +1,35 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model.crafter;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import java.io.Serializable;
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+@AllArgsConstructor
+public class CrafterLogin implements Serializable {
+
+    private String username;
+    private String password;
+    private String firstname;
+    private String customerId;
+    private String secureKey;
+    private String email;
+    private String lastname;
+    private String groups;
+
+    @Tolerate
+    public CrafterLogin(){}
+
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/DeploymentSite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/DeploymentSite.java b/src/main/java/com/syzegee/customer/events/model/crafter/DeploymentSite.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/DeploymentSite.java	(date 1613491889000)
@@ -0,0 +1,24 @@
+package com.syzegee.customer.events.model.crafter;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * @author Riya Patel
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class DeploymentSite {
+    private String env;
+    private String site_name;
+    private Boolean replace;
+    private String template_name;
+    private String repo_url;
+    private String repo_branch;
+    private String engine_url;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/CrafterUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/CrafterUser.java b/src/main/java/com/syzegee/customer/events/model/crafter/CrafterUser.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/CrafterUser.java	(date 1613491889000)
@@ -0,0 +1,32 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import java.io.Serializable;
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+public class CrafterUser implements Serializable {
+
+    private String username;
+    private String password;
+    private String firstName;
+    private String lastName;
+    private String email;
+    private Boolean enabled;
+    private Boolean externallyManaged;
+
+    @Tolerate
+    public CrafterUser(){}
+
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/Features.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/Features.java b/src/main/java/com/syzegee/customer/events/model/crafter/Features.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/Features.java	(date 1613491889000)
@@ -0,0 +1,30 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+
+import javax.xml.bind.annotation.XmlRootElement;
+import java.util.Arrays;
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+@XmlRootElement
+public class Features {
+
+    private Item[]  item;
+
+    @Override
+    public String toString() {
+        return "Features{" +
+                "item=" + Arrays.toString(item) +
+                '}';
+    }
+}
Index: src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeRuleDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeRuleDetail.java b/src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeRuleDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeRuleDetail.java	(date 1613491889000)
@@ -0,0 +1,31 @@
+package com.syzegee.customer.events.model.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ * Ram Prasad
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class SyzegeeRuleDetail implements Serializable {
+    private long ruleId;
+    private String ruleCode;
+    private String ruleName;
+    private String ruleDesc;
+    private String ruleType;
+    private Boolean isActive;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+
+
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/Item.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/Item.java b/src/main/java/com/syzegee/customer/events/model/crafter/Item.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/Item.java	(date 1613491889000)
@@ -0,0 +1,62 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model.crafter;
+
+import javax.xml.bind.annotation.XmlRootElement;
+/**
+ * Sagar
+ */
+//@Data
+//@Builder
+@XmlRootElement
+public class Item {
+    private String include;
+    private String value;
+    private String disableFlattening;
+    private String key;
+
+    public String getInclude() {
+        return include;
+    }
+
+    public void setInclude(String include) {
+        this.include = include;
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public void setValue(String value) {
+        this.value = value;
+    }
+
+    public String getDisableFlattening() {
+        return disableFlattening;
+    }
+
+    public void setDisableFlattening(String disableFlattening) {
+        this.disableFlattening = disableFlattening;
+    }
+
+    public String getKey() {
+        return key;
+    }
+
+    public void setKey(String key) {
+        this.key = key;
+    }
+
+    @Override
+    public String toString() {
+        return "Item{" +
+                "include='" + include + '\'' +
+                ", value='" + value + '\'' +
+                ", disableFlattening='" + disableFlattening + '\'' +
+                ", key='" + key + '\'' +
+                '}';
+    }
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/CrafterGroups.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/CrafterGroups.java b/src/main/java/com/syzegee/customer/events/model/crafter/CrafterGroups.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/CrafterGroups.java	(date 1613491889000)
@@ -0,0 +1,34 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.model.crafter;
+
+import java.util.ArrayList;
+import java.util.List;
+/**
+ * Sagar
+ */
+//@Data
+//@Builder
+public class CrafterGroups {
+     private List<String> ids= new ArrayList<>();
+    private List<String> usernames=  new ArrayList<>();
+
+    public List<String> getIds() {
+        return ids;
+    }
+
+    public void setIds(List<String> ids) {
+        this.ids = ids;
+    }
+
+    public List<String> getUsernames() {
+        return usernames;
+    }
+
+    public void setUsernames(List<String> usernames) {
+        this.usernames = usernames;
+    }
+}
Index: src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteEditEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteEditEvent.java b/src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteEditEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/crafter/CustomerSiteEditEvent.java	(date 1613491889000)
@@ -0,0 +1,16 @@
+package com.syzegee.customer.events.model.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+
+@Data
+@Builder
+public class CustomerSiteEditEvent {
+
+    private Long customerId;
+    private String customerTemplateId;
+    private String state;
+    private String correlationId;
+    private String customerRequestId;
+
+}
Index: src/main/java/com/syzegee/customer/events/model/ruleengine/RuleDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/ruleengine/RuleDetails.java b/src/main/java/com/syzegee/customer/events/model/ruleengine/RuleDetails.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/ruleengine/RuleDetails.java	(date 1613491889000)
@@ -0,0 +1,26 @@
+package com.syzegee.customer.events.model.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import java.io.Serializable;
+import java.util.List;
+
+/**
+ * Ram Prasad
+ */
+@Data
+@Builder
+@AllArgsConstructor
+public class RuleDetails implements Serializable {
+
+    private ProjectDetail projectDetail;
+    private SyzegeeRuleDetail ruleNameDetails;
+    private List<SyzegeeRuleDtlDetail> ruleAttributeDetails;
+    private List<SyzegeeProjectRulesDetail> ruleValueDetails;
+    @Tolerate
+    public RuleDetails() {
+    }
+}
Index: src/main/java/com/syzegee/customer/events/model/ruleengine/CustomerRule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/ruleengine/CustomerRule.java b/src/main/java/com/syzegee/customer/events/model/ruleengine/CustomerRule.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/ruleengine/CustomerRule.java	(date 1613491889000)
@@ -0,0 +1,34 @@
+package com.syzegee.customer.events.model.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ * Ram Prasad
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerRule implements Serializable {
+
+    private long projectId;
+    private Long customerId;
+    private String projectCode;
+    private String projectName;
+    private String projectDesc;
+    private String defaultRuleName;
+    private Boolean isActive;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+    private RuleDetails ruleDetails;
+
+
+}
Index: src/main/java/com/syzegee/customer/events/model/ruleengine/CustomerRuleEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/ruleengine/CustomerRuleEvent.java b/src/main/java/com/syzegee/customer/events/model/ruleengine/CustomerRuleEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/ruleengine/CustomerRuleEvent.java	(date 1613491889000)
@@ -0,0 +1,18 @@
+package com.syzegee.customer.events.model.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerRuleEvent {
+    private Long customerId;
+    private Long projectId;
+    private String state;
+    private String correlationId;
+    private String customerRequestId;
+}
Index: src/main/java/com/syzegee/customer/events/model/ruleengine/ProjectDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/ruleengine/ProjectDetail.java b/src/main/java/com/syzegee/customer/events/model/ruleengine/ProjectDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/ruleengine/ProjectDetail.java	(date 1613491889000)
@@ -0,0 +1,18 @@
+package com.syzegee.customer.events.model.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * Ram Prasad
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class ProjectDetail {
+    private long projectId;
+    private String projectName;
+}
Index: src/main/java/com/syzegee/customer/events/domain/ActivationValidateResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/ActivationValidateResponse.java b/src/main/java/com/syzegee/customer/events/domain/ActivationValidateResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/ActivationValidateResponse.java	(date 1613491889000)
@@ -0,0 +1,21 @@
+package com.syzegee.customer.events.domain;
+
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class ActivationValidateResponse {
+
+    private Boolean status;
+    private Long customerId;
+}
Index: src/main/java/com/syzegee/customer/events/model/ruleengine/RuleResponseDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/ruleengine/RuleResponseDetails.java b/src/main/java/com/syzegee/customer/events/model/ruleengine/RuleResponseDetails.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/ruleengine/RuleResponseDetails.java	(date 1613491889000)
@@ -0,0 +1,21 @@
+package com.syzegee.customer.events.model.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+/**
+ * Ram Prasad
+ */
+@Builder
+@Data
+@AllArgsConstructor
+public class RuleResponseDetails {
+    private long projectId;
+    private String correlationId;
+    private String message;
+
+    @Tolerate
+    public RuleResponseDetails(){}
+}
Index: src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeRuleDtlDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeRuleDtlDetail.java b/src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeRuleDtlDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeRuleDtlDetail.java	(date 1613491889000)
@@ -0,0 +1,31 @@
+package com.syzegee.customer.events.model.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * Ram Prasad
+ */
+import java.io.Serializable;
+import java.util.Date;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class SyzegeeRuleDtlDetail implements Serializable {
+
+    private long ruleDetailId;
+    private long ruleId;
+    private String ruleDetailCode;
+    private String ruleDetailValue;
+    private Boolean isActive;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+
+
+}
Index: src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeProjectRulesDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeProjectRulesDetail.java b/src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeProjectRulesDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/model/ruleengine/SyzegeeProjectRulesDetail.java	(date 1613491889000)
@@ -0,0 +1,30 @@
+package com.syzegee.customer.events.model.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ * Ram Prasad
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class SyzegeeProjectRulesDetail implements Serializable {
+    private long projectRuleId;
+    private long projectId;
+    private long ruleId;
+    private String ruleValue;
+    private Boolean isActive;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/CustomerCreateDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CustomerCreateDetail.java b/src/main/java/com/syzegee/customer/events/domain/CustomerCreateDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CustomerCreateDetail.java	(date 1613491889000)
@@ -0,0 +1,36 @@
+package com.syzegee.customer.events.domain;
+
+import com.syzegee.customer.events.domain.crafter.CustomerTemplate;
+import com.syzegee.customer.events.domain.ruleengine.CustomerRule;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.Tolerate;
+
+
+import java.util.List;
+
+/**
+ * @author Sagar
+ */
+@Data
+@Builder
+@AllArgsConstructor
+public class CustomerCreateDetail {
+    private OrganizationDetail orgDetail;
+    private CustomerDetail customerDetail;
+    private CustomerAddressDetail custAddressDetail;
+    private TierDetail tierDetail;
+    private List<BenefitDetail> benefitDetail;
+    private List<PackagesDetail> packagesDetail;
+    private CustomerDomainDetails domainDetails;
+    private CustomerRule customerRule;
+    private CustomerTemplate customerTemplate;
+    private List<SolicitationDetail> solicitationDetail;
+
+    @Tolerate
+    public CustomerCreateDetail() {
+
+    }
+}
Index: src/main/java/com/syzegee/customer/events/domain/CreateUpdateCustomerRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CreateUpdateCustomerRequest.java b/src/main/java/com/syzegee/customer/events/domain/CreateUpdateCustomerRequest.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CreateUpdateCustomerRequest.java	(date 1613491889000)
@@ -0,0 +1,16 @@
+package com.syzegee.customer.events.domain;
+
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class CreateUpdateCustomerRequest {
+	    private Long customerId;
+	    private String userId;
+}
Index: src/main/java/com/syzegee/customer/events/domain/BenefitDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/BenefitDetail.java b/src/main/java/com/syzegee/customer/events/domain/BenefitDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/BenefitDetail.java	(date 1613491889000)
@@ -0,0 +1,38 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+import java.util.List;
+
+/**
+ * @author Sagar
+ */
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class BenefitDetail {
+
+    private Long id;
+    private Long customerId;
+    private List<Long> vendorId;
+    private String state;
+    private String benefitName;
+    private boolean isActive;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+    private String imageUrl;
+    private String redirectUrl;
+    private String description;
+}
Index: src/main/java/com/syzegee/customer/events/domain/CustomerDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CustomerDetail.java b/src/main/java/com/syzegee/customer/events/domain/CustomerDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CustomerDetail.java	(date 1613491889000)
@@ -0,0 +1,46 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerDetail {
+    
+    private Long customerId;
+    private Long organizationId;
+    private String userId;
+    private String businessName;
+    private String businessEmail;
+    private String businessCategory;
+    private String businessType;
+    private String currency;
+    private String region;
+    private String phoneNo;
+    private boolean isActive;
+    private boolean activationStatus;
+    private boolean activationCode;
+    private String state;
+    private Date createdDate;
+    private String createdBy;
+    private Date updatedDate;
+    private String updatedBy;
+    private String communicationPreferences;
+
+}
\ No newline at end of file
Index: src/main/java/com/syzegee/customer/events/domain/CustomerResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CustomerResponse.java b/src/main/java/com/syzegee/customer/events/domain/CustomerResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CustomerResponse.java	(date 1613491889000)
@@ -0,0 +1,32 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+/**
+ *
+ * @author Sagar
+ */
+@Data
+@Builder
+@AllArgsConstructor
+public class CustomerResponse {
+
+    private Long customerId;
+    private String correlationId;
+    private String message;
+    private String customerRequestId;
+    
+    
+
+    @Tolerate
+    public CustomerResponse(){}
+    
+    @Override
+    public String toString() {
+    	
+    	return "{"+"customerId="+customerId+",message="+message+",correlationId="+correlationId+",customerRequestId="+customerRequestId+"}";
+    }
+}
Index: src/main/java/com/syzegee/customer/events/domain/LocationDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/LocationDetail.java b/src/main/java/com/syzegee/customer/events/domain/LocationDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/LocationDetail.java	(date 1613491889000)
@@ -0,0 +1,28 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class LocationDetail {
+
+    private Long locationId;
+    private long accountId;
+    private String locationName;
+    private Boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+}
Index: src/main/java/com/syzegee/customer/events/domain/SolicitationPackageResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/SolicitationPackageResponse.java b/src/main/java/com/syzegee/customer/events/domain/SolicitationPackageResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/SolicitationPackageResponse.java	(date 1613491889000)
@@ -0,0 +1,27 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class SolicitationPackageResponse {
+
+	private Integer solicitationId;
+	private Integer customerId;
+	private Integer packageId;
+	private Date startForm;
+	private Date endDate;
+	private boolean isActive;
+	private String createdBy;
+	private Date createdAt;
+	private String updatedBy;
+	private Date updatedAt;
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/TierDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/TierDetail.java b/src/main/java/com/syzegee/customer/events/domain/TierDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/TierDetail.java	(date 1613491889000)
@@ -0,0 +1,28 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class TierDetail {
+
+    private Long id;
+    private Long customerId;
+    private String tierName;
+    private boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+}
Index: src/main/java/com/syzegee/customer/events/domain/CustomerActivationDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CustomerActivationDetails.java b/src/main/java/com/syzegee/customer/events/domain/CustomerActivationDetails.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CustomerActivationDetails.java	(date 1613491889000)
@@ -0,0 +1,20 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerActivationDetails {
+    private CustomerDetail customerDetail;
+    private OrganizationDetail orgDetail;
+    private CustomerUserDetail userDetail;
+}
Index: src/main/java/com/syzegee/customer/events/domain/CustomerDomainDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CustomerDomainDetails.java b/src/main/java/com/syzegee/customer/events/domain/CustomerDomainDetails.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CustomerDomainDetails.java	(date 1613491889000)
@@ -0,0 +1,34 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * @author Sagar
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerDomainDetails {
+    private Long siteId;
+    private Long customerId;
+    private String siteCode;
+    private String templateCode;
+    private String siteName;
+    private String siteDesc;
+    private String siteType;
+    private String domainName;
+    private String logo;
+    private String tagline;
+    private boolean isActive;
+    private String correlationId;
+    private String state;
+    private String createdBy;
+    private String createdDate;
+    private String updatedBy;
+    private String updatedDate;
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/CustomerEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CustomerEvent.java b/src/main/java/com/syzegee/customer/events/domain/CustomerEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CustomerEvent.java	(date 1613491889000)
@@ -0,0 +1,19 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerEvent {
+
+    private Long customerId;
+    private String state;
+    private String correlationId;
+    private String customerRequestId;
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/PackageBenefitsDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/PackageBenefitsDetail.java b/src/main/java/com/syzegee/customer/events/domain/PackageBenefitsDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/PackageBenefitsDetail.java	(date 1613491889000)
@@ -0,0 +1,27 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class PackageBenefitsDetail {
+    private Long id;
+    private Long packageId;
+    private Long benefitId;
+    private boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+}
Index: src/main/java/com/syzegee/customer/events/domain/CustomerAddressDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CustomerAddressDetail.java b/src/main/java/com/syzegee/customer/events/domain/CustomerAddressDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CustomerAddressDetail.java	(date 1613491889000)
@@ -0,0 +1,41 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerAddressDetail {
+    
+    private Long customerAddressId;
+    private Long customerId;
+    private String addressLine1;
+    private String addressLine2;
+    private String addressLine3;
+    private String city;
+    private String sate;
+    private String zipCode;
+    private String countryCode;
+    private Boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/ActivationValidateDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/ActivationValidateDetails.java b/src/main/java/com/syzegee/customer/events/domain/ActivationValidateDetails.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/ActivationValidateDetails.java	(date 1613491889000)
@@ -0,0 +1,21 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class ActivationValidateDetails {
+
+    private String activationCode;
+    private String customerUserId;
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/SolicitationDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/SolicitationDetail.java b/src/main/java/com/syzegee/customer/events/domain/SolicitationDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/SolicitationDetail.java	(date 1613491889000)
@@ -0,0 +1,26 @@
+package com.syzegee.customer.events.domain;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+import java.util.List;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class SolicitationDetail {
+	private String solicitationName;
+	private String solicitationDesc;
+	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
+	private Date startDate ;
+	@JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
+	private Date endDate ;
+	private List<String> packages;
+	
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/CustomerUpdateDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CustomerUpdateDetail.java b/src/main/java/com/syzegee/customer/events/domain/CustomerUpdateDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CustomerUpdateDetail.java	(date 1613491889000)
@@ -0,0 +1,23 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerUpdateDetail {
+        private CustomerDetail customerDetail;
+        private CustomerAddressDetail custAddressDetail;
+        private TierDetail tierDetail;
+        private PackagesDetail packagesDetail;
+        private BenefitDetail benefitDetail;
+        private PackageBenefitsDetail packageBenefitsDetail;
+}
Index: src/main/java/com/syzegee/customer/events/domain/OrganizationDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/OrganizationDetail.java b/src/main/java/com/syzegee/customer/events/domain/OrganizationDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/OrganizationDetail.java	(date 1613491889000)
@@ -0,0 +1,35 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class OrganizationDetail {
+
+    private Long organizationId;
+    private String organizationName;
+    private String organizationDesc;
+    private String organizationSize;
+    private Boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+}
Index: src/main/java/com/syzegee/customer/events/domain/ActivateResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/ActivateResponse.java b/src/main/java/com/syzegee/customer/events/domain/ActivateResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/ActivateResponse.java	(date 1613491889000)
@@ -0,0 +1,19 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * @author Riya Patel
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class ActivateResponse {
+    private Long customerId;
+}
+
+
Index: src/main/java/com/syzegee/customer/events/domain/CommunicationEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CommunicationEvent.java b/src/main/java/com/syzegee/customer/events/domain/CommunicationEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CommunicationEvent.java	(date 1613491889000)
@@ -0,0 +1,23 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CommunicationEvent {
+
+    private Long customerId;
+    private String user_id;
+    private String correlationId;
+    private String activation_code;
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/CustomerUserDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CustomerUserDetail.java b/src/main/java/com/syzegee/customer/events/domain/CustomerUserDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CustomerUserDetail.java	(date 1613491889000)
@@ -0,0 +1,36 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerUserDetail {
+
+    private Long customerUserId;
+    private Long customerId;
+    private String firstName;
+    private String lastName;
+    private String emailId;
+    private Boolean isActive;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/CustomerRoleDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CustomerRoleDetail.java b/src/main/java/com/syzegee/customer/events/domain/CustomerRoleDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CustomerRoleDetail.java	(date 1613491889000)
@@ -0,0 +1,35 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain;
+
+import com.syzegee.customer.events.entity.Customer;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerRoleDetail {
+   
+    private String customerRoleType;
+    private Boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+    private Customer customerId;
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/PackagesDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/PackagesDetail.java b/src/main/java/com/syzegee/customer/events/domain/PackagesDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/PackagesDetail.java	(date 1613491889000)
@@ -0,0 +1,34 @@
+package com.syzegee.customer.events.domain;
+
+import com.syzegee.customer.events.entity.CustomerBenefit;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.Date;
+import java.util.List;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class PackagesDetail {
+
+    private Long id;
+    private Long tierId;
+    private Long customerId;
+    private String packageName;
+    private boolean isActive;
+    private String state;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+    private List<CustomerBenefit> benefits;
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/crafter/Item.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/crafter/Item.java b/src/main/java/com/syzegee/customer/events/domain/crafter/Item.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/crafter/Item.java	(date 1613491889000)
@@ -0,0 +1,62 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain.crafter;
+
+import javax.xml.bind.annotation.XmlRootElement;
+/**
+ * Sagar
+ */
+//@Data
+//@Builder
+@XmlRootElement
+public class Item {
+    private String include;
+    private String value;
+    private String disableFlattening;
+    private String key;
+
+    public String getInclude() {
+        return include;
+    }
+
+    public void setInclude(String include) {
+        this.include = include;
+    }
+
+    public String getValue() {
+        return value;
+    }
+
+    public void setValue(String value) {
+        this.value = value;
+    }
+
+    public String getDisableFlattening() {
+        return disableFlattening;
+    }
+
+    public void setDisableFlattening(String disableFlattening) {
+        this.disableFlattening = disableFlattening;
+    }
+
+    public String getKey() {
+        return key;
+    }
+
+    public void setKey(String key) {
+        this.key = key;
+    }
+
+    @Override
+    public String toString() {
+        return "Item{" +
+                "include='" + include + '\'' +
+                ", value='" + value + '\'' +
+                ", disableFlattening='" + disableFlattening + '\'' +
+                ", key='" + key + '\'' +
+                '}';
+    }
+}
Index: src/main/java/com/syzegee/customer/events/domain/crafter/CrafterAuhtnticatedToken.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterAuhtnticatedToken.java b/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterAuhtnticatedToken.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterAuhtnticatedToken.java	(date 1613491889000)
@@ -0,0 +1,12 @@
+package com.syzegee.customer.events.domain.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+
+@Builder
+@Data
+public class CrafterAuhtnticatedToken {
+    private String secureKey;
+    private String jessionId;
+    private String xsrfTOken;
+}
Index: src/main/java/com/syzegee/customer/events/domain/crafter/CrafterCreateSite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterCreateSite.java b/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterCreateSite.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterCreateSite.java	(date 1613491889000)
@@ -0,0 +1,116 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+public class CrafterCreateSite {
+
+    private String authentication_type;
+    private String blueprint;
+    private String create_option;
+    private String description;
+    private String remote_name;
+    private String remote_password;
+    private String remote_url;
+    private String remote_username;
+    private String site_id;
+    private Boolean use_remote;
+    private Long customerId;
+
+    @Tolerate
+    public CrafterCreateSite(){
+
+    }
+
+    public String getAuthentication_type() {
+        return authentication_type;
+    }
+
+    public void setAuthentication_type(String authentication_type) {
+        this.authentication_type = authentication_type;
+    }
+
+    public String getBlueprint() {
+        return blueprint;
+    }
+
+    public void setBlueprint(String blueprint) {
+        this.blueprint = blueprint;
+    }
+
+    public String getCreate_option() {
+        return create_option;
+    }
+
+    public void setCreate_option(String create_option) {
+        this.create_option = create_option;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getRemote_name() {
+        return remote_name;
+    }
+
+    public void setRemote_name(String remote_name) {
+        this.remote_name = remote_name;
+    }
+
+    public String getRemote_password() {
+        return remote_password;
+    }
+
+    public void setRemote_password(String remote_password) {
+        this.remote_password = remote_password;
+    }
+
+    public String getRemote_url() {
+        return remote_url;
+    }
+
+    public void setRemote_url(String remote_url) {
+        this.remote_url = remote_url;
+    }
+
+    public String getRemote_username() {
+        return remote_username;
+    }
+
+    public void setRemote_username(String remote_username) {
+        this.remote_username = remote_username;
+    }
+
+    public String getSite_id() {
+        return site_id;
+    }
+
+    public void setSite_id(String site_id) {
+        this.site_id = site_id;
+    }
+
+    public Boolean getUse_remote() {
+        return use_remote;
+    }
+
+    public void setUse_remote(Boolean use_remote) {
+        this.use_remote = use_remote;
+    }
+ 
+}
Index: src/main/java/com/syzegee/customer/events/domain/CustomerActivationResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/CustomerActivationResponse.java b/src/main/java/com/syzegee/customer/events/domain/CustomerActivationResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/CustomerActivationResponse.java	(date 1613491889000)
@@ -0,0 +1,28 @@
+package com.syzegee.customer.events.domain;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ *
+ * @author Sagar
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerActivationResponse {
+
+    private Long customerId;
+    private String emailId;
+    private String correlationId;
+    private String activation_code;
+    
+    @Override
+    public String toString() {
+    	
+    	return "{"+"customerId="+customerId+",emailId="+emailId+",correlationId="+correlationId+",activation_code="+activation_code+"}";
+    }
+}
Index: src/main/java/com/syzegee/customer/events/domain/crafter/DeploymentSite.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/crafter/DeploymentSite.java b/src/main/java/com/syzegee/customer/events/domain/crafter/DeploymentSite.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/crafter/DeploymentSite.java	(date 1613491889000)
@@ -0,0 +1,24 @@
+package com.syzegee.customer.events.domain.crafter;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * @author Riya Patel
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class DeploymentSite {
+    private String env;
+    private String site_name;
+    private Boolean replace;
+    private String template_name;
+    private String repo_url;
+    private String repo_branch;
+    private String engine_url;
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/crafter/Features.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/crafter/Features.java b/src/main/java/com/syzegee/customer/events/domain/crafter/Features.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/crafter/Features.java	(date 1613491889000)
@@ -0,0 +1,35 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain.crafter;
+
+import javax.xml.bind.annotation.XmlRootElement;
+import java.util.Arrays;
+
+/**
+ * Sagar
+ */
+//@Data
+//@Builder
+@XmlRootElement
+public class Features {
+
+    private Item[]  item;
+
+    public Item[] getItem() {
+        return item;
+    }
+
+    public void setItem(Item[] item) {
+        this.item = item;
+    }
+
+    @Override
+    public String toString() {
+        return "Features{" +
+                "item=" + Arrays.toString(item) +
+                '}';
+    }
+}
Index: src/main/java/com/syzegee/customer/events/domain/crafter/Page.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/crafter/Page.java b/src/main/java/com/syzegee/customer/events/domain/crafter/Page.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/crafter/Page.java	(date 1613491889000)
@@ -0,0 +1,480 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain.crafter;
+
+import javax.xml.bind.annotation.XmlAccessType;
+import javax.xml.bind.annotation.XmlAccessorType;
+import javax.xml.bind.annotation.XmlElement;
+import javax.xml.bind.annotation.XmlRootElement;
+
+
+/**
+ * Sagar
+ */
+//@Data
+//@Builder
+@XmlRootElement
+@XmlAccessorType(XmlAccessType.FIELD)
+public class Page {
+    
+    @XmlElement(name = "content-type")
+    private String content_type;
+    private String placeInNav;
+    @XmlElement(name = "display-template")
+    private String display_template;
+    @XmlElement(name = "merge-strategy")
+    private String merge_strategy ;
+    @XmlElement(name = "file-name")
+    private String file_name ;
+    @XmlElement(name = "internal-name")
+    private String internal_name ;
+    private String orderDefault_f;
+    private String header;
+    private String content;
+    private String description;
+    private String objectGroupId;
+    private String objectId;
+    @XmlElement(name = "folder-name")
+    private String folder_name;
+    private String createdDate;
+    private String createdDate_dt;
+    private String lastModifiedDate;
+    private String lastModifiedDate_dt;
+    private String menu_bar_link_1;
+    private String menu_bar_link_2;
+    private String menu_bar_link_3;
+    private String menu_bar_link_4;
+    private String menu_bar_link_5;
+    private String logo_image;
+    private String hero_title;
+    private String hero_text;
+    private String generation_card_title;
+    private String generation_card_text;
+    private String generation_card_image;
+
+    private String generation_title_1;
+    private String generation_text_1;
+    private String generation_title_2;
+    private String generation_text_2;
+    private String generation_title_3;
+    private String generation_text_3;
+
+    private String royal_title;
+    private String royal_text;
+
+    private String anheuser_title;
+    private String anheuser_text;
+    private String carousel_title;
+
+    private String carousel_image_1;
+    private String carousel_image_2;
+    private String carousel_image_3;
+    private String carousel_image_4;
+
+    private Features features;
+    private String copyright_text;
+    private String copyright_link_1;
+    private String copyright_link_2;
+    private String copyright_link_3;
+    private String disabled;
+
+    public String getContent_type() {
+        return content_type;
+    }
+
+    public void setContent_type(String content_type) {
+        this.content_type = content_type;
+    }
+
+    public String getPlaceInNav() {
+        return placeInNav;
+    }
+
+    public void setPlaceInNav(String placeInNav) {
+        this.placeInNav = placeInNav;
+    }
+
+    public String getDisplay_template() {
+        return display_template;
+    }
+
+    public void setDisplay_template(String display_template) {
+        this.display_template = display_template;
+    }
+
+    public String getMerge_strategy() {
+        return merge_strategy;
+    }
+
+    public void setMerge_strategy(String merge_strategy) {
+        this.merge_strategy = merge_strategy;
+    }
+
+    public String getFile_name() {
+        return file_name;
+    }
+
+    public void setFile_name(String file_name) {
+        this.file_name = file_name;
+    }
+
+    public String getInternal_name() {
+        return internal_name;
+    }
+
+    public void setInternal_name(String internal_name) {
+        this.internal_name = internal_name;
+    }
+
+    public String getOrderDefault_f() {
+        return orderDefault_f;
+    }
+
+    public void setOrderDefault_f(String orderDefault_f) {
+        this.orderDefault_f = orderDefault_f;
+    }
+
+    public String getHeader() {
+        return header;
+    }
+
+    public void setHeader(String header) {
+        this.header = header;
+    }
+
+    public String getContent() {
+        return content;
+    }
+
+    public void setContent(String content) {
+        this.content = content;
+    }
+
+    public String getDescription() {
+        return description;
+    }
+
+    public void setDescription(String description) {
+        this.description = description;
+    }
+
+    public String getObjectGroupId() {
+        return objectGroupId;
+    }
+
+    public void setObjectGroupId(String objectGroupId) {
+        this.objectGroupId = objectGroupId;
+    }
+
+    public String getObjectId() {
+        return objectId;
+    }
+
+    public void setObjectId(String objectId) {
+        this.objectId = objectId;
+    }
+
+    public String getFolder_name() {
+        return folder_name;
+    }
+
+    public void setFolder_name(String folder_name) {
+        this.folder_name = folder_name;
+    }
+
+    public String getCreatedDate() {
+        return createdDate;
+    }
+
+    public void setCreatedDate(String createdDate) {
+        this.createdDate = createdDate;
+    }
+
+    public String getCreatedDate_dt() {
+        return createdDate_dt;
+    }
+
+    public void setCreatedDate_dt(String createdDate_dt) {
+        this.createdDate_dt = createdDate_dt;
+    }
+
+    public String getLastModifiedDate() {
+        return lastModifiedDate;
+    }
+
+    public void setLastModifiedDate(String lastModifiedDate) {
+        this.lastModifiedDate = lastModifiedDate;
+    }
+
+    public String getLastModifiedDate_dt() {
+        return lastModifiedDate_dt;
+    }
+
+    public void setLastModifiedDate_dt(String lastModifiedDate_dt) {
+        this.lastModifiedDate_dt = lastModifiedDate_dt;
+    }
+
+    public String getMenu_bar_link_1() {
+        return menu_bar_link_1;
+    }
+
+    public void setMenu_bar_link_1(String menu_bar_link_1) {
+        this.menu_bar_link_1 = menu_bar_link_1;
+    }
+
+    public String getMenu_bar_link_2() {
+        return menu_bar_link_2;
+    }
+
+    public void setMenu_bar_link_2(String menu_bar_link_2) {
+        this.menu_bar_link_2 = menu_bar_link_2;
+    }
+
+    public String getMenu_bar_link_3() {
+        return menu_bar_link_3;
+    }
+
+    public void setMenu_bar_link_3(String menu_bar_link_3) {
+        this.menu_bar_link_3 = menu_bar_link_3;
+    }
+
+    public String getMenu_bar_link_4() {
+        return menu_bar_link_4;
+    }
+
+    public void setMenu_bar_link_4(String menu_bar_link_4) {
+        this.menu_bar_link_4 = menu_bar_link_4;
+    }
+
+    public String getMenu_bar_link_5() {
+        return menu_bar_link_5;
+    }
+
+    public void setMenu_bar_link_5(String menu_bar_link_5) {
+        this.menu_bar_link_5 = menu_bar_link_5;
+    }
+
+    public String getLogo_image() {
+        return logo_image;
+    }
+
+    public void setLogo_image(String logo_image) {
+        this.logo_image = logo_image;
+    }
+
+    public String getHero_title() {
+        return hero_title;
+    }
+
+    public void setHero_title(String hero_title) {
+        this.hero_title = hero_title;
+    }
+
+    public String getHero_text() {
+        return hero_text;
+    }
+
+    public void setHero_text(String hero_text) {
+        this.hero_text = hero_text;
+    }
+
+    public String getGeneration_card_title() {
+        return generation_card_title;
+    }
+
+    public void setGeneration_card_title(String generation_card_title) {
+        this.generation_card_title = generation_card_title;
+    }
+
+    public String getGeneration_card_text() {
+        return generation_card_text;
+    }
+
+    public void setGeneration_card_text(String generation_card_text) {
+        this.generation_card_text = generation_card_text;
+    }
+
+    public String getGeneration_card_image() {
+        return generation_card_image;
+    }
+
+    public void setGeneration_card_image(String generation_card_image) {
+        this.generation_card_image = generation_card_image;
+    }
+
+    public String getGeneration_title_1() {
+        return generation_title_1;
+    }
+
+    public void setGeneration_title_1(String generation_title_1) {
+        this.generation_title_1 = generation_title_1;
+    }
+
+    public String getGeneration_text_1() {
+        return generation_text_1;
+    }
+
+    public void setGeneration_text_1(String generation_text_1) {
+        this.generation_text_1 = generation_text_1;
+    }
+
+    public String getGeneration_title_2() {
+        return generation_title_2;
+    }
+
+    public void setGeneration_title_2(String generation_title_2) {
+        this.generation_title_2 = generation_title_2;
+    }
+
+    public String getGeneration_text_2() {
+        return generation_text_2;
+    }
+
+    public void setGeneration_text_2(String generation_text_2) {
+        this.generation_text_2 = generation_text_2;
+    }
+
+    public String getGeneration_title_3() {
+        return generation_title_3;
+    }
+
+    public void setGeneration_title_3(String generation_title_3) {
+        this.generation_title_3 = generation_title_3;
+    }
+
+    public String getGeneration_text_3() {
+        return generation_text_3;
+    }
+
+    public void setGeneration_text_3(String generation_text_3) {
+        this.generation_text_3 = generation_text_3;
+    }
+
+    public String getRoyal_title() {
+        return royal_title;
+    }
+
+    public void setRoyal_title(String royal_title) {
+        this.royal_title = royal_title;
+    }
+
+    public String getRoyal_text() {
+        return royal_text;
+    }
+
+    public void setRoyal_text(String royal_text) {
+        this.royal_text = royal_text;
+    }
+
+    public String getAnheuser_title() {
+        return anheuser_title;
+    }
+
+    public void setAnheuser_title(String anheuser_title) {
+        this.anheuser_title = anheuser_title;
+    }
+
+    public String getAnheuser_text() {
+        return anheuser_text;
+    }
+
+    public void setAnheuser_text(String anheuser_text) {
+        this.anheuser_text = anheuser_text;
+    }
+
+    public String getCarousel_title() {
+        return carousel_title;
+    }
+
+    public void setCarousel_title(String carousel_title) {
+        this.carousel_title = carousel_title;
+    }
+
+    public String getCarousel_image_1() {
+        return carousel_image_1;
+    }
+
+    public void setCarousel_image_1(String carousel_image_1) {
+        this.carousel_image_1 = carousel_image_1;
+    }
+
+    public String getCarousel_image_2() {
+        return carousel_image_2;
+    }
+
+    public void setCarousel_image_2(String carousel_image_2) {
+        this.carousel_image_2 = carousel_image_2;
+    }
+
+    public String getCarousel_image_3() {
+        return carousel_image_3;
+    }
+
+    public void setCarousel_image_3(String carousel_image_3) {
+        this.carousel_image_3 = carousel_image_3;
+    }
+
+    public String getCarousel_image_4() {
+        return carousel_image_4;
+    }
+
+    public void setCarousel_image_4(String carousel_image_4) {
+        this.carousel_image_4 = carousel_image_4;
+    }
+
+    public Features getFeatures() {
+        return features;
+    }
+
+    public void setFeatures(Features features) {
+        this.features = features;
+    }
+
+    public String getCopyright_text() {
+        return copyright_text;
+    }
+
+    public void setCopyright_text(String copyright_text) {
+        this.copyright_text = copyright_text;
+    }
+
+    public String getCopyright_link_1() {
+        return copyright_link_1;
+    }
+
+    public void setCopyright_link_1(String copyright_link_1) {
+        this.copyright_link_1 = copyright_link_1;
+    }
+
+    public String getCopyright_link_2() {
+        return copyright_link_2;
+    }
+
+    public void setCopyright_link_2(String copyright_link_2) {
+        this.copyright_link_2 = copyright_link_2;
+    }
+
+    public String getCopyright_link_3() {
+        return copyright_link_3;
+    }
+
+    public void setCopyright_link_3(String copyright_link_3) {
+        this.copyright_link_3 = copyright_link_3;
+    }
+
+    public String getDisabled() {
+        return disabled;
+    }
+
+    public void setDisabled(String disabled) {
+        this.disabled = disabled;
+    }
+
+    @Override
+    public String toString() {
+        return "Page{" + "content_type=" + content_type + ", placeInNav=" + placeInNav + ", display_template=" + display_template + ", merge_strategy=" + merge_strategy + ", file_name=" + file_name + ", internal_name=" + internal_name + ", orderDefault_f=" + orderDefault_f + ", header=" + header + ", content=" + content + ", description=" + description + ", objectGroupId=" + objectGroupId + ", objectId=" + objectId + ", folder_name=" + folder_name + ", createdDate=" + createdDate + ", createdDate_dt=" + createdDate_dt + ", lastModifiedDate=" + lastModifiedDate + ", lastModifiedDate_dt=" + lastModifiedDate_dt + ", menu_bar_link_1=" + menu_bar_link_1 + ", menu_bar_link_2=" + menu_bar_link_2 + ", menu_bar_link_3=" + menu_bar_link_3 + ", menu_bar_link_4=" + menu_bar_link_4 + ", menu_bar_link_5=" + menu_bar_link_5 + ", logo_image=" + logo_image + ", hero_title=" + hero_title + ", hero_text=" + hero_text + ", generation_card_title=" + generation_card_title + ", generation_card_text=" + generation_card_text + ", generation_card_image=" + generation_card_image + ", generation_title_1=" + generation_title_1 + ", generation_text_1=" + generation_text_1 + ", generation_title_2=" + generation_title_2 + ", generation_text_2=" + generation_text_2 + ", generation_title_3=" + generation_title_3 + ", generation_text_3=" + generation_text_3 + ", royal_title=" + royal_title + ", royal_text=" + royal_text + ", anheuser_title=" + anheuser_title + ", anheuser_text=" + anheuser_text + ", carousel_title=" + carousel_title + ", carousel_image_1=" + carousel_image_1 + ", carousel_image_2=" + carousel_image_2 + ", carousel_image_3=" + carousel_image_3 + ", carousel_image_4=" + carousel_image_4 + ", features=" + features + ", copyright_text=" + copyright_text + ", copyright_link_1=" + copyright_link_1 + ", copyright_link_2=" + copyright_link_2 + ", copyright_link_3=" + copyright_link_3 + ", disabled=" + disabled + '}';
+    }
+}
Index: src/main/java/com/syzegee/customer/events/domain/crafter/CustomerTemplate.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/crafter/CustomerTemplate.java b/src/main/java/com/syzegee/customer/events/domain/crafter/CustomerTemplate.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/crafter/CustomerTemplate.java	(date 1613491889000)
@@ -0,0 +1,19 @@
+package com.syzegee.customer.events.domain.crafter;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerTemplate {
+
+    private Long customerId;
+    private String customerTemplateId;
+}
Index: src/main/java/com/syzegee/customer/events/domain/crafter/CrafterGroups.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterGroups.java b/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterGroups.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterGroups.java	(date 1613491889000)
@@ -0,0 +1,34 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain.crafter;
+
+import java.util.ArrayList;
+import java.util.List;
+/**
+ * Sagar
+ */
+//@Data
+//@Builder
+public class CrafterGroups {
+     private List<String> ids= new ArrayList<>();
+    private List<String> usernames=  new ArrayList<>();
+
+    public List<String> getIds() {
+        return ids;
+    }
+
+    public void setIds(List<String> ids) {
+        this.ids = ids;
+    }
+
+    public List<String> getUsernames() {
+        return usernames;
+    }
+
+    public void setUsernames(List<String> usernames) {
+        this.usernames = usernames;
+    }
+}
Index: src/main/java/com/syzegee/customer/events/domain/crafter/CrafterLogin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterLogin.java b/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterLogin.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterLogin.java	(date 1613491889000)
@@ -0,0 +1,35 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain.crafter;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import java.io.Serializable;
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+@AllArgsConstructor
+public class CrafterLogin implements Serializable {
+
+    private String username;
+    private String password;
+    private String firstname;
+    private String customerId;
+    private String secureKey;
+    private String email;
+    private String lastname;
+    private String groups;
+
+    @Tolerate
+    public CrafterLogin(){}
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/crafter/CustomerTemplateEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/crafter/CustomerTemplateEvent.java b/src/main/java/com/syzegee/customer/events/domain/crafter/CustomerTemplateEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/crafter/CustomerTemplateEvent.java	(date 1613491889000)
@@ -0,0 +1,19 @@
+package com.syzegee.customer.events.domain.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+public class CustomerTemplateEvent {
+
+    private Long customerId;
+    private String customerTemplateId;
+    private String state;
+    private String correlationId;
+    private String customerRequestId;
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/crafter/CrafterUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterUser.java b/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterUser.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/crafter/CrafterUser.java	(date 1613491889000)
@@ -0,0 +1,32 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.domain.crafter;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import java.io.Serializable;
+
+/**
+ * Sagar
+ */
+@Data
+@Builder
+public class CrafterUser implements Serializable {
+
+    private String username;
+    private String password;
+    private String firstName;
+    private String lastName;
+    private String email;
+    private Boolean enabled;
+    private Boolean externallyManaged;
+
+    @Tolerate
+    public CrafterUser(){}
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/ruleengine/CustomerRule.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/ruleengine/CustomerRule.java b/src/main/java/com/syzegee/customer/events/domain/ruleengine/CustomerRule.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/ruleengine/CustomerRule.java	(date 1613491889000)
@@ -0,0 +1,34 @@
+package com.syzegee.customer.events.domain.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ * Ram Prasad
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerRule implements Serializable {
+
+    private long projectId;
+    private Long customerId;
+    private String projectCode;
+    private String projectName;
+    private String projectDesc;
+    private String defaultRuleName;
+    private Boolean isActive;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+    private RuleDetails ruleDetails;
+
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/ruleengine/CustomerRuleEvent.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/ruleengine/CustomerRuleEvent.java b/src/main/java/com/syzegee/customer/events/domain/ruleengine/CustomerRuleEvent.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/ruleengine/CustomerRuleEvent.java	(date 1613491889000)
@@ -0,0 +1,18 @@
+package com.syzegee.customer.events.domain.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class CustomerRuleEvent {
+    private Long customerId;
+    private Long projectId;
+    private String state;
+    private String correlationId;
+    private String customerRequestId;
+}
Index: src/main/java/com/syzegee/customer/events/domain/ruleengine/ProjectDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/ruleengine/ProjectDetail.java b/src/main/java/com/syzegee/customer/events/domain/ruleengine/ProjectDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/ruleengine/ProjectDetail.java	(date 1613491889000)
@@ -0,0 +1,18 @@
+package com.syzegee.customer.events.domain.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * Ram Prasad
+ */
+@Builder
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+public class ProjectDetail {
+    private long projectId;
+    private String projectName;
+}
Index: src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeRuleDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeRuleDetail.java b/src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeRuleDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeRuleDetail.java	(date 1613491889000)
@@ -0,0 +1,31 @@
+package com.syzegee.customer.events.domain.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ * Ram Prasad
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class SyzegeeRuleDetail implements Serializable {
+    private long ruleId;
+    private String ruleCode;
+    private String ruleName;
+    private String ruleDesc;
+    private String ruleType;
+    private Boolean isActive;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/ruleengine/RuleResponseDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/ruleengine/RuleResponseDetails.java b/src/main/java/com/syzegee/customer/events/domain/ruleengine/RuleResponseDetails.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/ruleengine/RuleResponseDetails.java	(date 1613491889000)
@@ -0,0 +1,22 @@
+package com.syzegee.customer.events.domain.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.Tolerate;
+
+/**
+ * Ram Prasad
+ */
+@Builder
+@Data
+@AllArgsConstructor
+public class RuleResponseDetails {
+    private long projectId;
+    private String correlationId;
+    private String message;
+
+    @Tolerate
+    public RuleResponseDetails(){}
+}
Index: src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeRuleDtlDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeRuleDtlDetail.java b/src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeRuleDtlDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeRuleDtlDetail.java	(date 1613491889000)
@@ -0,0 +1,31 @@
+package com.syzegee.customer.events.domain.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+/**
+ * Ram Prasad
+ */
+import java.io.Serializable;
+import java.util.Date;
+
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class SyzegeeRuleDtlDetail implements Serializable {
+
+    private long ruleDetailId;
+    private long ruleId;
+    private String ruleDetailCode;
+    private String ruleDetailValue;
+    private Boolean isActive;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeProjectRulesDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeProjectRulesDetail.java b/src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeProjectRulesDetail.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/ruleengine/SyzegeeProjectRulesDetail.java	(date 1613491889000)
@@ -0,0 +1,30 @@
+package com.syzegee.customer.events.domain.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ * Ram Prasad
+ */
+@Data
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+public class SyzegeeProjectRulesDetail implements Serializable {
+    private long projectRuleId;
+    private long projectId;
+    private long ruleId;
+    private String ruleValue;
+    private Boolean isActive;
+    private String createdBy;
+    private Date createdDate;
+    private String updatedBy;
+    private Date updatedDate;
+
+
+}
Index: src/main/java/com/syzegee/customer/events/domain/ruleengine/RuleDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/domain/ruleengine/RuleDetails.java b/src/main/java/com/syzegee/customer/events/domain/ruleengine/RuleDetails.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/domain/ruleengine/RuleDetails.java	(date 1613491889000)
@@ -0,0 +1,27 @@
+package com.syzegee.customer.events.domain.ruleengine;
+
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import lombok.experimental.Tolerate;
+
+import java.io.Serializable;
+import java.util.List;
+
+/**
+ * Ram Prasad
+ */
+@Data
+@Builder
+@AllArgsConstructor
+public class RuleDetails implements Serializable {
+
+    private ProjectDetail projectDetail;
+    private SyzegeeRuleDetail ruleNameDetails;
+    private List<SyzegeeRuleDtlDetail> ruleAttributeDetails;
+    private List<SyzegeeProjectRulesDetail> ruleValueDetails;
+    @Tolerate
+    public RuleDetails() {
+    }
+}
Index: src/main/java/com/syzegee/customer/events/entity/CustomerStatus.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/CustomerStatus.java b/src/main/java/com/syzegee/customer/events/entity/CustomerStatus.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/CustomerStatus.java	(date 1613491889000)
@@ -0,0 +1,79 @@
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import java.io.Serializable;
+
+@Entity
+@Data
+@Table(name = "customer_status")
+@Builder
+public class CustomerStatus  implements Serializable {
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "customer_status_id")
+    private Long customerStatusId;
+    @Basic(optional = false)
+    @Column(name = "customer_id")
+    private long customerId;
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Tolerate
+    public CustomerStatus(Long customerStatusId, long customerId, String correlationId, Boolean onBoardStatus, Boolean cmsSiteUpdateStatus, Boolean marketingAutomationStatus) {
+        this.customerStatusId = customerStatusId;
+        this.customerId = customerId;
+        this.correlationId = correlationId;
+        this.onBoardStatus = onBoardStatus;
+        this.cmsSiteUpdateStatus = cmsSiteUpdateStatus;
+        this.marketingAutomationStatus = marketingAutomationStatus;
+    }
+
+    @Column(name = "on_boarding_status")
+    private Boolean onBoardStatus;
+    @Column(name = "cms_site_update_status")
+    private Boolean cmsSiteUpdateStatus;
+    @Column(name = "marketing_automation_status")
+    private Boolean marketingAutomationStatus;
+    public CustomerStatus() {
+    }
+    @Tolerate
+    public CustomerStatus(Long customerStatusId) {
+        this.customerStatusId = customerStatusId;
+    }
+    @Tolerate
+    public CustomerStatus(Long customerStatusId, long customerId) {
+        this.customerStatusId = customerStatusId;
+        this.customerId = customerId;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 0;
+        hash += (customerStatusId != null ? customerStatusId.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        // TODO: Warning - this method won't work in the case the id fields are not set
+        if (!(object instanceof CustomerStatus)) {
+            return false;
+        }
+        CustomerStatus other = (CustomerStatus) object;
+        if ((this.customerStatusId == null && other.customerStatusId != null) || (this.customerStatusId != null && !this.customerStatusId.equals(other.customerStatusId))) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "com.syzegee.customer.service.entity.CustomerStatus[ customerStatusId=" + customerStatusId + " ]";
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/entity/Tier.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/Tier.java b/src/main/java/com/syzegee/customer/events/entity/Tier.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/Tier.java	(date 1613491889000)
@@ -0,0 +1,103 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlTransient;
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Entity
+@Data
+@Table(name = "tier")
+@XmlRootElement
+@Builder
+@NamedQueries({
+    @NamedQuery(name = "Tier.findAll", query = "SELECT t FROM Tier t")
+    , @NamedQuery(name = "Tier.findByTierId", query = "SELECT t FROM Tier t WHERE t.tierId = :tierId")
+    , @NamedQuery(name = "Tier.findByTierName", query = "SELECT t FROM Tier t WHERE t.tierName = :tierName")
+    , @NamedQuery(name = "Tier.findByIsActive", query = "SELECT t FROM Tier t WHERE t.isActive = :isActive")
+    , @NamedQuery(name = "Tier.findByCorrelationId", query = "SELECT t FROM Tier t WHERE t.correlationId = :correlationId")
+    , @NamedQuery(name = "Tier.findByState", query = "SELECT t FROM Tier t WHERE t.state = :state")
+    , @NamedQuery(name = "Tier.findByCreatedBy", query = "SELECT t FROM Tier t WHERE t.createdBy = :createdBy")
+    , @NamedQuery(name = "Tier.findByCreatedDate", query = "SELECT t FROM Tier t WHERE t.createdDate = :createdDate")
+    , @NamedQuery(name = "Tier.findByUpdatedBy", query = "SELECT t FROM Tier t WHERE t.updatedBy = :updatedBy")
+    , @NamedQuery(name = "Tier.findByUpdatedDate", query = "SELECT t FROM Tier t WHERE t.updatedDate = :updatedDate")})
+public class Tier implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "tier_id")
+    private Long tierId;
+    @Column(name = "tier_name")
+    private String tierName;
+    @Column(name = "is_active")
+    private Boolean isActive;
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Column(name = "state")
+    private String state;
+    @Column(name = "created_by")
+    private String createdBy;
+    @Column(name = "created_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date createdDate;
+    @Column(name = "updated_by")
+    private String updatedBy;
+    @Column(name = "updated_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date updatedDate;
+    @JoinColumn(name = "customer_id", referencedColumnName = "customer_id")
+    @ManyToOne(optional = false)
+    private Customer customerId;
+    @OneToMany(cascade = CascadeType.ALL, mappedBy = "tierId")
+    private Collection<Packages> packagesCollection;
+    @Tolerate
+    public Tier() {
+    }
+    @Tolerate
+    public Tier(Long tierId) {
+        this.tierId = tierId;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 0;
+        hash += (tierId != null ? tierId.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        // TODO: Warning - this method won't work in the case the id fields are not set
+        if (!(object instanceof Tier)) {
+            return false;
+        }
+        Tier other = (Tier) object;
+        if ((this.tierId == null && other.tierId != null) || (this.tierId != null && !this.tierId.equals(other.tierId))) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "com.syzegee.customer.events.entity.Tier[ tierId=" + tierId + " ]";
+    }
+    
+}
Index: src/main/java/com/syzegee/customer/events/entity/CustomerAddress.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/CustomerAddress.java b/src/main/java/com/syzegee/customer/events/entity/CustomerAddress.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/CustomerAddress.java	(date 1613491889000)
@@ -0,0 +1,117 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import javax.xml.bind.annotation.XmlRootElement;
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Entity
+@Data
+@Table(name = "customer_address")
+@XmlRootElement
+@Builder
+@NamedQueries({
+    @NamedQuery(name = "CustomerAddress.findAll", query = "SELECT c FROM CustomerAddress c")
+    , @NamedQuery(name = "CustomerAddress.findByCustomerAddressId", query = "SELECT c FROM CustomerAddress c WHERE c.customerAddressId = :customerAddressId")
+    , @NamedQuery(name = "CustomerAddress.findByState", query = "SELECT c FROM CustomerAddress c WHERE c.state = :state")
+    , @NamedQuery(name = "CustomerAddress.findByAddressLine1", query = "SELECT c FROM CustomerAddress c WHERE c.addressLine1 = :addressLine1")
+    , @NamedQuery(name = "CustomerAddress.findByAddressLine2", query = "SELECT c FROM CustomerAddress c WHERE c.addressLine2 = :addressLine2")
+    , @NamedQuery(name = "CustomerAddress.findByAddressLine3", query = "SELECT c FROM CustomerAddress c WHERE c.addressLine3 = :addressLine3")
+    , @NamedQuery(name = "CustomerAddress.findByCity", query = "SELECT c FROM CustomerAddress c WHERE c.city = :city")
+    , @NamedQuery(name = "CustomerAddress.findBySate", query = "SELECT c FROM CustomerAddress c WHERE c.sate = :sate")
+    , @NamedQuery(name = "CustomerAddress.findByZipCode", query = "SELECT c FROM CustomerAddress c WHERE c.zipCode = :zipCode")
+    , @NamedQuery(name = "CustomerAddress.findByCountryCode", query = "SELECT c FROM CustomerAddress c WHERE c.countryCode = :countryCode")
+    , @NamedQuery(name = "CustomerAddress.findByIsActive", query = "SELECT c FROM CustomerAddress c WHERE c.isActive = :isActive")
+    , @NamedQuery(name = "CustomerAddress.findByCorrelationId", query = "SELECT c FROM CustomerAddress c WHERE c.correlationId = :correlationId")
+    , @NamedQuery(name = "CustomerAddress.findByCreatedBy", query = "SELECT c FROM CustomerAddress c WHERE c.createdBy = :createdBy")
+    , @NamedQuery(name = "CustomerAddress.findByCreatedDate", query = "SELECT c FROM CustomerAddress c WHERE c.createdDate = :createdDate")
+    , @NamedQuery(name = "CustomerAddress.findByUpdatedBy", query = "SELECT c FROM CustomerAddress c WHERE c.updatedBy = :updatedBy")
+    , @NamedQuery(name = "CustomerAddress.findByUpdatedDate", query = "SELECT c FROM CustomerAddress c WHERE c.updatedDate = :updatedDate")})
+public class CustomerAddress implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "customer_address_id")
+    private Long customerAddressId;
+    @Column(name = "state")
+    private String state;
+    @Column(name = "address_line1")
+    private String addressLine1;
+    @Column(name = "address_line2")
+    private String addressLine2;
+    @Column(name = "address_line3")
+    private String addressLine3;
+    @Column(name = "city")
+    private String city;
+    @Column(name = "sate")
+    private String sate;
+    @Column(name = "zip_code")
+    private String zipCode;
+    @Column(name = "country_code")
+    private String countryCode;
+    @Column(name = "is_active")
+    private Boolean isActive;
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Column(name = "created_by")
+    private String createdBy;
+    @Column(name = "created_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date createdDate;
+    @Column(name = "updated_by")
+    private String updatedBy;
+    @Column(name = "updated_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date updatedDate;
+    @JoinColumn(name = "customer_id", referencedColumnName = "customer_id")
+    @ManyToOne(optional = false)
+    private Customer customerId;
+    @Tolerate
+    public CustomerAddress() {
+    }
+    @Tolerate
+    public CustomerAddress(Long customerAddressId) {
+        this.customerAddressId = customerAddressId;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 0;
+        hash += (customerAddressId != null ? customerAddressId.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        // TODO: Warning - this method won't work in the case the id fields are not set
+        if (!(object instanceof CustomerAddress)) {
+            return false;
+        }
+        CustomerAddress other = (CustomerAddress) object;
+        if ((this.customerAddressId == null && other.customerAddressId != null) || (this.customerAddressId != null && !this.customerAddressId.equals(other.customerAddressId))) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "com.syzegee.customer.events.entity.CustomerAddress[ customerAddressId=" + customerAddressId + " ]";
+    }
+    
+}
Index: src/main/java/com/syzegee/customer/events/entity/PackagesBenefit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/PackagesBenefit.java b/src/main/java/com/syzegee/customer/events/entity/PackagesBenefit.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/PackagesBenefit.java	(date 1613491889000)
@@ -0,0 +1,99 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import javax.xml.bind.annotation.XmlRootElement;
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Entity
+@Data
+@Table(name = "packages_benefit")
+@XmlRootElement
+@Builder
+@NamedQueries({
+    @NamedQuery(name = "PackagesBenefit.findAll", query = "SELECT p FROM PackagesBenefit p")
+    , @NamedQuery(name = "PackagesBenefit.findByPackageBenefitId", query = "SELECT p FROM PackagesBenefit p WHERE p.packageBenefitId = :packageBenefitId")
+    , @NamedQuery(name = "PackagesBenefit.findByIsActive", query = "SELECT p FROM PackagesBenefit p WHERE p.isActive = :isActive")
+    , @NamedQuery(name = "PackagesBenefit.findByCorrelationId", query = "SELECT p FROM PackagesBenefit p WHERE p.correlationId = :correlationId")
+    , @NamedQuery(name = "PackagesBenefit.findByState", query = "SELECT p FROM PackagesBenefit p WHERE p.state = :state")
+    , @NamedQuery(name = "PackagesBenefit.findByCreatedBy", query = "SELECT p FROM PackagesBenefit p WHERE p.createdBy = :createdBy")
+    , @NamedQuery(name = "PackagesBenefit.findByCreatedDate", query = "SELECT p FROM PackagesBenefit p WHERE p.createdDate = :createdDate")
+    , @NamedQuery(name = "PackagesBenefit.findByUpdatedBy", query = "SELECT p FROM PackagesBenefit p WHERE p.updatedBy = :updatedBy")
+    , @NamedQuery(name = "PackagesBenefit.findByUpdatedDate", query = "SELECT p FROM PackagesBenefit p WHERE p.updatedDate = :updatedDate")})
+public class PackagesBenefit implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "package_benefit_id")
+    private Long packageBenefitId;
+    @Column(name = "is_active")
+    private Boolean isActive;
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Column(name = "state")
+    private String state;
+    @Column(name = "created_by")
+    private String createdBy;
+    @Column(name = "created_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date createdDate;
+    @Column(name = "updated_by")
+    private String updatedBy;
+    @Column(name = "updated_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date updatedDate;
+    @JoinColumn(name = "customer_benefit_id", referencedColumnName = "customer_benefit_id")
+    @ManyToOne(optional = false)
+    private CustomerBenefit customerBenefitId;
+    @JoinColumn(name = "package_id", referencedColumnName = "package_id")
+    @ManyToOne(optional = false)
+    private Packages packageId;
+    @Tolerate
+    public PackagesBenefit() {
+    }
+    @Tolerate
+    public PackagesBenefit(Long packageBenefitId) {
+        this.packageBenefitId = packageBenefitId;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 0;
+        hash += (packageBenefitId != null ? packageBenefitId.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        // TODO: Warning - this method won't work in the case the id fields are not set
+        if (!(object instanceof PackagesBenefit)) {
+            return false;
+        }
+        PackagesBenefit other = (PackagesBenefit) object;
+        if ((this.packageBenefitId == null && other.packageBenefitId != null) || (this.packageBenefitId != null && !this.packageBenefitId.equals(other.packageBenefitId))) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "com.syzegee.customer.events.entity.PackagesBenefit[ packageBenefitId=" + packageBenefitId + " ]";
+    }
+    
+}
Index: src/main/java/com/syzegee/customer/events/entity/CustomerUser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/CustomerUser.java b/src/main/java/com/syzegee/customer/events/entity/CustomerUser.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/CustomerUser.java	(date 1613491889000)
@@ -0,0 +1,110 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlRootElement;
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ * @author Sagar
+ */
+@Entity
+@Data
+@Table(name = "customer_user")
+@XmlRootElement
+@Builder
+@NamedQueries({
+        @NamedQuery(name = "CustomerUser.findAll", query = "SELECT c FROM CustomerUser c")
+        , @NamedQuery(name = "CustomerUser.findByCustomerUserId", query = "SELECT c FROM CustomerUser c WHERE c.customerUserId = :customerUserId")
+        , @NamedQuery(name = "CustomerUser.findByEmailId", query = "SELECT c FROM CustomerUser c WHERE c.emailId = :emailId")
+        , @NamedQuery(name = "CustomerUser.findByFirstName", query = "SELECT c FROM CustomerUser c WHERE c.firstName = :firstName")
+        , @NamedQuery(name = "CustomerUser.findByLastName", query = "SELECT c FROM CustomerUser c WHERE c.lastName = :lastName")
+        , @NamedQuery(name = "CustomerUser.findByIsActive", query = "SELECT c FROM CustomerUser c WHERE c.isActive = :isActive")
+        , @NamedQuery(name = "CustomerUser.findByCorrelationId", query = "SELECT c FROM CustomerUser c WHERE c.correlationId = :correlationId")
+        , @NamedQuery(name = "CustomerUser.findByCreatedBy", query = "SELECT c FROM CustomerUser c WHERE c.createdBy = :createdBy")
+        , @NamedQuery(name = "CustomerUser.findByCreatedDate", query = "SELECT c FROM CustomerUser c WHERE c.createdDate = :createdDate")
+        , @NamedQuery(name = "CustomerUser.findByUpdatedBy", query = "SELECT c FROM CustomerUser c WHERE c.updatedBy = :updatedBy")
+        , @NamedQuery(name = "CustomerUser.findByUpdatedDate", query = "SELECT c FROM CustomerUser c WHERE c.updatedDate = :updatedDate")})
+public class CustomerUser implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "customer_user_id")
+    private Long customerUserId;
+    @Size(max = 120)
+    @Column(name = "email_id")
+    private String emailId;
+    @Size(max = 120)
+    @Column(name = "first_name")
+    private String firstName;
+    @Size(max = 120)
+    @Column(name = "last_name")
+    private String lastName;
+    @Column(name = "is_active")
+    private Boolean isActive;
+    @Size(max = 120)
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Size(max = 120)
+    @Column(name = "created_by")
+    private String createdBy;
+    @Column(name = "created_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date createdDate;
+    @Size(max = 120)
+    @Column(name = "updated_by")
+    private String updatedBy;
+    @Column(name = "updated_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date updatedDate;
+    @JoinColumn(name = "customer_id", referencedColumnName = "customer_id")
+    @ManyToOne(optional = false)
+    private Customer customerId;
+
+    @Tolerate
+    public CustomerUser() {
+    }
+
+    @Tolerate
+    public CustomerUser(Long customerUserId) {
+        this.customerUserId = customerUserId;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 0;
+        hash += (customerUserId != null ? customerUserId.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        // TODO: Warning - this method won't work in the case the id fields are not set
+        if (!(object instanceof CustomerUser)) {
+            return false;
+        }
+        CustomerUser other = (CustomerUser) object;
+        if ((this.customerUserId == null && other.customerUserId != null) || (this.customerUserId != null && !this.customerUserId.equals(other.customerUserId))) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "com.syzegee.customer.events.entity.CustomerUser[ customerUserId=" + customerUserId + " ]";
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/entity/Organization.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/Organization.java b/src/main/java/com/syzegee/customer/events/entity/Organization.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/Organization.java	(date 1613491889000)
@@ -0,0 +1,121 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlTransient;
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.Date;
+
+/**
+ * @author Sagar
+ */
+@Entity
+@Data
+@Table(name = "organization")
+@XmlRootElement
+@Builder
+@NamedQueries({
+        @NamedQuery(name = "Organization.findAll", query = "SELECT o FROM Organization o")
+        , @NamedQuery(name = "Organization.findByOrganizationId", query = "SELECT o FROM Organization o WHERE o.organizationId = :organizationId")
+        , @NamedQuery(name = "Organization.findByOrganizationName", query = "SELECT o FROM Organization o WHERE o.organizationName = :organizationName")
+        , @NamedQuery(name = "Organization.findByOrganizationDesc", query = "SELECT o FROM Organization o WHERE o.organizationDesc = :organizationDesc")
+        , @NamedQuery(name = "Organization.findByOrganizationSize", query = "SELECT o FROM Organization o WHERE o.organizationSize = :organizationSize")
+        , @NamedQuery(name = "Organization.findByIsActive", query = "SELECT o FROM Organization o WHERE o.isActive = :isActive")
+        , @NamedQuery(name = "Organization.findByCorrelationId", query = "SELECT o FROM Organization o WHERE o.correlationId = :correlationId")
+        , @NamedQuery(name = "Organization.findByState", query = "SELECT o FROM Organization o WHERE o.state = :state")
+        , @NamedQuery(name = "Organization.findByCreatedBy", query = "SELECT o FROM Organization o WHERE o.createdBy = :createdBy")
+        , @NamedQuery(name = "Organization.findByCreatedDate", query = "SELECT o FROM Organization o WHERE o.createdDate = :createdDate")
+        , @NamedQuery(name = "Organization.findByUpdatedBy", query = "SELECT o FROM Organization o WHERE o.updatedBy = :updatedBy")
+        , @NamedQuery(name = "Organization.findByUpdatedDate", query = "SELECT o FROM Organization o WHERE o.updatedDate = :updatedDate")})
+public class Organization implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "organization_id")
+    private Long organizationId;
+    @Size(max = 120)
+    @Column(name = "organization_name")
+    private String organizationName;
+    @Size(max = 120)
+    @Column(name = "organization_desc")
+    private String organizationDesc;
+    @Size(max = 120)
+    @Column(name = "organization_size")
+    private String organizationSize;
+    @Column(name = "is_active")
+    private Boolean isActive;
+    @Size(max = 120)
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Size(max = 120)
+    @Column(name = "state")
+    private String state;
+    @Size(max = 120)
+    @Column(name = "created_by")
+    private String createdBy;
+    @Column(name = "created_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date createdDate;
+    @Size(max = 120)
+    @Column(name = "updated_by")
+    private String updatedBy;
+    @Column(name = "updated_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date updatedDate;
+    @OneToMany(cascade = CascadeType.ALL, mappedBy = "organizationId")
+    private Collection<Customer> customerCollection;
+
+    @Tolerate
+    public Organization() {
+    }
+
+    @Tolerate
+    public Organization(Long organizationId) {
+        this.organizationId = organizationId;
+    }
+
+    @Tolerate
+    public Organization(Long organizationId, String organizationSize) {
+        this.organizationId = organizationId;
+        this.organizationSize = organizationSize;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 0;
+        hash += (organizationId != null ? organizationId.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        // TODO: Warning - this method won't work in the case the id fields are not set
+        if (!(object instanceof Organization)) {
+            return false;
+        }
+        Organization other = (Organization) object;
+        if ((this.organizationId == null && other.organizationId != null) || (this.organizationId != null && !this.organizationId.equals(other.organizationId))) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "com.syzegee.customer.events.entity.Organization[ organizationId=" + organizationId + " ]";
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/entity/CustomerBenefit.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/CustomerBenefit.java b/src/main/java/com/syzegee/customer/events/entity/CustomerBenefit.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/CustomerBenefit.java	(date 1613491889000)
@@ -0,0 +1,118 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlTransient;
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Entity
+@Data
+@Table(name = "customer_benefit")
+@XmlRootElement
+@Builder
+@NamedQueries({
+    @NamedQuery(name = "CustomerBenefit.findAll", query = "SELECT c FROM CustomerBenefit c")
+    , @NamedQuery(name = "CustomerBenefit.findByCustomerBenefitId", query = "SELECT c FROM CustomerBenefit c WHERE c.customerBenefitId = :customerBenefitId")
+    , @NamedQuery(name = "CustomerBenefit.findByVendorId", query = "SELECT c FROM CustomerBenefit c WHERE c.vendorId = :vendorId")
+    , @NamedQuery(name = "CustomerBenefit.findByBenefitName", query = "SELECT c FROM CustomerBenefit c WHERE c.benefitName = :benefitName")
+    ,@NamedQuery(name = "CustomerBenefit.findByState", query = "SELECT c FROM CustomerBenefit c WHERE c.state = :state")
+    , @NamedQuery(name = "CustomerBenefit.findByCorrelationId", query = "SELECT c FROM CustomerBenefit c WHERE c.correlationId = :correlationId")
+    , @NamedQuery(name = "CustomerBenefit.findByIsActive", query = "SELECT c FROM CustomerBenefit c WHERE c.isActive = :isActive")
+    , @NamedQuery(name = "CustomerBenefit.findByCreatedBy", query = "SELECT c FROM CustomerBenefit c WHERE c.createdBy = :createdBy")
+    , @NamedQuery(name = "CustomerBenefit.findByCreatedDate", query = "SELECT c FROM CustomerBenefit c WHERE c.createdDate = :createdDate")
+    , @NamedQuery(name = "CustomerBenefit.findByUpdatedBy", query = "SELECT c FROM CustomerBenefit c WHERE c.updatedBy = :updatedBy")
+    , @NamedQuery(name = "CustomerBenefit.findByUpdatedDate", query = "SELECT c FROM CustomerBenefit c WHERE c.updatedDate = :updatedDate")})
+public class CustomerBenefit implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "customer_benefit_id")
+    private Long customerBenefitId;
+    @Basic(optional = false)
+    @Column(name = "vendor_id")
+    private long vendorId;
+    @Column(name = "benefit_name")
+    private String benefitName;
+    @Column(name = "state")
+    private String state;
+    @Column(name = "image_url")
+    private String imageUrl;
+    @Column(name = "redirect_url")
+    private String redirectUrl;
+    @Column(name = "description")
+    private String description;
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Column(name = "is_active")
+    private Boolean isActive;
+    @Column(name = "created_by")
+    private String createdBy;
+    @Column(name = "created_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date createdDate;
+    @Column(name = "updated_by")
+    private String updatedBy;
+    @Column(name = "updated_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date updatedDate;
+    @JoinColumn(name = "customer_id", referencedColumnName = "customer_id")
+    @ManyToOne(optional = false)
+    private Customer customerId;
+    @OneToMany(cascade = CascadeType.ALL, mappedBy = "customerBenefitId")
+    private Collection<PackagesBenefit> packagesBenefitCollection;
+    @Tolerate
+    public CustomerBenefit() {
+    }
+    @Tolerate
+    public CustomerBenefit(Long customerBenefitId) {
+        this.customerBenefitId = customerBenefitId;
+    }
+    @Tolerate
+    public CustomerBenefit(Long customerBenefitId, long vendorId) {
+        this.customerBenefitId = customerBenefitId;
+        this.vendorId = vendorId;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 0;
+        hash += (customerBenefitId != null ? customerBenefitId.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        // TODO: Warning - this method won't work in the case the id fields are not set
+        if (!(object instanceof CustomerBenefit)) {
+            return false;
+        }
+        CustomerBenefit other = (CustomerBenefit) object;
+        if ((this.customerBenefitId == null && other.customerBenefitId != null) || (this.customerBenefitId != null && !this.customerBenefitId.equals(other.customerBenefitId))) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "com.syzegee.customer.events.entity.CustomerBenefit[ customerBenefitId=" + customerBenefitId + " ]";
+    }
+    
+}
Index: src/main/java/com/syzegee/customer/events/entity/DomainDetails.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/DomainDetails.java b/src/main/java/com/syzegee/customer/events/entity/DomainDetails.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/DomainDetails.java	(date 1613491889000)
@@ -0,0 +1,128 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import javax.xml.bind.annotation.XmlRootElement;
+import java.io.Serializable;
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Entity
+@Data
+@Table(name = "domain_details")
+@XmlRootElement
+@Builder
+@NamedQueries({
+    @NamedQuery(name = "DomainDetails.findAll", query = "SELECT d FROM DomainDetails d")
+    , @NamedQuery(name = "DomainDetails.findBySiteId", query = "SELECT d FROM DomainDetails d WHERE d.siteId = :siteId")
+    , @NamedQuery(name = "DomainDetails.findBySiteCode", query = "SELECT d FROM DomainDetails d WHERE d.siteCode = :siteCode")
+    , @NamedQuery(name = "DomainDetails.findByTemplateCode", query = "SELECT d FROM DomainDetails d WHERE d.templateCode = :templateCode")
+    , @NamedQuery(name = "DomainDetails.findBySiteName", query = "SELECT d FROM DomainDetails d WHERE d.siteName = :siteName")
+    , @NamedQuery(name = "DomainDetails.findBySiteDesc", query = "SELECT d FROM DomainDetails d WHERE d.siteDesc = :siteDesc")
+     ,@NamedQuery(name = "DomainDetails.findBySiteType", query = "SELECT d FROM DomainDetails d WHERE d.siteType = :siteType")
+    , @NamedQuery(name = "DomainDetails.findByDomainName", query = "SELECT d FROM DomainDetails d WHERE d.domainName = :domainName")
+    , @NamedQuery(name = "DomainDetails.findByLogo", query = "SELECT d FROM DomainDetails d WHERE d.logo = :logo")
+    , @NamedQuery(name = "DomainDetails.findByTagline", query = "SELECT d FROM DomainDetails d WHERE d.tagline = :tagline")
+    , @NamedQuery(name = "DomainDetails.findByIsActive", query = "SELECT d FROM DomainDetails d WHERE d.isActive = :isActive")
+    , @NamedQuery(name = "DomainDetails.findByCorrelationId", query = "SELECT d FROM DomainDetails d WHERE d.correlationId = :correlationId")
+    , @NamedQuery(name = "DomainDetails.findByState", query = "SELECT d FROM DomainDetails d WHERE d.state = :state")
+    , @NamedQuery(name = "DomainDetails.findByCreatedBy", query = "SELECT d FROM DomainDetails d WHERE d.createdBy = :createdBy")
+    , @NamedQuery(name = "DomainDetails.findByCreatedDate", query = "SELECT d FROM DomainDetails d WHERE d.createdDate = :createdDate")
+    , @NamedQuery(name = "DomainDetails.findByUpdatedBy", query = "SELECT d FROM DomainDetails d WHERE d.updatedBy = :updatedBy")
+    , @NamedQuery(name = "DomainDetails.findByUpdatedDate", query = "SELECT d FROM DomainDetails d WHERE d.updatedDate = :updatedDate")})
+public class DomainDetails implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "site_id")
+    private Long siteId;
+    @Basic(optional = false)
+    @Column(name = "site_code")
+    private String siteCode;
+    @Basic(optional = false)
+    @Column(name = "template_code")
+    private String templateCode;
+    @Column(name = "site_name")
+    private String siteName;
+    @Column(name = "site_desc")
+    private String siteDesc;
+    @Column(name = "site_type")
+    private String siteType;
+    @Column(name = "domain_name")
+    private String domainName;
+    @Column(name = "logo")
+    private String logo;
+    @Column(name = "tagline")
+    private String tagline;
+    @Column(name = "is_active")
+    private Boolean isActive;
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Column(name = "state")
+    private String state;
+    @Column(name = "created_by")
+    private String createdBy;
+    @Column(name = "created_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date createdDate;
+    @Column(name = "updated_by")
+    private String updatedBy;
+    @Column(name = "updated_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date updatedDate;
+    @JoinColumn(name = "customer_id", referencedColumnName = "customer_id")
+    @ManyToOne(optional = false)
+    private Customer customerId;
+    @Tolerate
+    public DomainDetails() {
+    }
+    @Tolerate
+    public DomainDetails(Long siteId) {
+        this.siteId = siteId;
+    }
+    @Tolerate
+    public DomainDetails(Long siteId, String siteCode, String templateCode) {
+        this.siteId = siteId;
+        this.siteCode = siteCode;
+        this.templateCode = templateCode;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 0;
+        hash += (siteId != null ? siteId.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        // TODO: Warning - this method won't work in the case the id fields are not set
+        if (!(object instanceof DomainDetails)) {
+            return false;
+        }
+        DomainDetails other = (DomainDetails) object;
+        if ((this.siteId == null && other.siteId != null) || (this.siteId != null && !this.siteId.equals(other.siteId))) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "com.syzegee.customer.events.entity.DomainDetails[ siteId=" + siteId + " ]";
+    }
+    
+}
Index: src/main/java/com/syzegee/customer/events/entity/Customer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/Customer.java b/src/main/java/com/syzegee/customer/events/entity/Customer.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/Customer.java	(date 1613491889000)
@@ -0,0 +1,168 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import javax.validation.constraints.NotNull;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlTransient;
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.Date;
+
+/**
+ * @author Sagar
+ */
+@Entity
+@Data
+@Table(name = "customer")
+@XmlRootElement
+@Builder()
+@NamedQueries({
+        @NamedQuery(name = "Customer.findAll", query = "SELECT c FROM Customer c")
+        , @NamedQuery(name = "Customer.findByCustomerId", query = "SELECT c FROM Customer c WHERE c.customerId = :customerId")
+        , @NamedQuery(name = "Customer.findByUserId", query = "SELECT c FROM Customer c WHERE c.userId = :userId")
+        , @NamedQuery(name = "Customer.findByState", query = "SELECT c FROM Customer c WHERE c.state = :state")
+        , @NamedQuery(name = "Customer.findByBusinessName", query = "SELECT c FROM Customer c WHERE c.businessName = :businessName")
+        , @NamedQuery(name = "Customer.findByBusinessEmail", query = "SELECT c FROM Customer c WHERE c.businessEmail = :businessEmail")
+        , @NamedQuery(name = "Customer.findByBusinessType", query = "SELECT c FROM Customer c WHERE c.businessType = :businessType")
+        , @NamedQuery(name = "Customer.findByBusinessCategory", query = "SELECT c FROM Customer c WHERE c.businessCategory = :businessCategory")
+        , @NamedQuery(name = "Customer.findByRegion", query = "SELECT c FROM Customer c WHERE c.region = :region")
+        , @NamedQuery(name = "Customer.findByPhone", query = "SELECT c FROM Customer c WHERE c.phone = :phone")
+        , @NamedQuery(name = "Customer.findByCurrency", query = "SELECT c FROM Customer c WHERE c.currency = :currency")
+        , @NamedQuery(name = "Customer.findByIsActive", query = "SELECT c FROM Customer c WHERE c.isActive = :isActive")
+        , @NamedQuery(name = "Customer.findByActivationStatus", query = "SELECT c FROM Customer c WHERE c.activationStatus = :activationStatus")
+        , @NamedQuery(name = "Customer.findByActivationCode", query = "SELECT c FROM Customer c WHERE c.activationCode = :activationCode")
+        , @NamedQuery(name = "Customer.findByCorrelationId", query = "SELECT c FROM Customer c WHERE c.correlationId = :correlationId")
+        , @NamedQuery(name = "Customer.findByCreatedBy", query = "SELECT c FROM Customer c WHERE c.createdBy = :createdBy")
+        , @NamedQuery(name = "Customer.findByCreatedDate", query = "SELECT c FROM Customer c WHERE c.createdDate = :createdDate")
+        , @NamedQuery(name = "Customer.findByUpdatedBy", query = "SELECT c FROM Customer c WHERE c.updatedBy = :updatedBy")
+        , @NamedQuery(name = "Customer.findByUpdatedDate", query = "SELECT c FROM Customer c WHERE c.updatedDate = :updatedDate")})
+public class Customer implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "customer_id")
+    private Long customerId;
+    @Basic(optional = false)
+    @Column(name = "user_id")
+    private Long userId;
+    @Size(max = 120)
+    @Column(name = "state")
+    private String state;
+    @Size(max = 1024)
+    @Column(name = "business_name")
+    private String businessName;
+    @Size(max = 1024)
+    @Column(name = "business_email")
+    private String businessEmail;
+    @Size(max = 120)
+    @Column(name = "business_type")
+    private String businessType;
+    @Size(max = 120)
+    @Column(name = "business_category")
+    private String businessCategory;
+    @Size(max = 120)
+    @Column(name = "region")
+    private String region;
+    // @Pattern(regexp="^\\(?(\\d{3})\\)?[- ]?(\\d{3})[- ]?(\\d{4})$", message="Invalid phone/fax format, should be as xxx-xxx-xxxx")//if the field contains phone or fax number consider using this annotation to enforce field validation
+    @Size(max = 120)
+    @Column(name = "phone")
+    private String phone;
+    @Size(max = 120)
+    @Column(name = "currency")
+    private String currency;
+    @Column(name = "is_active")
+    private Boolean isActive;
+    @Column(name = "activation_status")
+    private Boolean activationStatus;
+    @Basic(optional = false)
+    @NotNull
+    @Size(min = 1, max = 120)
+    @Column(name = "activation_code")
+    private String activationCode;
+    @Size(max = 120)
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Size(max = 120)
+    @Column(name = "created_by")
+    private String createdBy;
+    @Column(name = "created_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date createdDate;
+    @Size(max = 120)
+    @Column(name = "updated_by")
+    private String updatedBy;
+    @Column(name = "updated_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date updatedDate;
+    @Column(name = "communication_preferences")
+    private String communicationPreferences;
+    @OneToMany(cascade = CascadeType.ALL, mappedBy = "customerId")
+    private Collection<CustomerAddress> customerAddressCollection;
+    @OneToMany(cascade = CascadeType.ALL, mappedBy = "customerId")
+    private Collection<CustomerBenefit> customerBenefitCollection;
+    @OneToMany(cascade = CascadeType.ALL, mappedBy = "customerId")
+    private Collection<Tier> tierCollection;
+    @OneToMany(cascade = CascadeType.ALL, mappedBy = "customerId")
+    private Collection<CustomerUser> customerUserCollection;
+    @OneToMany(cascade = CascadeType.ALL, mappedBy = "customerId")
+    private Collection<DomainDetails> domainDetailsCollection;
+    @OneToMany(cascade = CascadeType.ALL, mappedBy = "customerId")
+    private Collection<Packages> packagesCollection;
+    @JoinColumn(name = "organization_id", referencedColumnName = "organization_id")
+    @ManyToOne(optional = false)
+    private Organization organizationId;
+
+    @Tolerate
+    public Customer() {
+    }
+
+    @Tolerate
+    public Customer(Long customerId) {
+        this.customerId = customerId;
+    }
+
+    @Tolerate
+    public Customer(Long customerId, Long userId, String activationCode) {
+        this.customerId = customerId;
+        this.userId = userId;
+        this.activationCode = activationCode;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 0;
+        hash += (customerId != null ? customerId.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        // TODO: Warning - this method won't work in the case the id fields are not set
+        if (!(object instanceof Customer)) {
+            return false;
+        }
+        Customer other = (Customer) object;
+        if ((this.customerId == null && other.customerId != null) || (this.customerId != null && !this.customerId.equals(other.customerId))) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "com.syzegee.customer.events.entity.Customer[ customerId=" + customerId + " ]";
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/entity/SolicitationPackage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/SolicitationPackage.java b/src/main/java/com/syzegee/customer/events/entity/SolicitationPackage.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/SolicitationPackage.java	(date 1613491889000)
@@ -0,0 +1,59 @@
+package com.syzegee.customer.events.entity;
+
+import com.fasterxml.jackson.annotation.JsonFormat;
+import lombok.AllArgsConstructor;
+import lombok.Builder;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import javax.persistence.*;
+import javax.validation.constraints.Size;
+import java.util.Date;
+
+@Data
+@Entity
+@Builder
+@NoArgsConstructor
+@AllArgsConstructor
+@Table(name = "solicitation_package")
+public class SolicitationPackage {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Column(name = "solicitation_package_id")
+    private Long solicitationPackageId;
+    @Basic(optional = false)
+    @Column(name = "solicitation_id")
+    private Integer solicitationId;
+    @Column(name = "solicitation_name")
+    private String solicitationName;
+    @Column(name = "solicitation_description")
+    private String solicitationDescription;
+    @JoinColumn(name = "customer_id", referencedColumnName = "customer_id")
+    @ManyToOne(optional = false)
+    private Customer customer;
+    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
+    @Column(name = "start_from")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date startFrom;
+    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
+    @Column(name = "end_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date endDate;
+    @Column(name = "is_active")
+    private Boolean isActive;
+    @Size(max = 100)
+    @Column(name = "created_by")
+    private String createdBy;
+    @Column(name = "created_at")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date createdDate;
+    @Size(max = 100)
+    @Column(name = "updated_by", insertable = false, updatable = false)
+    private String updatedBy;
+    @Column(name = "updated_at")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date updatedDate;
+    @JoinColumn(name = "package_id", referencedColumnName = "package_id")
+    @ManyToOne(optional = false)
+    private Packages packages;
+}
Index: src/main/java/com/syzegee/customer/events/entity/CustomerInbox.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/CustomerInbox.java b/src/main/java/com/syzegee/customer/events/entity/CustomerInbox.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/CustomerInbox.java	(date 1613491889000)
@@ -0,0 +1,90 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import javax.xml.bind.annotation.XmlRootElement;
+import java.io.Serializable;
+
+/**
+ *
+ * @author Sagar
+ */
+@Entity
+@Data
+@Table(name = "customer_inbox")
+@XmlRootElement
+@Builder
+@NamedQueries({
+    @NamedQuery(name = "CustomerInbox.findAll", query = "SELECT c FROM CustomerInbox c")
+    , @NamedQuery(name = "CustomerInbox.findByCustomerInboxId", query = "SELECT c FROM CustomerInbox c WHERE c.customerInboxId = :customerInboxId")
+    , @NamedQuery(name = "CustomerInbox.findByCustomerId", query = "SELECT c FROM CustomerInbox c WHERE c.customerId = :customerId")
+    , @NamedQuery(name = "CustomerInbox.findByCorrelationId", query = "SELECT c FROM CustomerInbox c WHERE c.correlationId = :correlationId")
+    , @NamedQuery(name = "CustomerInbox.findByCustomerRequestId", query = "SELECT c FROM CustomerInbox c WHERE c.customerRequestId = :customerRequestId")
+    , @NamedQuery(name = "CustomerInbox.findByStatus", query = "SELECT c FROM CustomerInbox c WHERE c.status = :status")
+    , @NamedQuery(name = "CustomerInbox.findByDetails", query = "SELECT c FROM CustomerInbox c WHERE c.details = :details")})
+public class CustomerInbox implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "customer_inbox_id")
+    private Long customerInboxId;
+    @Basic(optional = false)
+    @Column(name = "customer_id")
+    private long customerId;
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Column(name = "customer_request_id")
+    private String customerRequestId;
+    @Column(name = "status")
+    private String status;
+    @Column(name = "details")
+    private String details;
+    @Tolerate
+    public CustomerInbox() {
+    }
+    @Tolerate
+    public CustomerInbox(Long customerInboxId) {
+        this.customerInboxId = customerInboxId;
+    }
+    @Tolerate
+    public CustomerInbox(Long customerInboxId, long customerId) {
+        this.customerInboxId = customerInboxId;
+        this.customerId = customerId;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 0;
+        hash += (customerInboxId != null ? customerInboxId.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        // TODO: Warning - this method won't work in the case the id fields are not set
+        if (!(object instanceof CustomerInbox)) {
+            return false;
+        }
+        CustomerInbox other = (CustomerInbox) object;
+        if ((this.customerInboxId == null && other.customerInboxId != null) || (this.customerInboxId != null && !this.customerInboxId.equals(other.customerInboxId))) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "com.syzegee.customer.events.entity.CustomerInbox[ customerInboxId=" + customerInboxId + " ]";
+    }
+    
+}
Index: src/main/java/com/syzegee/customer/events/entity/Packages.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/Packages.java b/src/main/java/com/syzegee/customer/events/entity/Packages.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/Packages.java	(date 1613491889000)
@@ -0,0 +1,106 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import javax.xml.bind.annotation.XmlRootElement;
+import javax.xml.bind.annotation.XmlTransient;
+import java.io.Serializable;
+import java.util.Collection;
+import java.util.Date;
+
+/**
+ *
+ * @author Sagar
+ */
+@Entity
+@Data
+@Table(name = "packages")
+@XmlRootElement
+@Builder
+@NamedQueries({
+    @NamedQuery(name = "Packages.findAll", query = "SELECT p FROM Packages p")
+    , @NamedQuery(name = "Packages.findByPackageId", query = "SELECT p FROM Packages p WHERE p.packageId = :packageId")
+    , @NamedQuery(name = "Packages.findByPackageName", query = "SELECT p FROM Packages p WHERE p.packageName = :packageName")
+    , @NamedQuery(name = "Packages.findByIsActive", query = "SELECT p FROM Packages p WHERE p.isActive = :isActive")
+    , @NamedQuery(name = "Packages.findByCorrelationId", query = "SELECT p FROM Packages p WHERE p.correlationId = :correlationId")
+    , @NamedQuery(name = "Packages.findByState", query = "SELECT p FROM Packages p WHERE p.state = :state")
+    , @NamedQuery(name = "Packages.findByCreatedBy", query = "SELECT p FROM Packages p WHERE p.createdBy = :createdBy")
+    , @NamedQuery(name = "Packages.findByCreatedDate", query = "SELECT p FROM Packages p WHERE p.createdDate = :createdDate")
+    , @NamedQuery(name = "Packages.findByUpdatedBy", query = "SELECT p FROM Packages p WHERE p.updatedBy = :updatedBy")
+    , @NamedQuery(name = "Packages.findByUpdatedDate", query = "SELECT p FROM Packages p WHERE p.updatedDate = :updatedDate")})
+public class Packages implements Serializable {
+
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "package_id")
+    private Long packageId;
+    @Column(name = "package_name")
+    private String packageName;
+    @Column(name = "is_active")
+    private Boolean isActive;
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Column(name = "state")
+    private String state;
+    @Column(name = "created_by")
+    private String createdBy;
+    @Column(name = "created_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date createdDate;
+    @Column(name = "updated_by")
+    private String updatedBy;
+    @Column(name = "updated_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date updatedDate;
+    @OneToMany(cascade = CascadeType.ALL, mappedBy = "packageId")
+    private Collection<PackagesBenefit> packagesBenefitCollection;
+    @JoinColumn(name = "customer_id", referencedColumnName = "customer_id")
+    @ManyToOne(optional = false)
+    private Customer customerId;
+    @JoinColumn(name = "tier_id", referencedColumnName = "tier_id")
+    @ManyToOne(optional = false)
+    private Tier tierId;
+    @Tolerate
+    public Packages() {
+    }
+    @Tolerate
+    public Packages(Long packageId) {
+        this.packageId = packageId;
+    }
+
+    @Override
+    public int hashCode() {
+        int hash = 0;
+        hash += (packageId != null ? packageId.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object object) {
+        // TODO: Warning - this method won't work in the case the id fields are not set
+        if (!(object instanceof Packages)) {
+            return false;
+        }
+        Packages other = (Packages) object;
+        if ((this.packageId == null && other.packageId != null) || (this.packageId != null && !this.packageId.equals(other.packageId))) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        return "com.syzegee.customer.events.entity.Packages[ packageId=" + packageId + " ]";
+    }
+    
+}
Index: src/main/java/com/syzegee/customer/events/adapter/CustomerConnectors.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/CustomerConnectors.java b/src/main/java/com/syzegee/customer/events/adapter/CustomerConnectors.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/CustomerConnectors.java	(date 1613491889000)
@@ -0,0 +1,878 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.model.*;
+import com.syzegee.customer.events.domain.crafter.CustomerTemplateEvent;
+import com.syzegee.customer.events.domain.ruleengine.CustomerRuleEvent;
+import com.syzegee.customer.events.entity.*;
+import com.syzegee.customer.events.exception.CustomerRuntimeException;
+import com.syzegee.customer.events.repository.*;
+import com.syzegee.customer.events.util.CorrelationIdUtil;
+import com.syzegee.customer.events.util.JsonUtil;
+import com.syzegee.customer.events.validator.CustomerValidator;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Component;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.*;
+
+import static com.syzegee.customer.events.constants.Constants.CUSTOMER_CREATED;
+import static com.syzegee.customer.events.constants.Constants.CUSTOMER_UPDATED;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class CustomerConnectors {
+
+    @Autowired
+    private CustomerRepository customerRepository;
+    @Autowired
+    private OrganizationRepository organizationRepository;
+    @Autowired
+    private CustomerAddressRepository addressRepository;
+    @Autowired
+    private CustomerUserRepository userRepository;
+    @Autowired
+    private TierRepository tierRepository;
+    @Autowired
+    private PackageRepository packageRepository;
+    @Autowired
+    private BenefitRepository benefitRepository;
+    @Autowired
+    private PackageBenefitsRepository packageBenefitsRepository;
+    @Autowired
+    private SolicitationPackageRepository solicitationPackageRepository;
+    @Autowired
+    private CustomerInboxRepository customerInboxRepository;
+    @Autowired
+    private DomainRepository domainRepository;
+    @Autowired
+    private JsonUtil util;
+    @Autowired
+    private CustomerValidator customerValidator;
+    @Autowired
+    private CustomerAdapter customerAdapter;
+
+
+    /**
+     * This method is used to create orgation for customer journey
+     *
+     * @param organizationDetail takes orgDetails as param
+     * @return orgation entity
+     */
+    @Transactional
+    public Organization createOrganization(OrganizationDetail organizationDetail, String correlationId) {
+        Organization orgEntity = null;
+        log.info("Initiate createOrganization in Connector ");
+        orgEntity = organizationRepository.getRecordByName(organizationDetail.getOrganizationName());
+        if (orgEntity == null) {
+            Organization organization = Organization.builder().organizationName(organizationDetail.getOrganizationName())
+                    .organizationSize(organizationDetail.getOrganizationSize())
+                    .organizationDesc(organizationDetail.getOrganizationDesc()).isActive(Boolean.TRUE)
+                    .correlationId(correlationId)
+                    .createdBy(organizationDetail.getCreatedBy()).createdDate(new Date()).build();
+            orgEntity = organizationRepository.save(organization);
+        } else {
+            Organization organization = Organization.builder().organizationId(orgEntity.getOrganizationId())
+                    .organizationName(orgEntity.getOrganizationName())
+                    .organizationSize(organizationDetail.getOrganizationSize())
+                    .organizationDesc(organizationDetail.getOrganizationDesc()).isActive(Boolean.TRUE)
+                    .correlationId(correlationId)
+                    .createdBy(organizationDetail.getUpdatedBy()).updatedDate(new Date()).build();
+            orgEntity = organizationRepository.save(organization);
+        }
+        log.info("End of createOrganization in Connector " + orgEntity.getOrganizationName());
+        return orgEntity;
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param customerDetails takes the bean of cust detail
+     * @return customer entity
+     */
+    @Transactional
+    public Customer createCustomer(CustomerDetail customerDetails, Organization organization, String correlationId) {
+        Customer customerResult = null;
+        log.info("Initiate createCustomer in Connector " + "correlationId:" + correlationId);
+        Customer customer = Customer.builder().organizationId(organization).businessName(customerDetails.getBusinessName())
+                .businessType(customerDetails.getBusinessType()).businessCategory(customerDetails.getBusinessCategory())
+                .businessEmail(customerDetails.getBusinessEmail())
+                .userId(customerDetails.getUserId())
+                .currency(customerDetails.getCurrency()).isActive(Boolean.TRUE)
+                .correlationId(correlationId)
+                .createdBy(customerDetails.getCreatedBy()).createdDate(new Date()).build();
+        customerResult = customerRepository.save(customer);
+        log.info("End of createCustomer in Connector " + "correlationId:" + correlationId);
+        return customerResult;
+    }
+
+    /**
+     * This method is used to create the customerAddress for customer
+     *
+     * @param customerAddress
+     * @param customers       id is required to create the cust  Address
+     * @return customer address entity
+     */
+    @Transactional
+    public CustomerAddress createCustomerAddress(CustomerAddressDetail customerAddress, Customer customers, String correlationId) {
+        log.info("Initiate createCustomerAddress in Connector " + "correlationId:" + correlationId);
+            CustomerAddress address = CustomerAddress.builder().addressLine1(customerAddress.getAddressLine1()).addressLine2(customerAddress.getAddressLine2())
+                    .addressLine3(customerAddress.getAddressLine3()).city(customerAddress.getCity()).countryCode(customerAddress.getCountryCode())
+                    .correlationId(correlationId)
+                    .customerId(customers).isActive(Boolean.TRUE).createdBy(customerAddress.getCreatedBy()).createdDate(new Date()).build();
+            CustomerAddress custAddress = addressRepository.save(address);
+        log.info("End of createCustomerAddress in Connector " + "correlationId:" + correlationId);
+        return custAddress;
+    }
+
+    /**
+     * This method is used to create Tier for the customer
+     *
+     * @param tierDetail
+     * @param customer   id is required to create the tier
+     * @return tier object
+     */
+    @Transactional
+    public Tier createTier(TierDetail tierDetail, Customer customer, String correlationId) {
+        log.info("Initiate createTier in Connector " + "correlationId:" + correlationId);
+        Tier tier = Tier.builder().customerId(customer).tierName(tierDetail.getTierName()).isActive(Boolean.TRUE)
+                .correlationId(correlationId)
+                .createdBy(tierDetail.getCreatedBy()).createdDate(new Date()).build();
+        Tier tiers = tierRepository.save(tier);
+        log.info("End of createTier in Connector " + "correlationId:" + correlationId);
+        return tiers;
+    }
+
+    /**
+     * This method is used to create the packages for the customer
+     *
+     * @param packagesDetails
+     * @param tier            based on tier it creates the packages
+     * @return the packages for customer
+     */
+    @Transactional
+    public List<Packages> createPackages(List<PackagesDetail> packagesDetails, Customer customer, Tier tier, String correlationId) {
+        List<Packages> packages = new ArrayList<>();
+        log.info("Initiate createPackages in Connector " + "correlationId:" + correlationId);
+        for (PackagesDetail packDetail : packagesDetails) {
+            Packages pack = Packages.builder().tierId(tier).packageName(packDetail.getPackageName()).createdBy(packDetail.getCreatedBy())
+                    .correlationId(correlationId)
+                    .customerId(customer)
+                    .isActive(Boolean.TRUE)
+                    .createdDate(new Date()).build();
+            Packages pkg = packageRepository.save(pack);
+            packages.add(pkg);
+        }
+        log.info("End of createPackages in Connector " + "correlationId:" + correlationId);
+        return packages;
+    }
+
+    /**
+     * This method is used to create the list of benefits of customer for package
+     *
+     * @param benefitsDetail
+     * @param customer       benefits are created
+     * @return list of benefits
+     */
+    @Transactional
+    public List<CustomerBenefit> createBenefit(List<BenefitDetail> benefitsDetail, Customer customer, String correlationId) {
+        List<CustomerBenefit> customerBenefits = new ArrayList<>();
+        log.info("Initiate createBenefit in Connector " + "correlationId:" + correlationId);
+        for (BenefitDetail detail : benefitsDetail) {
+            for(Long vendorId : detail.getVendorId()) {
+                CustomerBenefit customerBenefit = CustomerBenefit.builder()
+                        .benefitName(detail.getBenefitName())
+                        .customerId(customer).correlationId(correlationId)
+                        .isActive(Boolean.TRUE)
+                        .createdDate(new Date())
+                        .redirectUrl(detail.getRedirectUrl())
+                        .imageUrl(detail.getImageUrl())
+                        .description(detail.getDescription())
+                        .vendorId(vendorId).build();
+                CustomerBenefit custBenefit = benefitRepository.save(customerBenefit);
+                customerBenefits.add(custBenefit);
+            }
+        }
+        log.info("End of createBenefit in Connector " + "correlationId:" + correlationId);
+        return customerBenefits;
+    }
+
+    /**
+     * This method is used to create the list of custom benefits for the package
+     *
+     *
+     * @param customerBenefit  is required to create the pacakge benefits
+     * @param packages         id is required to create pckg benefit
+     * @return package benefits for the customer
+     */
+    @Transactional
+    public List<PackagesBenefit> createPackageBenefit(List<PackagesDetail> packagesDetails,
+                                                      List<CustomerBenefit> customerBenefit, List<Packages> packages, String correlationId) {
+        List<PackagesBenefit> packagesBenefits = new ArrayList<>();
+        log.info("Initiate createPackageBenefit in Connector " + "correlationId:" + correlationId);
+            for(PackagesDetail packagesDetail : packagesDetails){
+                for(CustomerBenefit packbenefit:packagesDetail.getBenefits()){
+                    for(CustomerBenefit custBenefit : customerBenefit){
+                        if(packbenefit.getBenefitName().equals(custBenefit.getBenefitName())){
+                            for(Packages packages1:packages) {
+                                if(packagesDetail.getPackageName().equals(packages1.getPackageName())) {
+                                    PackagesBenefit pckgBenfit = PackagesBenefit.builder().packageId(packages1)
+                                            .customerBenefitId(custBenefit).isActive(Boolean.TRUE)
+                                            .correlationId(correlationId)
+                                            .createdBy(packbenefit.getCreatedBy()).createdDate(new Date()).build();
+                                    PackagesBenefit packagesBenefit = packageBenefitsRepository.save(pckgBenfit);
+                                    packagesBenefits.add(packagesBenefit);
+                                }
+                            }
+                        }
+                    }
+
+                }
+            }
+
+        log.info("End of createPackageBenefit in Connector " + "correlationId:" + correlationId);
+        return packagesBenefits;
+    }
+    private int getUniqueRandomNumberSolicitation(){
+        Random random = new Random();
+        int randomNumber = random.nextInt(9000) + 1000;
+        SolicitationPackage recordBySoliciationId = solicitationPackageRepository.getRecordBySoliciationId(randomNumber);
+        if(recordBySoliciationId!=null){
+            getUniqueRandomNumberSolicitation();
+        }
+        return randomNumber;
+    }
+
+    /**
+     *
+     * @param solicitationDetails
+     * @param packages
+     * @param customer
+     * @param correlationId
+     * @return
+     */
+    @Transactional
+    public List<SolicitationPackage> createSolicitationPackages(List<SolicitationDetail> solicitationDetails,List<Packages> packages,Customer customer, String correlationId) {
+        List<SolicitationPackage> solicitationPackages = new ArrayList<>();
+        log.info("Initiate createSolicitationPackages in Connector " + "correlationId:" + correlationId);
+        for (SolicitationDetail solicitationDetail : solicitationDetails) {
+            int randomNumber = getUniqueRandomNumberSolicitation();
+            for (String packageName : solicitationDetail.getPackages()) {
+                for (Packages pack : packages) {
+                    if (packageName.equals(pack.getPackageName())) {
+                        SolicitationPackage solPackage = SolicitationPackage.builder()
+                                .solicitationId(randomNumber)
+                                .packages(pack)
+                                .solicitationName(solicitationDetail.getSolicitationName())
+                                .solicitationDescription(solicitationDetail.getSolicitationDesc())
+                                .isActive(Boolean.TRUE)
+                                .customer(customer)
+                                .startFrom(solicitationDetail.getStartDate())
+                                .endDate(solicitationDetail.getEndDate())
+                                .createdDate(new Date())
+                                .build();
+                        SolicitationPackage solicitationPackage = solicitationPackageRepository.save(solPackage);
+                        solicitationPackages.add(solicitationPackage);
+                    }
+                }
+            }
+        }
+        log.info("End of createSolicitationPackages in Connector " + "correlationId:" + correlationId);
+        return solicitationPackages;
+    }
+
+    /**
+     * This method is used to create the list of benefits of customer for package
+     *
+     * @param customerUserDetail
+     * @return list of benefits
+     */
+    @Transactional
+    public CustomerUser createCustomerUser(CustomerUserDetail customerUserDetail, Customer customer,
+                                           String correlationId) {
+        log.info("Initiate createCustomerUser in Connector " + "correlationId:" + correlationId);
+        CustomerUser customerUser = CustomerUser.builder()
+                .correlationId(correlationId)
+                .customerId(customer)
+                .isActive(Boolean.TRUE)
+                .firstName(customerUserDetail.getFirstName())
+                .lastName(customerUserDetail.getLastName())
+                .emailId(customerUserDetail.getEmailId())
+                .createdDate(new Date())
+                .createdBy(customerUserDetail.getCreatedBy()).build();
+        customerUser = userRepository.save(customerUser);
+        log.info("End of createBenefit in Connector " + "correlationId:" + correlationId);
+        return customerUser;
+    }
+
+    /**
+     * This method is used to create Tier for the customer
+     *
+     * @param detail     ,
+     * @param customerId id is required to create the tier
+     * @return tier object
+     */
+
+    public CustomerInbox saveToinbox(CustomerCreateDetail detail, Long customerId, String correlationId) {
+        log.info("Initiate saveToinbox in connector " + "correlationId:" + correlationId);
+        String customerRequestId = CorrelationIdUtil.generateCorrelationId();
+        String details = util.objectToString(detail);
+        CustomerInbox customerInbox = CustomerInbox.builder().
+                customerId(customerId)
+                .customerRequestId(customerRequestId)
+                .status(CUSTOMER_CREATED).details(details)
+                .correlationId(correlationId).build();
+        CustomerInbox inbox = customerInboxRepository.save(customerInbox);
+        log.info("End of  saveToinbox in connector " + "correlationId:" + correlationId);
+        return inbox;
+    }
+
+    /**
+     * This method is used to create Tier for the customer
+     *
+     * @param createDetail  ,
+     * @param correlationId is required to create the tier
+     * @return tier object
+     */
+    public Customer createAllCustomerDetails(CustomerCreateDetail createDetail, String correlationId, Long customerId) {
+        Organization organization = null;
+        log.info("Initiate createAllCustomerDetails in connector " + " - CorrelationId: " + correlationId);
+        Organization org = this.appendOrganization(createDetail.getOrgDetail(), customerId, correlationId);
+        Customer customer = this.appendCustomer(createDetail.getCustomerDetail(), org, customerId, correlationId);
+        Tier tier = this.createTier(createDetail.getTierDetail(), customer, correlationId);
+        CustomerAddress customerAddress = this.createCustomerAddress(createDetail.getCustAddressDetail(), customer, correlationId);
+        List<CustomerBenefit> benefit = this.createBenefit(createDetail.getBenefitDetail(), customer, correlationId);
+        List<Packages> packages = this.createPackages(createDetail.getPackagesDetail(), customer, tier, correlationId);
+        List<PackagesBenefit> packageBenefit = this.createPackageBenefit(createDetail.getPackagesDetail(),benefit, packages, correlationId);
+        DomainDetails domainDetails = this.createDomainDetails(createDetail.getDomainDetails(), customer, correlationId);
+        List<SolicitationPackage> solicitationPackages = this.createSolicitationPackages(createDetail.getSolicitationDetail(),packages,customer,correlationId);
+        log.info("End of createAllCustomerDetails  in connector " + " - CorrelationId: " + correlationId);
+        return customer;
+    }
+
+    /**
+     * This method is used to create Tier for the customer
+     *
+     * @param customerDomainDetails  ,
+     * @param correlationId is required to create the tier
+     * @return domainDetails
+     */
+    private DomainDetails createDomainDetails(CustomerDomainDetails customerDomainDetails, Customer customer, String correlationId) {
+        log.info("Initiate createDomainDetails in connector " + " - CorrelationId: " + correlationId);
+        DomainDetails details = DomainDetails.builder()
+                .siteCode(customerDomainDetails.getSiteCode())
+                .templateCode(customerDomainDetails.getTemplateCode())
+                .siteName(customerDomainDetails.getSiteName())
+                .siteType(customerDomainDetails.getSiteType())
+                .customerId(customer)
+                .domainName(customerDomainDetails.getDomainName())
+                .logo(customerDomainDetails.getLogo())
+                .tagline(customerDomainDetails.getTagline())
+                .isActive(Boolean.TRUE)
+                .createdBy(customerDomainDetails.getCreatedBy())
+                .createdDate(new Date())
+                .correlationId(correlationId).build();
+        DomainDetails domainDetails = domainRepository.save(details);
+        log.info("End of createDomainDetails  in connector " + " - CorrelationId: " + correlationId);
+        return domainDetails;
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param customerCreateDetail takes the bean of cust detail
+     * @return customer entity
+     */
+    @Transactional
+    public Customer createCustomerEvent(CustomerCreateDetail customerCreateDetail, String correlationId, Long customerId) {
+        Customer customer = null;
+        Organization organization = null;
+        log.info("Initiate createCustomerEvent in Connector " + " - CorrelationId: " + correlationId);
+        Customer orgId = customerRepository.getActiveCustomerById(customerId);
+        organization = this.createOrganization(customerCreateDetail.getOrgDetail(), correlationId);
+        customer = this.createCustomer(customerCreateDetail.getCustomerDetail(), organization, correlationId);
+        log.info("End of createCustomerEvent in Connector " + " - CorrelationId: " + correlationId);
+        return customer;
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param event
+     * @return CustomerInbox
+     */
+    @Transactional
+    public CustomerInbox getCustomerRequest(CustomerEvent event) {
+        log.info("Initiate getCustomerRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        CustomerInbox customerDeatils = customerInboxRepository.getCustomerRequest(event.getCustomerRequestId());
+        log.info("End of getCustomerRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        return customerDeatils;
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param event
+     * @return CustomerInbox
+     */
+    @Transactional
+    public CustomerInbox getCustomerForRuleRequest(CustomerRuleEvent event) {
+        log.info("Initiate getCustomerForRuleRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        CustomerInbox customerDeatils = customerInboxRepository.getCustomerRequest(event.getCustomerRequestId());
+        log.info("End of getCustomerForRuleRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        return customerDeatils;
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param event
+     * @return CustomerInbox
+     */
+    @Transactional
+    public CustomerInbox getCustomerForTemplateRequest(CustomerTemplateEvent event) {
+        log.info("Initiate getCustomerForTemplateRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        CustomerInbox customerDeatils = customerInboxRepository.getCustomerRequest(event.getCustomerRequestId());
+        log.info("End of getCustomerForTemplateRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        return customerDeatils;
+    }
+
+
+    /**
+     * @param customerActivationDetails
+     * @return Customer
+     */
+    @Transactional
+    public Customer createActivationDetails(CustomerActivationDetails customerActivationDetails, String correlationId) {
+        Customer customer = null;
+        Organization organization = null;
+        CustomerUser user = null;
+        log.info("Initiate createActivationDetails in Connector " + " - CorrelationId: " + correlationId);
+        organization = this.createOrganization(customerActivationDetails.getOrgDetail(), correlationId);
+        customer = this.createCustomerforActivation(customerActivationDetails.getCustomerDetail(), organization, correlationId);
+        user = this.createCustomerUser(customerActivationDetails.getUserDetail(), customer, correlationId);
+        log.info("End of createActivationDetails in Connector " + " - CorrelationId: " + correlationId);
+        return customer;
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param customerDetails takes the bean of cust detail
+     * @return customer entity
+     */
+    @Transactional
+    public Customer createCustomerforActivation(CustomerDetail customerDetails, Organization organization, String correlationId) {
+        Customer customerResult = null;
+       // String activation_code = CorrelationIdUtil.generateCorrelationId();
+        String activation_code = CorrelationIdUtil.generateActivationCode(correlationId);
+        log.info("Initiate createCustomerforActivation in Connector " + "correlationId:" + correlationId);
+        Customer customer = Customer.builder().organizationId(organization)
+                .businessName(organization.getOrganizationName())
+                .isActive(Boolean.TRUE)
+                .activationStatus(Boolean.FALSE)
+                .activationCode(activation_code)
+                .correlationId(correlationId)
+                .createdBy(customerDetails.getCreatedBy()).createdDate(new Date()).build();
+        customerResult = customerRepository.save(customer);
+        log.info("End of createCustomerforActivation in Connector " + "correlationId:" + correlationId);
+        return customerResult;
+    }
+
+    public ActivationValidateResponse createValidateActivationDetails(ActivationValidateDetails activationValidateDetails,
+                                                                      String correlationId) {
+        log.info("Initiate createValidateActivationDetails in Connector " + "correlationId:" + correlationId);
+        ActivationValidateResponse validateResponse = customerValidator.validateActivationCode(activationValidateDetails);
+        ActivationValidateResponse statusValidateResponse = ActivationValidateResponse.builder().status(Boolean.TRUE).build();
+        log.info("End of createValidateActivationDetails in Connector " + "correlationId:" + correlationId);
+        return validateResponse;
+    }
+
+    /**
+     * This method is used to create orgation for customer journey
+     *
+     * @param organizationDetail takes orgDetails as param
+     * @return Organization
+     */
+    @Transactional
+    public Organization appendOrganization(OrganizationDetail organizationDetail, Long customerId, String correlationId) {
+        log.info("Initiate appendOrganization in Connector " + "correlationId:" + correlationId);
+        Customer customer = customerRepository.getActiveCustomerById(customerId);
+        Organization orgEntity = organizationRepository.getRecordById(customer.getOrganizationId().getOrganizationId());
+        if (organizationDetail.getOrganizationName() != null) {
+            orgEntity.setOrganizationName(organizationDetail.getOrganizationName());
+        }
+        if (organizationDetail.getOrganizationDesc() != null) {
+            orgEntity.setOrganizationDesc(organizationDetail.getOrganizationDesc());
+        }
+        if (organizationDetail.getOrganizationSize() != null) {
+            orgEntity.setOrganizationSize(organizationDetail.getOrganizationSize());
+        }
+        if (organizationDetail.getIsActive() != null) {
+            orgEntity.setIsActive(Boolean.TRUE);
+        }
+        if (organizationDetail.getUpdatedBy() != null) {
+            orgEntity.setUpdatedBy(organizationDetail.getUpdatedBy());
+        }
+        if (organizationDetail.getUpdatedDate() != null) {
+            orgEntity.setUpdatedDate(new Date());
+        }
+        Organization organization = organizationRepository.save(orgEntity);
+        log.info("End of appendOrganization in Connector " + "correlationId:" + correlationId);
+        return organization;
+    }
+
+    /**
+     * @param customerDetail
+     * @param organization
+     * @return Customer
+     */
+    public Customer appendCustomer(CustomerDetail customerDetail, Organization organization, Long customerId, String correlationId) throws CustomerRuntimeException {
+        log.info("Initiate appendCustomer in connector " + "correlationId:" + correlationId);
+        Customer customer = customerRepository.getActiveCustomerById(customerId);
+        if (customerDetail.getOrganizationId() != null) {
+            customer.setOrganizationId(organization);
+        }
+        if (customerDetail.getUserId() != null) {
+            customer.setUserId(customerDetail.getUserId());
+        }
+        if (customerDetail.getBusinessName() != null) {
+            customer.setBusinessName(customerDetail.getBusinessName());
+        }
+        if (customerDetail.getBusinessEmail() != null) {
+            customer.setBusinessEmail(customerDetail.getBusinessEmail());
+        }
+        if (customerDetail.getBusinessType() != null) {
+            customer.setBusinessType(customerDetail.getBusinessType());
+        }
+        customer.setBusinessCategory(customerDetail.getBusinessCategory());
+
+        if (customerDetail.getPhoneNo() != null) {
+            customer.setPhone(customerDetail.getPhoneNo());
+        }
+        if (customerDetail.getCurrency() != null) {
+            customer.setCurrency(customerDetail.getCurrency());
+        }
+        if (customerDetail.getRegion() != null) {
+            customer.setRegion(customerDetail.getRegion());
+        }
+        customer.setCorrelationId(correlationId);
+        customer.setIsActive(Boolean.TRUE);
+        customer.setUpdatedBy(customerDetail.getUpdatedBy());
+        customer.setUpdatedDate(new Date());
+        customer.setCommunicationPreferences(customerDetail.getCommunicationPreferences());
+        Customer custObj = customerRepository.save(customer);
+        log.info("End of appendCustomer in connector " + "correlationId:" + correlationId);
+        return custObj;
+
+    }
+
+
+    //====================================================update======================================
+
+    /**
+     * @param id
+     * @return
+     */
+    public Customer getCustomer(Long id, String corelationId) throws CustomerRuntimeException {
+        log.info("Initiate getCustomer in connector " + "customer id:" + id);
+        CustomerValidator validator = new CustomerValidator();
+        validator.validateField("Customer", id.toString());
+        log.info("validation success  " + "customer id:" + id);
+        Customer customer = null;
+        customer = customerRepository.getRecordById(id);
+        log.info("customer object " + customer);
+        validator.validateEntity("customer", customer);
+        log.info("customer validateEntity is success " );
+        return customer;
+
+    }
+
+    @Transactional
+    public CustomerInbox updateToinbox(CustomerUpdateDetail detail, Customer customer, String correlationId) {
+        log.info("Initiate updateToinbox in connector " + "correlationId:" + correlationId);
+        String customerRequestId = CorrelationIdUtil.generateCorrelationId();
+        CustomerInbox customerInbox = CustomerInbox.builder().
+                customerId(customer.getCustomerId())
+                .customerRequestId(customerRequestId)
+                .status(CUSTOMER_UPDATED).details(detail.toString())
+                .correlationId(correlationId).build();
+        CustomerInbox inbox = customerInboxRepository.save(customerInbox);
+        log.info("End of  updateToinbox in connector " + "correlationId:" + correlationId);
+        return inbox;
+    }
+
+    public Customer updateAllCustomerDetails(CustomerUpdateDetail customerUpdateDetail, Long id, String correlationId) {
+        log.info("Initiate updateAllCustomerDetails in connector " + "correlationId:" + correlationId);
+        Customer customer = this.getCustomer(id, correlationId);
+        if (customerUpdateDetail.getCustomerDetail() != null) {
+            Customer updateCustomer = this.updateCustomer(customerUpdateDetail.getCustomerDetail(), customer, correlationId);
+        }
+        if (customerUpdateDetail.getTierDetail() != null) {
+            Tier tier = this.updateTier(customerUpdateDetail.getTierDetail(), customer, correlationId);
+        }
+        if (customerUpdateDetail.getCustAddressDetail() != null) {
+            CustomerAddress customerAddress = customerAdapter.updateCustomerAddress(customerUpdateDetail.getCustAddressDetail(), customer, correlationId);
+        }
+        if (customerUpdateDetail.getPackagesDetail() != null) {
+            Packages packages = this.updatePackages(customerUpdateDetail.getPackagesDetail(), customer, correlationId);
+        }
+        if (customerUpdateDetail.getBenefitDetail() != null) {
+            CustomerBenefit benefit = this.updateCustomerBenifit(customerUpdateDetail.getBenefitDetail(), customer, correlationId);
+        }
+        if (customerUpdateDetail.getPackageBenefitsDetail() != null) {
+            PackagesBenefit packageBenefit = this.updatePackageBenifit(customerUpdateDetail.getPackageBenefitsDetail()
+                    , customer, correlationId);
+        }
+        log.info("End of  updateAllCustomerDetails in connector " + "correlationId:" + correlationId);
+        return customer;
+    }
+
+    /**
+     * @param customerDetail
+     * @param customer
+     * @return
+     */
+    public Customer updateCustomer(CustomerDetail customerDetail, Customer customer, String correlationId) throws CustomerRuntimeException {
+        log.info("Inside updateCustomer method in connector " + "correlationId:" + correlationId);
+        CustomerValidator validator = new CustomerValidator();
+        if (customerDetail.getOrganizationId() != null) {
+            Organization organization = organizationRepository.getRecordById(customerDetail.getOrganizationId());
+            validator.validateEntity("customer", customer);
+            customer.setOrganizationId(organization);
+        }
+        customer.setCorrelationId(correlationId);
+
+        if (customerDetail.getUserId() != null) {
+            customer.setUserId(customerDetail.getUserId());
+        }
+        if (customerDetail.getBusinessName() != null) {
+            customer.setBusinessName(customerDetail.getBusinessName());
+        }
+        if (customerDetail.getBusinessEmail() != null) {
+            customer.setBusinessName(customerDetail.getBusinessEmail());
+        }
+        if (customerDetail.getPhoneNo() != null) {
+            customer.setPhone(customerDetail.getPhoneNo());
+        }
+        if (customerDetail.getCurrency() != null) {
+            customer.setCurrency(customerDetail.getCurrency());
+        }
+        if (customerDetail.getBusinessType() != null) {
+            customer.setBusinessType(customerDetail.getBusinessType());
+        }
+        if (customerDetail.getRegion() != null) {
+            customer.setRegion(customerDetail.getRegion());
+        }
+        customer.setIsActive(true);
+        customer.setUpdatedBy(customerDetail.getUpdatedBy());
+        customer.setUpdatedDate(new Date());
+        Customer cust = customerRepository.save(customer);
+        log.info("end update customer method in connector " + "correlationId:" + correlationId);
+        return cust;
+
+    }
+
+    /**
+     * @param customerAddressDetail
+     * @param customer
+     * @return
+     */
+   /* public CustomerAddress updateCustomerAddress(CustomerAddressDetail customerAddressDetail, Customer customer, String correlationId) {
+        log.info("Inside updateCustomerAddress method in connector " + "correlationId:" + correlationId);
+        CustomerAddress customerAddress = null;
+        CustomerValidator validator = new CustomerValidator();
+        Long customerId = customerAddressDetail.getCustomerId();
+        validator.validateField("customerId", customerId.toString());
+        customerAddress = addressRepository.getRecordByCustomerId(customerId);
+        validator.validateEntity("customerAddress", customerAddress);
+        customerAddress.setCorrelationId(correlationId);
+
+        if (customerAddress.getCustomerId().getCustomerId().equals(customer.getCustomerId())) {
+            if (customerAddressDetail.getAddressLine1() != null) {
+                customerAddress.setAddressLine1(customerAddressDetail.getAddressLine1());
+            }
+            if (customerAddressDetail.getAddressLine2() != null) {
+                customerAddress.setAddressLine2(customerAddressDetail.getAddressLine2());
+            }
+            if (customerAddressDetail.getAddressLine3() != null) {
+                customerAddress.setAddressLine3(customerAddressDetail.getAddressLine3());
+            }
+            if (customerAddressDetail.getCity() != null) {
+                customerAddress.setCity(customerAddressDetail.getCity());
+            }
+            if (customerAddressDetail.getSate() != null) {
+                customerAddress.setSate(customerAddressDetail.getSate());
+            }
+            if (customerAddressDetail.getZipCode() != null) {
+                customerAddress.setZipCode(customerAddressDetail.getZipCode());
+            }
+            if (customerAddressDetail.getCountryCode() != null) {
+                customerAddress.setCountryCode(customerAddressDetail.getCountryCode());
+            }
+            customerAddress.setIsActive(true);
+            customerAddress.setUpdatedBy(customerAddressDetail.getUpdatedBy());
+            customerAddress.setUpdatedDate(new Date());
+            CustomerAddress address = addressRepository.save(customerAddress);
+            log.info("end of updateCustomerAddress method in connector " + "correlationId:" + correlationId);
+            return address;
+        } else {
+            log.info("error in updateCustomerAddress method in connector " + "correlationId:" + correlationId);
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "customerId with given customerId is not present in record");
+        }
+
+    }
+*/
+
+    /**
+     * @param tierDetail
+     * @param customer
+     * @return
+     */
+    public Tier updateTier(TierDetail tierDetail, Customer customer, String correlationId) {
+        log.info("inside updateTier method in connector " + "correlationId:" + correlationId);
+        Tier tier = null;
+        CustomerValidator validator = new CustomerValidator();
+
+        Long tierId = tierDetail.getId();
+        validator.validateField("tierId", tierId.toString());
+
+        tier = tierRepository.getRecordById(tierId);
+        validator.validateEntity("tier", tier);
+        tier.setCorrelationId(correlationId);
+        if (tier.getCustomerId().getCustomerId().equals(customer.getCustomerId())) {
+            if (tierDetail.getTierName() != null) {
+                tier.setTierName(tierDetail.getTierName());
+            }
+            tier.setIsActive(true);
+            tier.setUpdatedBy(tierDetail.getUpdatedBy());
+            tier.setUpdatedDate(new Date());
+            Tier tierResult = tierRepository.save(tier);
+            log.info("end of updateTier method in connector " + "correlationId:" + correlationId);
+            return tierResult;
+        } else {
+            log.info("error in updateTier method in connector " + "correlationId:" + correlationId);
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "customerId with given TierId is not present in record");
+        }
+    }
+
+    /**
+     * @param packagesDetail
+     * @param customer
+     * @return
+     */
+    public Packages updatePackages(PackagesDetail packagesDetail, Customer customer, String correlationId) {
+        log.info("inside updatePackages method in connector " + "correlationId:" + correlationId);
+        Packages packages = null;
+        CustomerValidator validator = new CustomerValidator();
+
+        Long packagesId = packagesDetail.getId();
+        validator.validateField("packagesId", packagesId.toString());
+
+        packages = packageRepository.getRecordById(packagesId);
+        validator.validateEntity("packages", packages);
+        packages.setCorrelationId(correlationId);
+        if (packages.getTierId().getCustomerId().getCustomerId().equals(customer.getCustomerId())) {
+            if (packagesDetail.getPackageName() != null) {
+                packages.setPackageName(packagesDetail.getPackageName());
+            }
+            packages.setIsActive(true);
+            packages.setUpdatedBy(packagesDetail.getUpdatedBy());
+            packages.setUpdatedDate(new Date());
+            Packages packagesResult = packageRepository.save(packages);
+            log.info("end of updatePackages method in connector " + "correlationId:" + correlationId);
+            return packagesResult;
+        } else {
+            log.info("error in updatePackages method in connector " + "correlationId:" + correlationId);
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "customerId with given packagesId is not present in record");
+        }
+    }
+
+    /**
+     * @param packageBenefitsDetail
+     * @param customer
+     * @return
+     */
+
+    public PackagesBenefit updatePackageBenifit(PackageBenefitsDetail packageBenefitsDetail, Customer customer, String correlationId) {
+        log.info("inside updatePackageBenifit method in connector " + "correlationId:" + correlationId);
+        PackagesBenefit packagesBenefit = null;
+        CustomerValidator validator = new CustomerValidator();
+        Long packagesBenefitId = packageBenefitsDetail.getId();
+        validator.validateField("packagesBenefitId", packagesBenefitId.toString());
+        packagesBenefit = packageBenefitsRepository.getRecordById(packagesBenefitId);
+        validator.validateEntity("packagesBenefit", packagesBenefit);
+        packagesBenefit.setCorrelationId(correlationId);
+        if (packagesBenefit.getPackageId().getTierId().getCustomerId().getCustomerId().equals(customer.getCustomerId())) {
+
+            if (packageBenefitsDetail.getPackageId() != 0) {
+                Packages packages = packageRepository.getRecordById(packageBenefitsDetail.getPackageId());
+                validator.validateEntity("Packages", packages);
+                packagesBenefit.setPackageId(packages);
+            }
+            if (packageBenefitsDetail.getBenefitId() != 0) {
+                CustomerBenefit customerBenefit = benefitRepository.getRecordById(packageBenefitsDetail.getBenefitId());
+                validator.validateEntity("CustomerBenefit", customerBenefit);
+                packagesBenefit.setCustomerBenefitId(customerBenefit);
+            }
+            packagesBenefit.setIsActive(true);
+            packagesBenefit.setUpdatedBy(packageBenefitsDetail.getUpdatedBy());
+            packagesBenefit.setUpdatedDate(new Date());
+            PackagesBenefit packagesBenefitResult = packageBenefitsRepository.save(packagesBenefit);
+            log.info("end of updatePackageBenifit method in connector " + "correlationId:" + correlationId);
+            return packagesBenefitResult;
+        } else {
+            log.info("error in updatePackageBenifit method in connector " + "correlationId:" + correlationId);
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "customerId with given packagesBenefitId is not present in record");
+        }
+    }
+
+    /**
+     * @param benefitDetail
+     * @param customer
+     * @return
+     */
+    @Transactional
+    public CustomerBenefit updateCustomerBenifit(BenefitDetail benefitDetail, Customer customer, String correlationId) {
+        log.info("inside updateCustomerBenifit method in connector " + "correlationId:" + correlationId);
+        CustomerValidator validator = new CustomerValidator();
+        Long customerBenefitId = benefitDetail.getId();
+        validator.validateField("customerBenefitId", customerBenefitId.toString());
+
+        CustomerBenefit customerBenefit = benefitRepository.getRecordById(customerBenefitId);
+        validator.validateEntity("customerBenefit", customerBenefit);
+        customerBenefit.setCorrelationId(correlationId);
+
+        if (customerBenefit.getCustomerId().getCustomerId().equals(customer.getCustomerId())) {
+            CustomerBenefit customerBenefitResult = benefitRepository.save(customerBenefit);
+            log.info("end of updateCustomerBenifit method in connector " + "correlationId:" + correlationId);
+            return customerBenefitResult;
+        } else {
+            log.info("error in updateCustomerBenifit method in connector " + "correlationId:" + correlationId);
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "customerId with given customerBenefitId is not present in record");
+        }
+
+    }
+    public List<Map<String, Object>> getSolicitationPackageList(Long customerId) {
+        log.info("Initiate getSolicitationPackageList in connector " + "customer id:" + customerId);
+        List<Map<String, Object>> solicitationPackages = solicitationPackageRepository.getRecordByCustomerIdAndDate(customerId,new Date());
+        log.info("solicitationPackages object " + solicitationPackages);
+        log.info("End getSolicitationPackageList in connector " + "customer id:" + customerId);
+        return solicitationPackages;
+
+    }
+}
Index: src/main/java/com/syzegee/customer/events/adapter/RuleEngineConnectors.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/RuleEngineConnectors.java b/src/main/java/com/syzegee/customer/events/adapter/RuleEngineConnectors.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/RuleEngineConnectors.java	(date 1613491889000)
@@ -0,0 +1,74 @@
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.domain.CustomerCreateDetail;
+import com.syzegee.customer.events.domain.ruleengine.*;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+import org.springframework.web.client.RestTemplate;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+/**
+ * @author Sagar
+ */
+@Component
+public class RuleEngineConnectors {
+
+    private RestTemplate restTemplate = new RestTemplate();
+    private RuleResponseDetails responseDetails;
+
+    @Value("${url.ruleEngine}")
+    private String ruleEngineURL;
+
+    public RuleResponseDetails createProject(CustomerRule ruleProjectDetail) {
+        responseDetails = restTemplate.postForObject(
+                ruleEngineURL + "/createproject", ruleProjectDetail,
+                RuleResponseDetails.class);
+        return responseDetails;
+    }
+
+    public void createCustomerRuleEvent(CustomerCreateDetail createDetail, Long customerID) {
+        List<SyzegeeRuleDtlDetail> syzegeeRuleDtlDetails = new ArrayList<>();
+        SyzegeeRuleDtlDetail  ruleDtlDetail1 = SyzegeeRuleDtlDetail.builder().ruleDetailCode("commuPref")
+                                                .ruleDetailValue(createDetail.getCustomerDetail().getCommunicationPreferences())
+                                                .createdBy("Admin")
+                                                .createdDate(new Date())
+                                                .build();
+        SyzegeeRuleDtlDetail  ruleDtlDetail2 = SyzegeeRuleDtlDetail.builder().ruleDetailCode("enrollMethod")
+                                                .ruleDetailValue("email")
+                                                .createdBy("Admin")
+                                                .createdDate(new Date())
+                                                .build();
+        syzegeeRuleDtlDetails.add(ruleDtlDetail1);
+        syzegeeRuleDtlDetails.add(ruleDtlDetail2);
+        List<SyzegeeProjectRulesDetail> syzegeeProjectRulesDetails = new ArrayList<>();
+        SyzegeeProjectRulesDetail rulesDetail1 =SyzegeeProjectRulesDetail.builder()
+                                                .ruleValue("rule value")
+                                                .createdBy("Admin")
+                                                .createdDate(new Date())
+                                                .build();
+        syzegeeProjectRulesDetails.add(rulesDetail1);
+        CustomerRule ruleProjectDetail = CustomerRule.builder().customerId(customerID)
+                .projectCode("PCode" + customerID)
+                .projectName("Customer_" + customerID)
+                .projectDesc("customer default rule desc")
+                .createdBy("Admin")
+                .createdDate(new Date())
+                .defaultRuleName(null)
+                .ruleDetails(RuleDetails.builder()
+                        .ruleNameDetails(SyzegeeRuleDetail.builder()
+                                .ruleCode("defaultRuleCode")
+                                .ruleName(createDetail.getCustomerRule().getDefaultRuleName())
+                                .ruleDesc(createDetail.getCustomerDetail().getCommunicationPreferences())
+                                .ruleType("text")
+                                .createdBy("Admin")
+                                .build())
+                        .ruleAttributeDetails(syzegeeRuleDtlDetails)
+                        .ruleValueDetails(syzegeeProjectRulesDetails)
+                        .build())
+                .build();
+        this.createProject(ruleProjectDetail);
+    }
+}
Index: src/main/java/com/syzegee/customer/events/adapter/RuleEngineAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/RuleEngineAdapter.java b/src/main/java/com/syzegee/customer/events/adapter/RuleEngineAdapter.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/RuleEngineAdapter.java	(date 1613491889000)
@@ -0,0 +1,74 @@
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.model.CustomerCreateDetail;
+import com.syzegee.customer.events.model.ruleengine.*;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+import org.springframework.web.client.RestTemplate;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+/**
+ * @author Sagar
+ */
+@Component
+public class RuleEngineAdapter {
+
+    private RestTemplate restTemplate = new RestTemplate();
+    private RuleResponseDetails responseDetails;
+
+    @Value("${url.ruleEngine}")
+    private String ruleEngineURL;
+
+    public RuleResponseDetails createProject(CustomerRule ruleProjectDetail) {
+        responseDetails = restTemplate.postForObject(
+                ruleEngineURL + "/createproject", ruleProjectDetail,
+                RuleResponseDetails.class);
+        return responseDetails;
+    }
+
+    public void createCustomerRuleEvent(CustomerCreateDetail createDetail, Long customerID) {
+        List<SyzegeeRuleDtlDetail> syzegeeRuleDtlDetails = new ArrayList<>();
+        SyzegeeRuleDtlDetail  ruleDtlDetail1 = SyzegeeRuleDtlDetail.builder().ruleDetailCode("commuPref")
+                                                .ruleDetailValue(createDetail.getCustomerDetail().getCommunicationPreferences())
+                                                .createdBy("Admin")
+                                                .createdDate(new Date())
+                                                .build();
+        SyzegeeRuleDtlDetail  ruleDtlDetail2 = SyzegeeRuleDtlDetail.builder().ruleDetailCode("enrollMethod")
+                                                .ruleDetailValue("email")
+                                                .createdBy("Admin")
+                                                .createdDate(new Date())
+                                                .build();
+        syzegeeRuleDtlDetails.add(ruleDtlDetail1);
+        syzegeeRuleDtlDetails.add(ruleDtlDetail2);
+        List<SyzegeeProjectRulesDetail> syzegeeProjectRulesDetails = new ArrayList<>();
+        SyzegeeProjectRulesDetail rulesDetail1 =SyzegeeProjectRulesDetail.builder()
+                                                .ruleValue("rule value")
+                                                .createdBy("Admin")
+                                                .createdDate(new Date())
+                                                .build();
+        syzegeeProjectRulesDetails.add(rulesDetail1);
+        CustomerRule ruleProjectDetail = CustomerRule.builder().customerId(customerID)
+                .projectCode("PCode" + customerID)
+                .projectName("Customer_" + customerID)
+                .projectDesc("customer default rule desc")
+                .createdBy("Admin")
+                .createdDate(new Date())
+                .defaultRuleName(null)
+                .ruleDetails(RuleDetails.builder()
+                        .ruleNameDetails(SyzegeeRuleDetail.builder()
+                                .ruleCode("defaultRuleCode")
+                                .ruleName(createDetail.getCustomerRule().getDefaultRuleName())
+                                .ruleDesc(createDetail.getCustomerDetail().getCommunicationPreferences())
+                                .ruleType("text")
+                                .createdBy("Admin")
+                                .build())
+                        .ruleAttributeDetails(syzegeeRuleDtlDetails)
+                        .ruleValueDetails(syzegeeProjectRulesDetails)
+                        .build())
+                .build();
+        this.createProject(ruleProjectDetail);
+    }
+}
Index: src/main/java/com/syzegee/customer/events/entity/CustomerRole.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/entity/CustomerRole.java b/src/main/java/com/syzegee/customer/events/entity/CustomerRole.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/entity/CustomerRole.java	(date 1613491889000)
@@ -0,0 +1,57 @@
+package com.syzegee.customer.events.entity;
+
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+
+import javax.persistence.*;
+import javax.validation.constraints.Size;
+import javax.xml.bind.annotation.XmlRootElement;
+import java.io.Serializable;
+import java.util.Date;
+
+@Entity
+@Data
+@Table(name = "customer_role")
+@XmlRootElement
+@Builder
+public class CustomerRole implements Serializable {
+
+
+    private static final long serialVersionUID = 1L;
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    @Basic(optional = false)
+    @Column(name = "customer_role_id")
+    private Long customerRoleId;
+    @Column(name = "customer_id")
+    private Long customerId;
+    @Basic(optional = false)
+    @Column(name = "customer_user_id")
+    private Long customerUserId;
+    @Column(name = "correlation_id")
+    private String correlationId;
+    @Column(name = "is_active")
+    private Boolean isActive;
+    @Size(max = 120)
+    @Column(name = "created_by")
+    private String createdBy;
+    @Column(name = "created_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date createdDate;
+    @Size(max = 120)
+    @Column(name = "updated_by")
+    private String updatedBy;
+    @Column(name = "updated_date")
+    @Temporal(TemporalType.TIMESTAMP)
+    private Date updatedDate;
+    @Column(name = "customer_role_type")
+    private String roles;
+
+
+
+    @Tolerate
+    public CustomerRole() {
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/adapter/CustomerAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/CustomerAdapter.java b/src/main/java/com/syzegee/customer/events/adapter/CustomerAdapter.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/CustomerAdapter.java	(date 1613491889000)
@@ -0,0 +1,850 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.model.*;
+import com.syzegee.customer.events.entity.*;
+import com.syzegee.customer.events.exception.CustomerRuntimeException;
+import com.syzegee.customer.events.repository.*;
+import com.syzegee.customer.events.util.CorrelationIdUtil;
+import com.syzegee.customer.events.util.JsonUtil;
+import com.syzegee.customer.events.validator.CustomerValidator;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Component;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.*;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class CustomerAdapter {
+
+    @Autowired
+    private CustomerRepository customerRepository;
+    @Autowired
+    private OrganizationRepository organizationRepository;
+    @Autowired
+    private CustomerAddressRepository addressRepository;
+    @Autowired
+    private CustomerUserRepository userRepository;
+    @Autowired
+    private TierRepository tierRepository;
+    @Autowired
+    private BenefitRepository benefitRepository;
+    @Autowired
+    private PackageBenefitsRepository packageBenefitsRepository;
+    @Autowired
+    private CustomerStatusRepository customerStatusRepository;
+    @Autowired
+    private DomainRepository domainRepository;
+    @Autowired
+    private JsonUtil util;
+    @Autowired
+    private CustomerValidator customerValidator;
+
+    @Autowired
+    private CustomerStatusAdapter customerStatusAdapter;
+    @Autowired
+    private DomainDetailsAdapter domainDetailsAdapter;
+    @Autowired
+    private PackagingAdapter packagingAdapter;
+
+    @Autowired
+    private CustomerRoleRepository customerRoleRepository;
+
+    /**
+     * This method is used to create orgation for customer journey
+     *
+     * @param organizationDetail takes orgDetails as param
+     * @return orgation entity
+     */
+    @Transactional
+    public Organization createOrganization(OrganizationDetail organizationDetail, String correlationId) {
+        Organization orgEntity = null;
+        log.info("Initiate createOrganization in Connector ");
+        orgEntity = organizationRepository.getRecordByName(organizationDetail.getOrganizationName());
+        if (orgEntity == null) {
+            Organization organization = Organization.builder().organizationName(organizationDetail.getOrganizationName())
+                    .organizationSize(organizationDetail.getOrganizationSize())
+                    .organizationDesc(organizationDetail.getOrganizationDesc()).isActive(Boolean.TRUE)
+                    .correlationId(correlationId)
+                    .createdBy(organizationDetail.getCreatedBy()).createdDate(new Date()).build();
+            orgEntity = organizationRepository.save(organization);
+        } else {
+            Organization organization = Organization.builder().organizationId(orgEntity.getOrganizationId())
+                    .organizationName(orgEntity.getOrganizationName())
+                    .organizationSize(organizationDetail.getOrganizationSize())
+                    .organizationDesc(organizationDetail.getOrganizationDesc()).isActive(Boolean.TRUE)
+                    .correlationId(correlationId)
+                    .createdBy(organizationDetail.getUpdatedBy()).updatedDate(new Date()).build();
+            orgEntity = organizationRepository.save(organization);
+        }
+        log.info("End of createOrganization in Connector " + orgEntity.getOrganizationName());
+        return orgEntity;
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param customerDetails takes the bean of cust detail
+     * @return customer entity
+     */
+    @Transactional
+    public Customer createCustomer(CustomerDetail customerDetails, Organization organization, String correlationId) {
+        Customer customerResult = null;
+        log.info("Initiate createCustomer in Connector " + "correlationId:" + correlationId);
+        Customer customer = Customer.builder().organizationId(organization).businessName(customerDetails.getBusinessName())
+                .businessType(customerDetails.getBusinessType()).businessCategory(customerDetails.getBusinessCategory())
+                .businessEmail(customerDetails.getBusinessEmail())
+                .userId(customerDetails.getUserId())
+                .currency(customerDetails.getCurrency()).isActive(Boolean.TRUE)
+                .correlationId(correlationId)
+                .createdBy(customerDetails.getCreatedBy()).createdDate(new Date()).build();
+        customerResult = customerRepository.save(customer);
+        log.info("End of createCustomer in Connector " + "correlationId:" + correlationId);
+        return customerResult;
+    }
+
+    /**
+     * This method is used to create the customerAddress for customer
+     *
+     * @param customerAddress
+     * @param customers       id is required to create the cust  Address
+     * @return customer address entity
+     */
+    @Transactional
+    public CustomerAddress createCustomerAddress(CustomerAddressDetail customerAddress, Customer customers, String correlationId) {
+        log.info("Initiate createCustomerAddress in Connector " + "correlationId:" + correlationId);
+        CustomerAddress address = CustomerAddress.builder().addressLine1(customerAddress.getAddressLine1()).addressLine2(customerAddress.getAddressLine2())
+                .addressLine3(customerAddress.getAddressLine3()).city(customerAddress.getCity()).countryCode(customerAddress.getCountryCode())
+                .correlationId(correlationId)
+                .customerId(customers).isActive(Boolean.TRUE).createdBy(customerAddress.getCreatedBy()).createdDate(new Date()).build();
+        CustomerAddress custAddress = addressRepository.save(address);
+        log.info("End of createCustomerAddress in Connector " + "correlationId:" + correlationId);
+        return custAddress;
+    }
+
+    /**
+     * This method is used to create Tier for the customer
+     *
+     * @param tierDetail
+     * @param customer   id is required to create the tier
+     * @return tier object
+     */
+    @Transactional
+    public Tier createTier(TierDetail tierDetail, Customer customer, String correlationId) {
+        log.info("Initiate createTier in Connector " + "correlationId:" + correlationId);
+        Tier tier = Tier.builder().customerId(customer).tierName(tierDetail.getTierName()).isActive(Boolean.TRUE)
+                .correlationId(correlationId)
+                .updatedBy(tierDetail.getUpdatedBy())
+                .updatedDate(new Date())
+                .createdBy(tierDetail.getCreatedBy()).createdDate(new Date()).build();
+        Tier tiers = tierRepository.save(tier);
+
+        log.info("End of createTier in Connector " + "correlationId:" + correlationId);
+        return tiers;
+    }
+
+
+    /**
+     * This method is used to create the list of benefits of customer for package
+     *
+     * @param benefitsDetail
+     * @param customer       benefits are created
+     * @return list of benefits
+     */
+    @Transactional
+    public List<CustomerBenefit> createBenefit(List<BenefitDetail> benefitsDetail, Customer customer, String correlationId) {
+        List<CustomerBenefit> customerBenefits = new ArrayList<>();
+        log.info("Initiate createBenefit in Connector " + "correlationId:" + correlationId);
+        for (BenefitDetail detail : benefitsDetail) {
+            for(Long vendorId : detail.getVendorId()) {
+                CustomerBenefit customerBenefit = CustomerBenefit.builder()
+                        .benefitName(detail.getBenefitName())
+                        .customerId(customer).correlationId(correlationId)
+                        .isActive(Boolean.TRUE)
+                        .createdDate(new Date())
+                        .redirectUrl(detail.getRedirectUrl())
+                        .imageUrl(detail.getImageUrl())
+                        .description(detail.getDescription())
+                        .vendorId(vendorId).build();
+                CustomerBenefit custBenefit = benefitRepository.save(customerBenefit);
+                customerBenefits.add(custBenefit);
+            }
+        }
+        log.info("End of createBenefit in Connector " + "correlationId:" + correlationId);
+        return customerBenefits;
+    }
+
+    /**
+     * This method is used to create the list of custom benefits for the package
+     *
+     *
+     * @param customerBenefit  is required to create the pacakge benefits
+     * @param packages         id is required to create pckg benefit
+     * @return package benefits for the customer
+     */
+    @Transactional
+    //TODO Put null checks here
+    public List<PackagesBenefit> createPackageBenefit(List<PackagesDetail> packagesDetails,
+                                                      List<CustomerBenefit> customerBenefit, List<Packages> packages, String correlationId) {
+        List<PackagesBenefit> packagesBenefits = new ArrayList<>();
+        log.info("Initiate createPackageBenefit in Connector " + "correlationId:" + correlationId);
+        for(PackagesDetail packagesDetail : packagesDetails){
+            for(CustomerBenefit packbenefit:packagesDetail.getBenefits()){
+                for(CustomerBenefit custBenefit : customerBenefit){
+                    if(packbenefit.getBenefitName().equals(custBenefit.getBenefitName())){
+                        for(Packages packages1:packages) {
+                            if(packagesDetail.getPackageName().equals(packages1.getPackageName())) {
+                                PackagesBenefit pckgBenfit = PackagesBenefit.builder().packageId(packages1)
+                                        .customerBenefitId(custBenefit).isActive(Boolean.TRUE)
+                                        .correlationId(correlationId)
+                                        .createdBy(packbenefit.getCreatedBy()).createdDate(new Date()).build();
+                                PackagesBenefit packagesBenefit = packageBenefitsRepository.save(pckgBenfit);
+                                packagesBenefits.add(packagesBenefit);
+                            }
+                        }
+                    }
+                }
+
+            }
+        }
+
+        log.info("End of createPackageBenefit in Connector " + "correlationId:" + correlationId);
+        return packagesBenefits;
+    }
+
+
+    /**
+     * This method is used to create the list of benefits of customer for package
+     *
+     * @param customerUserDetail
+     * @return list of benefits
+     */
+    @Transactional
+    public CustomerUser createCustomerUser(CustomerUserDetail customerUserDetail, Customer customer,
+                                           String correlationId) {
+        log.info("Initiate createCustomerUser in Connector " + "correlationId:" + correlationId);
+        CustomerUser customerUser = CustomerUser.builder()
+                .correlationId(correlationId)
+                .customerId(customer)
+                .isActive(Boolean.TRUE)
+                .firstName(customerUserDetail.getFirstName())
+                .lastName(customerUserDetail.getLastName())
+                .emailId(customerUserDetail.getEmailId())
+                .createdDate(new Date())
+                .createdBy(customerUserDetail.getCreatedBy()).build();
+        customerUser = userRepository.save(customerUser);
+        log.info("End of createBenefit in Connector " + "correlationId:" + correlationId);
+        return customerUser;
+    }
+
+
+    /**
+     * This method is used to create Tier for the customer
+     *
+     * @param createDetail  ,
+     * @param correlationId is required to create the tier
+     * @return tier object
+     */
+    public Customer createAllCustomerDetails(CustomerCreateDetail createDetail, String correlationId, Long customerId) {
+        Organization organization = null;
+        log.info("Initiate createAllCustomerDetails in connector " + " - CorrelationId: " + correlationId);
+        Organization org = this.appendOrganization(createDetail.getOrgDetail(), customerId, correlationId);
+        Customer customer = this.appendCustomer(createDetail.getCustomerDetail(), org, customerId, correlationId);
+        Tier tier = this.createTier(createDetail.getTierDetail(), customer, correlationId);
+        CustomerAddress customerAddress = this.createCustomerAddress(createDetail.getCustAddressDetail(), customer, correlationId);
+        List<CustomerBenefit> benefit = this.createBenefit(createDetail.getBenefitDetail(), customer, correlationId);
+        List<Packages> packages = packagingAdapter.createPackages(createDetail.getPackagesDetail(), customer, tier, correlationId);
+        List<PackagesBenefit> packageBenefit = this.createPackageBenefit(createDetail.getPackagesDetail(),benefit, packages, correlationId);
+        DomainDetails domainDetails = domainDetailsAdapter.createDomainDetails(createDetail.getDomainDetails(), customer, correlationId);
+        List<SolicitationPackage> solicitationPackages = packagingAdapter.createSolicitationPackages(createDetail.getSolicitationDetail(),packages,customer,correlationId);
+        log.info("End of createAllCustomerDetails  in connector " + " - CorrelationId: " + correlationId);
+        return customer;
+    }
+
+
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param customerCreateDetail takes the bean of cust detail
+     * @return customer entity
+     */
+    @Transactional
+    public Customer createCustomerEvent(CustomerCreateDetail customerCreateDetail, String correlationId, Long customerId) {
+        Customer customer = null;
+        Organization organization = null;
+        log.info("Initiate createCustomerEvent in Connector " + " - CorrelationId: " + correlationId);
+        Customer orgId = customerRepository.getActiveCustomerById(customerId);
+        organization = this.createOrganization(customerCreateDetail.getOrgDetail(), correlationId);
+        customer = this.createCustomer(customerCreateDetail.getCustomerDetail(), organization, correlationId);
+        log.info("End of createCustomerEvent in Connector " + " - CorrelationId: " + correlationId);
+        return customer;
+    }
+
+    /**
+     * @param customerActivationDetails
+     * @return Customer
+     */
+    @Transactional
+    public Customer createActivationDetails(CustomerActivationDetails customerActivationDetails, String correlationId) {
+        Customer customer = null;
+        Organization organization = null;
+        CustomerUser user = null;
+        log.info("Initiate createActivationDetails in Connector " + " - CorrelationId: " + correlationId);
+        organization = this.createOrganization(customerActivationDetails.getOrgDetail(), correlationId);
+        customer = this.createCustomerforActivation(customerActivationDetails.getCustomerDetail(), organization, correlationId);
+        user = this.createCustomerUser(customerActivationDetails.getUserDetail(), customer, correlationId);
+        this.updateUserIdForCustomer(user,customer.getCustomerId());
+        customer.setUserId(user.getCustomerUserId());
+        log.info("End of createActivationDetails in Connector " + " - CorrelationId: " + correlationId);
+        return customer;
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     *
+     * @return customer entity
+     */
+    @Transactional
+    public void updateUserIdForCustomer(CustomerUser user,Long customerId) {
+        Customer customerResult = null;
+        log.info("Initiate createCustomerforActivation in Connector ");
+        customerRepository.updateUserIdForCustomer(user.getCustomerUserId(),customerId);
+        log.info("End of updateUserIdForCustomer in Connector " );
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param customerDetails takes the bean of cust detail
+     * @return customer entity
+     */
+    @Transactional
+    public Customer createCustomerforActivation(CustomerDetail customerDetails, Organization organization, String correlationId) {
+        Customer customerResult = null;
+        // String activation_code = CorrelationIdUtil.generateCorrelationId();
+        String activation_code = CorrelationIdUtil.generateActivationCode(correlationId);
+        log.info("Initiate createCustomerforActivation in Connector " + "correlationId:" + correlationId);
+        Customer customer = Customer.builder().organizationId(organization)
+                .businessName(organization.getOrganizationName())
+                .isActive(Boolean.TRUE)
+                .activationStatus(Boolean.FALSE)
+                .activationCode(activation_code)
+                .correlationId(correlationId)
+                .createdBy(customerDetails.getCreatedBy()).createdDate(new Date()).build();
+        customerResult = customerRepository.save(customer);
+        log.info("End of createCustomerforActivation in Connector " + "correlationId:" + correlationId);
+        return customerResult;
+    }
+
+    public ActivationValidateResponse createValidateActivationDetails(ActivationValidateDetails activationValidateDetails,
+                                                                      String correlationId) {
+        log.info("Initiate createValidateActivationDetails in Connector " + "correlationId:" + correlationId);
+        ActivationValidateResponse validateResponse = customerValidator.validateActivationCode(activationValidateDetails);
+        ActivationValidateResponse statusValidateResponse = ActivationValidateResponse.builder().status(Boolean.TRUE).build();
+        log.info("End of createValidateActivationDetails in Connector " + "correlationId:" + correlationId);
+        return validateResponse;
+    }
+
+    /**
+     * This method is used to create orgation for customer journey
+     *
+     * @param organizationDetail takes orgDetails as param
+     * @return Organization
+     */
+    @Transactional
+    public Organization appendOrganization(OrganizationDetail organizationDetail, Long customerId, String correlationId) {
+        log.info("Initiate appendOrganization in Connector " + "correlationId:" + correlationId);
+        Customer customer = customerRepository.getActiveCustomerById(customerId);
+        Organization orgEntity = organizationRepository.getRecordById(customer.getOrganizationId().getOrganizationId());
+        if (organizationDetail.getOrganizationName() != null) {
+            orgEntity.setOrganizationName(organizationDetail.getOrganizationName());
+        }
+        if (organizationDetail.getOrganizationDesc() != null) {
+            orgEntity.setOrganizationDesc(organizationDetail.getOrganizationDesc());
+        }
+        if (organizationDetail.getOrganizationSize() != null) {
+            orgEntity.setOrganizationSize(organizationDetail.getOrganizationSize());
+        }
+        if (organizationDetail.getIsActive() != null) {
+            orgEntity.setIsActive(Boolean.TRUE);
+        }
+        if (organizationDetail.getUpdatedBy() != null) {
+            orgEntity.setUpdatedBy(organizationDetail.getUpdatedBy());
+        }
+
+        orgEntity.setUpdatedDate(new Date());
+        Organization organization = organizationRepository.save(orgEntity);
+        log.info("End of appendOrganization in Connector " + "correlationId:" + correlationId);
+        return organization;
+    }
+
+    /**
+     * @param customerDetail
+     * @param organization
+     * @return Customer
+     */
+    public Customer appendCustomer(CustomerDetail customerDetail, Organization organization, Long customerId, String correlationId) throws CustomerRuntimeException {
+        log.info("Initiate appendCustomer in connector " + "correlationId:" + correlationId);
+        Customer customer = customerRepository.getActiveCustomerById(customerId);
+        if (customerDetail.getOrganizationId() != null) {
+            customer.setOrganizationId(organization);
+        }
+        if (customerDetail.getUserId() != null) {
+            customer.setUserId(customerDetail.getUserId());
+        }
+        if (customerDetail.getBusinessName() != null) {
+            customer.setBusinessName(customerDetail.getBusinessName());
+        }
+        if (customerDetail.getBusinessEmail() != null) {
+            customer.setBusinessEmail(customerDetail.getBusinessEmail());
+        }
+        if (customerDetail.getBusinessType() != null) {
+            customer.setBusinessType(customerDetail.getBusinessType());
+        }
+        customer.setBusinessCategory(customerDetail.getBusinessCategory());
+
+        if (customerDetail.getPhoneNo() != null) {
+            customer.setPhone(customerDetail.getPhoneNo());
+        }
+        if (customerDetail.getCurrency() != null) {
+            customer.setCurrency(customerDetail.getCurrency());
+        }
+        if (customerDetail.getRegion() != null) {
+            customer.setRegion(customerDetail.getRegion());
+        }
+        customer.setCorrelationId(correlationId);
+        customer.setIsActive(Boolean.TRUE);
+        customer.setUpdatedBy(customerDetail.getUpdatedBy());
+        customer.setUpdatedDate(new Date());
+        customer.setCommunicationPreferences(customerDetail.getCommunicationPreferences());
+        Customer custObj = customerRepository.save(customer);
+        log.info("End of appendCustomer in connector " + "correlationId:" + correlationId);
+        return custObj;
+
+    }
+
+
+    /**
+     * @param id
+     * @return
+     */
+    public Customer getCustomer(Long id, String corelationId) throws CustomerRuntimeException {
+        log.info("Initiate getCustomer in connector " + "customer id:" + id);
+        CustomerValidator validator = new CustomerValidator();
+        validator.validateField("Customer", id.toString());
+        log.info("validation success  " + "customer id:" + id);
+        Customer customer = null;
+        customer = customerRepository.getRecordById(id);
+        if(Objects.isNull(customer))
+        {
+            throw new CustomerRuntimeException();
+        }
+        log.info("customer object " + customer);
+        validator.validateEntity("customer", customer);
+        log.info("customer validateEntity is success " );
+        return customer;
+
+    }
+
+
+    public Customer updateAllCustomerDetails(CustomerUpdateDetail customerUpdateDetail, Long id, String correlationId) {
+        log.info("Initiate updateAllCustomerDetails in connector " + "correlationId:" + correlationId);
+        Customer customer = this.getCustomer(id, correlationId);
+        if (customerUpdateDetail.getCustomerDetail() != null) {
+            Customer updateCustomer = this.updateCustomer(customerUpdateDetail.getCustomerDetail(), customer, correlationId);
+        }
+        if (customerUpdateDetail.getTierDetail() != null) {
+            Tier tier = this.updateTier(customerUpdateDetail.getTierDetail(), customer, correlationId);
+        }
+        if (customerUpdateDetail.getCustAddressDetail() != null) {
+            CustomerAddress customerAddress = this.updateCustomerAddress(customerUpdateDetail.getCustAddressDetail(), customer, correlationId);
+        }
+        if (customerUpdateDetail.getPackagesDetail() != null) {
+            Packages packages = packagingAdapter.updatePackages(customerUpdateDetail.getPackagesDetail(), customer, correlationId);
+        }
+        if (customerUpdateDetail.getBenefitDetail() != null) {
+            CustomerBenefit benefit = this.updateCustomerBenifit(customerUpdateDetail.getBenefitDetail(), customer, correlationId);
+        }
+        if (customerUpdateDetail.getPackageBenefitsDetail() != null) {
+            PackagesBenefit packageBenefit = this.updatePackageBenifit(customerUpdateDetail.getPackageBenefitsDetail()
+                    , customer, correlationId);
+        }
+        log.info("End of  updateAllCustomerDetails in connector " + "correlationId:" + correlationId);
+        return customer;
+    }
+
+    /**
+     * @param customerDetail
+     * @param customer
+     * @return
+     */
+    public Customer updateCustomer(CustomerDetail customerDetail, Customer customer, String correlationId) throws CustomerRuntimeException {
+        log.info("Inside updateCustomer method in connector " + "correlationId:" + correlationId);
+        CustomerValidator validator = new CustomerValidator();
+        if (customerDetail.getOrganizationId() != null) {
+            Organization organization = organizationRepository.getRecordById(customerDetail.getOrganizationId());
+            validator.validateEntity("customer", customer);
+            customer.setOrganizationId(organization);
+        }
+        customer.setCorrelationId(correlationId);
+
+        if (customerDetail.getUserId() != null) {
+            customer.setUserId(customerDetail.getUserId());
+        }
+        if (customerDetail.getBusinessName() != null) {
+            customer.setBusinessName(customerDetail.getBusinessName());
+        }
+        if (customerDetail.getBusinessEmail() != null) {
+            customer.setBusinessName(customerDetail.getBusinessEmail());
+        }
+        if (customerDetail.getPhoneNo() != null) {
+            customer.setPhone(customerDetail.getPhoneNo());
+        }
+        if (customerDetail.getCurrency() != null) {
+            customer.setCurrency(customerDetail.getCurrency());
+        }
+        if (customerDetail.getBusinessType() != null) {
+            customer.setBusinessType(customerDetail.getBusinessType());
+        }
+        if (customerDetail.getRegion() != null) {
+            customer.setRegion(customerDetail.getRegion());
+        }
+        customer.setIsActive(true);
+        customer.setUpdatedBy(customerDetail.getUpdatedBy());
+        customer.setUpdatedDate(new Date());
+        Customer cust = customerRepository.save(customer);
+        log.info("end update customer method in connector " + "correlationId:" + correlationId);
+        return cust;
+
+    }
+
+    /**
+     * @param customerAddressDetail
+     * @param customer
+     * @return
+     */
+    public CustomerAddress updateCustomerAddress(CustomerAddressDetail customerAddressDetail, Customer customer, String correlationId) {
+        log.info("Inside updateCustomerAddress method in connector " + "correlationId:" + correlationId);
+        CustomerAddress customerAddress = null;
+        CustomerValidator validator = new CustomerValidator();
+        Long customerId = customer.getCustomerId();
+        validator.validateField("customerId", customerId.toString());
+        customerAddress = addressRepository.getRecordByCustomerId(
+                Customer.builder().customerId(customerId).build());
+        if(!Objects.isNull(customerAddress))
+        {
+            validator.validateEntity("customerAddress", customerAddress);
+        }
+        else
+        {
+            customerAddress = CustomerAddress.builder().build();
+            customerAddress.setCustomerId(Customer.builder().customerId(customerId).build());
+        }
+
+        customerAddress.setCorrelationId(correlationId);
+
+
+            if (customerAddressDetail.getAddressLine1() != null) {
+                customerAddress.setAddressLine1(customerAddressDetail.getAddressLine1());
+            }
+            if (customerAddressDetail.getAddressLine2() != null) {
+                customerAddress.setAddressLine2(customerAddressDetail.getAddressLine2());
+            }
+            if (customerAddressDetail.getAddressLine3() != null) {
+                customerAddress.setAddressLine3(customerAddressDetail.getAddressLine3());
+            }
+            if (customerAddressDetail.getCity() != null) {
+                customerAddress.setCity(customerAddressDetail.getCity());
+            }
+            if (customerAddressDetail.getSate() != null) {
+                customerAddress.setSate(customerAddressDetail.getSate());
+            }
+            if (customerAddressDetail.getZipCode() != null) {
+                customerAddress.setZipCode(customerAddressDetail.getZipCode());
+            }
+            if (customerAddressDetail.getCountryCode() != null) {
+                customerAddress.setCountryCode(customerAddressDetail.getCountryCode());
+            }
+            customerAddress.setIsActive(true);
+            customerAddress.setCreatedBy(customerAddressDetail.getCreatedBy());
+            customerAddress.setUpdatedBy(customerAddressDetail.getUpdatedBy());
+            customerAddress.setUpdatedDate(new Date());
+            CustomerAddress address = addressRepository.save(customerAddress);
+            log.info("end of updateCustomerAddress method in connector " + "correlationId:" + correlationId);
+            return address;
+       /* else {
+            log.info("error in updateCustomerAddress method in connector " + "correlationId:" + correlationId);
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "customerId with given customerId is not present in record");
+        }*/
+
+    }
+
+
+    /**
+     * @param tierDetail
+     * @param customer
+     * @return
+     */
+    public Tier updateTier(TierDetail tierDetail, Customer customer, String correlationId) {
+        log.info("inside updateTier method in connector " + "correlationId:" + correlationId);
+        Tier tier = null;
+        CustomerValidator validator = new CustomerValidator();
+
+        Long tierId = tierDetail.getId();
+        validator.validateField("tierId", tierId.toString());
+
+        tier = tierRepository.getRecordById(tierId);
+        validator.validateEntity("tier", tier);
+        tier.setCorrelationId(correlationId);
+        if (tier.getCustomerId().getCustomerId().equals(customer.getCustomerId())) {
+            if (tierDetail.getTierName() != null) {
+                tier.setTierName(tierDetail.getTierName());
+            }
+            tier.setIsActive(true);
+            tier.setUpdatedBy(tierDetail.getUpdatedBy());
+            tier.setUpdatedDate(new Date());
+            Tier tierResult = tierRepository.save(tier);
+            log.info("end of updateTier method in connector " + "correlationId:" + correlationId);
+            return tierResult;
+        } else {
+            log.info("error in updateTier method in connector " + "correlationId:" + correlationId);
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "customerId with given TierId is not present in record");
+        }
+    }
+
+
+
+    /**
+     * @param packageBenefitsDetail
+     * @param customer
+     * @return
+     */
+
+    public PackagesBenefit updatePackageBenifit(PackageBenefitsDetail packageBenefitsDetail, Customer customer, String correlationId) {
+        log.info("inside updatePackageBenifit method in connector " + "correlationId:" + correlationId);
+        PackagesBenefit packagesBenefit = null;
+        CustomerValidator validator = new CustomerValidator();
+        Long packagesBenefitId = packageBenefitsDetail.getId();
+        validator.validateField("packagesBenefitId", packagesBenefitId.toString());
+        packagesBenefit = packageBenefitsRepository.getRecordById(packagesBenefitId);
+        validator.validateEntity("packagesBenefit", packagesBenefit);
+        packagesBenefit.setCorrelationId(correlationId);
+        if (packagesBenefit.getPackageId().getTierId().getCustomerId().getCustomerId().equals(customer.getCustomerId())) {
+
+            if (packageBenefitsDetail.getPackageId() != 0) {
+                Packages packages = packagingAdapter.getPackages(packageBenefitsDetail);
+                validator.validateEntity("Packages", packages);
+                packagesBenefit.setPackageId(packages);
+            }
+            if (packageBenefitsDetail.getBenefitId() != 0) {
+                CustomerBenefit customerBenefit = benefitRepository.getRecordById(packageBenefitsDetail.getBenefitId());
+                validator.validateEntity("CustomerBenefit", customerBenefit);
+                packagesBenefit.setCustomerBenefitId(customerBenefit);
+            }
+            packagesBenefit.setIsActive(true);
+            packagesBenefit.setUpdatedBy(packageBenefitsDetail.getUpdatedBy());
+            packagesBenefit.setUpdatedDate(new Date());
+            PackagesBenefit packagesBenefitResult = packageBenefitsRepository.save(packagesBenefit);
+            log.info("end of updatePackageBenifit method in connector " + "correlationId:" + correlationId);
+            return packagesBenefitResult;
+        } else {
+            log.info("error in updatePackageBenifit method in connector " + "correlationId:" + correlationId);
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "customerId with given packagesBenefitId is not present in record");
+        }
+    }
+
+
+
+    /**
+     * @param benefitDetail
+     * @param customer
+     * @return
+     */
+    @Transactional
+    public CustomerBenefit updateCustomerBenifit(BenefitDetail benefitDetail, Customer customer, String correlationId) {
+        log.info("inside updateCustomerBenifit method in connector " + "correlationId:" + correlationId);
+        CustomerValidator validator = new CustomerValidator();
+        Long customerBenefitId = benefitDetail.getId();
+        validator.validateField("customerBenefitId", customerBenefitId.toString());
+
+        CustomerBenefit customerBenefit = benefitRepository.getRecordById(customerBenefitId);
+        validator.validateEntity("customerBenefit", customerBenefit);
+        customerBenefit.setCorrelationId(correlationId);
+
+        if (customerBenefit.getCustomerId().getCustomerId().equals(customer.getCustomerId())) {
+            CustomerBenefit customerBenefitResult = benefitRepository.save(customerBenefit);
+            log.info("end of updateCustomerBenifit method in connector " + "correlationId:" + correlationId);
+            return customerBenefitResult;
+        } else {
+            log.info("error in updateCustomerBenifit method in connector " + "correlationId:" + correlationId);
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "customerId with given customerBenefitId is not present in record");
+        }
+
+    }
+
+
+    public void updateCustomerDomainNMAStatus(CustomerDomainStatusUpdateEvent event) throws CustomerRuntimeException {
+        CustomerStatus customerStatus = CustomerStatus.builder().customerId(event.getCustomerId())
+                .correlationId(event.getCorrelationId())
+                .build();
+        Optional<Customer> customer = getCustomer(customerStatus);
+        //TODO convert into optional
+        if (customer.isPresent()) {
+            domainDetailsAdapter.updateDomainDetails(event, customer);
+            customerStatusAdapter.updateMarketingAutomationStatus(customerStatus);
+
+        }
+    }
+
+    @Transactional
+    public void updateCustomerOrgTierNAddressDetails(CustomerUpdateDetail customerUpdateDetail, Organization organization,List<Tier> tierList)
+            throws CustomerRuntimeException {
+       CustomerAddress customerAddress = updateCustomerAddress(customerUpdateDetail.getCustAddressDetail(),
+                Customer.builder().customerId(customerUpdateDetail.getCustomerId()).build(),"");
+       List<CustomerAddress> customerAddressCollection = new ArrayList<>();
+       customerAddressCollection.add(customerAddress);
+
+       Customer customer = customerRepository.getRecordById(customerUpdateDetail.getCustomerId());
+       customer.setCustomerAddressCollection(customerAddressCollection);
+       customer.setTierCollection(tierList);
+       customer.setOrganizationId(organization);
+        if(customerUpdateDetail.getCustomerDetail().getBusinessEmail()!=null)
+        {
+            customer.setBusinessEmail(customerUpdateDetail.getCustomerDetail().getBusinessEmail());
+        }
+        if(customerUpdateDetail.getCustomerDetail().getBusinessName()!=null)
+        {
+            customer.setBusinessName(customerUpdateDetail.getCustomerDetail().getBusinessName());
+        }
+        if(customerUpdateDetail.getCustomerDetail().getBusinessType()!=null)
+        {
+            customer.setBusinessType(customerUpdateDetail.getCustomerDetail().getBusinessType());
+        }
+        if(customerUpdateDetail.getCustomerDetail().getBusinessCategory()!=null)
+        {
+            customer.setBusinessCategory(customerUpdateDetail.getCustomerDetail().getBusinessCategory());
+        }
+        if(customerUpdateDetail.getCustomerDetail().getRegion()!=null)
+        {
+            customer.setRegion(customerUpdateDetail.getCustomerDetail().getRegion());
+        }
+        if(customerUpdateDetail.getCustomerDetail().getPhoneNo()!=null)
+        {
+            customer.setPhone(customerUpdateDetail.getCustomerDetail().getPhoneNo());
+        }
+        if(customerUpdateDetail.getCustomerDetail().getCurrency()!=null)
+        {
+            customer.setCurrency(customerUpdateDetail.getCustomerDetail().getCurrency());
+        }
+        if(customerUpdateDetail.getCustomerDetail().getCommunicationPreferences()!=null)
+        {
+            customer.setCommunicationPreferences(customerUpdateDetail.getCustomerDetail().getCommunicationPreferences());
+        }
+        if(customerUpdateDetail.getCustomerDetail().getUpdatedBy()!=null)
+        {
+            customer.setUpdatedBy(customerUpdateDetail.getCustomerDetail().getUpdatedBy());
+        }
+        customer.setUpdatedDate(new Date());
+       customerRepository.save(customer);
+    }
+
+    public Optional<Customer> getCustomer(CustomerStatus customerStatus) {
+        Optional<Customer> customer = Optional.ofNullable(customerRepository.getRecordById(customerStatus.getCustomerId()));
+        return customer;
+    }
+
+    @Transactional
+    public CustomerUserResponse addCustomerUserAndRole(CustomerUserRequest customerUserRequest, String correlationId, Long customerId) {
+        CustomerUser customerUser = null;
+        Customer customer = null;
+        CustomerRole userRole= null;
+        log.info("Initiate addCustomerUserRole in Connector " + " - CorrelationId: " + correlationId);
+        Customer cusId = customerRepository.getRecordById(customerId);
+        //TODO Create customer User
+        //TODO create customer Role
+        customerUser = createCustomerUser(customerUserRequest, cusId, correlationId);
+        List<CustomerRole> customerRoleList =createUserRoles(customerUser,customerUserRequest,userRole,correlationId);
+        List<CustomerUserRoleResponse> customerUserRoleResponseList = new ArrayList<>();
+        for(CustomerRole role : customerRoleList)
+        {
+            CustomerUserRoleResponse customerUserRoleResponse = CustomerUserRoleResponse.builder().isSuccess("true")
+                    .uri("/role/"+role.getCustomerRoleId()).build();
+            customerUserRoleResponseList.add(customerUserRoleResponse);
+        }
+        CustomerUserResponse customerUserResponse = CustomerUserResponse.builder()
+                .createdBy(customerUser.getCreatedBy())
+                .correlationId(customerUser.getCorrelationId())
+                .createdDate(customerUser.getCreatedDate())
+                .isActive(customerUser.getIsActive())
+                .emailId(customerUser.getEmailId())
+                .roles(customerUserRoleResponseList)
+                .build();
+        log.info("End of addCustomerUserRole in Connector " + " - CorrelationId: " + correlationId);
+        return  customerUserResponse;
+    }
+    @Transactional
+    public CustomerUser createCustomerUser(CustomerUserRequest customerUserRequest, Customer customer,
+                                           String correlationId) {
+        log.info("Initiate createCustomerUser in Connector " + "correlationId:" + correlationId);
+        CustomerUser customerUser =null;
+        customerUser = CustomerUser.builder()
+                .correlationId(correlationId)
+                .customerId(customer)
+                .isActive(customerUserRequest.getIsActive())
+                .firstName(customerUserRequest.getFirstName())
+                .lastName(customerUserRequest.getLastName())
+                .emailId(customerUserRequest.getEmailId())
+                .createdDate(new Date())
+                .createdBy(customerUserRequest.getCreatedBy()).build();
+        customerUser = userRepository.save(customerUser);
+            return customerUser;
+    }
+
+    @Transactional
+    private List<CustomerRole> createUserRoles(CustomerUser customerUser,CustomerUserRequest customerUserRequest, CustomerRole userroles, String correlationId) {
+        List<CustomerRole> customerRoleList = new ArrayList<>();
+        log.info("Initiate UserRole in connector " + "correlationId:" + correlationId);
+        String customerRequestId = CorrelationIdUtil.generateCorrelationId();
+        String details = util.objectToString(customerUserRequest);
+        //TODO user camel case as Java standards
+        if(null!= customerUserRequest.getRoles() && !customerUserRequest.getRoles().isEmpty() && customerUserRequest.getRoles().size()>0)
+        {
+            for(CustomerUserRoleRequest userRoleRequest:customerUserRequest.getRoles())
+            {
+                CustomerRole userRole = CustomerRole.builder()
+                        //  .customerRoleId(userroles.getCustomerRoleId())
+                        .customerId(customerUser.getCustomerId().getCustomerId())
+                        .customerUserId(customerUser.getCustomerUserId())
+                        .correlationId(correlationId)
+                        .isActive(customerUserRequest.getIsActive())
+                        .createdBy(customerUserRequest.getCreatedBy())
+                        .createdDate(new Date())
+                        .updatedBy(customerUserRequest.getUpdatedBy())
+                        .updatedDate(customerUserRequest.getUpdatedDate())
+                        .roles(userRoleRequest.getRoleType())
+                        .build();
+                userRole = customerRoleRepository.save(userRole);
+                customerRoleList.add(userRole);
+            }
+        }
+
+        log.info("End of  UserRole in connector " + "correlationId:" + correlationId);
+        return customerRoleList;
+    }
+}
Index: src/main/java/com/syzegee/customer/events/adapter/CustomerStatusAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/CustomerStatusAdapter.java b/src/main/java/com/syzegee/customer/events/adapter/CustomerStatusAdapter.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/CustomerStatusAdapter.java	(date 1613491889000)
@@ -0,0 +1,42 @@
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.entity.CustomerStatus;
+import com.syzegee.customer.events.enums.CustomerStatusEnum;
+import com.syzegee.customer.events.repository.CustomerStatusRepository;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+import org.springframework.transaction.annotation.Transactional;
+
+
+@Component
+public class CustomerStatusAdapter {
+
+    @Autowired
+    private CustomerStatusRepository customerStatusRepository;
+
+    @Transactional
+    public void updateAllCustomerStatuses(CustomerStatus customerStatus) {
+        CustomerStatusEnum.UPDATE_CUSTOMER_STATUS.updateStatus(customerStatus);
+        customerStatusRepository.save(customerStatus);
+    }
+
+    @Transactional
+    public void updateOnboardCustomerStatus(CustomerStatus customerStatus) {
+        CustomerStatusEnum.UPDATE_ONBOARD_STATUS.updateStatus(customerStatus);
+        customerStatusRepository.save(customerStatus);
+    }
+
+    @Transactional
+    public void updateCmsSiteCustomerStatus(CustomerStatus customerStatus) {
+        CustomerStatusEnum.UPDATE_CMS_SITE_STATUS.updateStatus(customerStatus);
+        customerStatusRepository.save(customerStatus);
+    }
+
+    @Transactional
+    public void updateMarketingAutomationStatus(CustomerStatus customerStatus) {
+        CustomerStatusEnum.UPDATE_MARKETING_AUTOMATION_STATUS.updateStatus(customerStatus);
+        customerStatusRepository.save(customerStatus);
+    }
+
+
+}
Index: src/main/java/com/syzegee/customer/events/adapter/PackagingAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/PackagingAdapter.java b/src/main/java/com/syzegee/customer/events/adapter/PackagingAdapter.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/PackagingAdapter.java	(date 1613491889000)
@@ -0,0 +1,152 @@
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.entity.Customer;
+import com.syzegee.customer.events.entity.Packages;
+import com.syzegee.customer.events.entity.SolicitationPackage;
+import com.syzegee.customer.events.entity.Tier;
+import com.syzegee.customer.events.exception.CustomerRuntimeException;
+import com.syzegee.customer.events.model.PackageBenefitsDetail;
+import com.syzegee.customer.events.model.PackagesDetail;
+import com.syzegee.customer.events.model.SolicitationDetail;
+import com.syzegee.customer.events.repository.PackageRepository;
+import com.syzegee.customer.events.repository.SolicitationPackageRepository;
+import com.syzegee.customer.events.validator.CustomerValidator;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Component;
+import org.springframework.transaction.annotation.Transactional;
+
+import java.util.*;
+
+@Component
+@Slf4j
+public class PackagingAdapter {
+
+    @Autowired
+    private SolicitationPackageRepository solicitationPackageRepository;
+
+    @Autowired
+    private PackageRepository packageRepository;
+
+    private int getUniqueRandomNumberSolicitation(){
+        Random random = new Random();
+        int randomNumber = random.nextInt(9000) + 1000;
+        SolicitationPackage recordBySoliciationId = solicitationPackageRepository.getRecordBySoliciationId(randomNumber);
+        if(recordBySoliciationId!=null){
+            getUniqueRandomNumberSolicitation();
+        }
+        return randomNumber;
+    }
+
+    public List<Map<String, Object>> getSolicitationPackageList(Long customerId) {
+        log.info("Initiate getSolicitationPackageList in connector " + "customer id:" + customerId);
+        List<Map<String, Object>> solicitationPackages = solicitationPackageRepository.getRecordByCustomerIdAndDate(customerId,new Date());
+        log.info("solicitationPackages object " + solicitationPackages);
+        log.info("End getSolicitationPackageList in connector " + "customer id:" + customerId);
+        return solicitationPackages;
+
+    }
+
+
+    /**
+     *
+     * @param solicitationDetails
+     * @param packages
+     * @param customer
+     * @param correlationId
+     * @return
+     */
+    @Transactional
+    public List<SolicitationPackage> createSolicitationPackages(List<SolicitationDetail> solicitationDetails, List<Packages> packages, Customer customer, String correlationId) {
+        List<SolicitationPackage> solicitationPackages = new ArrayList<>();
+        log.info("Initiate createSolicitationPackages in Connector " + "correlationId:" + correlationId);
+        for (SolicitationDetail solicitationDetail : solicitationDetails) {
+            int randomNumber = getUniqueRandomNumberSolicitation();
+            for (String packageName : solicitationDetail.getPackages()) {
+                for (Packages pack : packages) {
+                    if (packageName.equals(pack.getPackageName())) {
+                        SolicitationPackage solPackage = SolicitationPackage.builder()
+                                .solicitationId(randomNumber)
+                                .packages(pack)
+                                .solicitationName(solicitationDetail.getSolicitationName())
+                                .solicitationDescription(solicitationDetail.getSolicitationDesc())
+                                .isActive(Boolean.TRUE)
+                                .customer(customer)
+                                .startFrom(solicitationDetail.getStartDate())
+                                .endDate(solicitationDetail.getEndDate())
+                                .createdDate(new Date())
+                                .build();
+                        SolicitationPackage solicitationPackage = solicitationPackageRepository.save(solPackage);
+                        solicitationPackages.add(solicitationPackage);
+                    }
+                }
+            }
+        }
+        log.info("End of createSolicitationPackages in Connector " + "correlationId:" + correlationId);
+        return solicitationPackages;
+    }
+
+    /**
+     * @param packagesDetail
+     * @param customer
+     * @return
+     */
+    public Packages updatePackages(PackagesDetail packagesDetail, Customer customer, String correlationId) {
+        log.info("inside updatePackages method in connector " + "correlationId:" + correlationId);
+        Packages packages = null;
+        CustomerValidator validator = new CustomerValidator();
+
+        Long packagesId = packagesDetail.getId();
+        validator.validateField("packagesId", packagesId.toString());
+
+        packages = packageRepository.getRecordById(packagesId);
+        validator.validateEntity("packages", packages);
+        packages.setCorrelationId(correlationId);
+        if (packages.getTierId().getCustomerId().getCustomerId().equals(customer.getCustomerId())) {
+            if (packagesDetail.getPackageName() != null) {
+                packages.setPackageName(packagesDetail.getPackageName());
+            }
+            packages.setIsActive(true);
+            packages.setUpdatedBy(packagesDetail.getUpdatedBy());
+            packages.setUpdatedDate(new Date());
+            Packages packagesResult = packageRepository.save(packages);
+            log.info("end of updatePackages method in connector " + "correlationId:" + correlationId);
+            return packagesResult;
+        } else {
+            log.info("error in updatePackages method in connector " + "correlationId:" + correlationId);
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "customerId with given packagesId is not present in record");
+        }
+    }
+
+    /**
+     * This method is used to create the packages for the customer
+     *
+     * @param packagesDetails
+     * @param tier            based on tier it creates the packages
+     * @return the packages for customer
+     */
+    @Transactional
+    public List<Packages> createPackages(List<PackagesDetail> packagesDetails, Customer customer, Tier tier, String correlationId) {
+        List<Packages> packages = new ArrayList<>();
+        log.info("Initiate createPackages in Connector " + "correlationId:" + correlationId);
+        for (PackagesDetail packDetail : packagesDetails) {
+            Packages pack = Packages.builder().tierId(tier).packageName(packDetail.getPackageName()).createdBy(packDetail.getCreatedBy())
+                    .correlationId(correlationId)
+                    .customerId(customer)
+                    .isActive(Boolean.TRUE)
+                    .createdDate(new Date()).build();
+            Packages pkg = packageRepository.save(pack);
+            packages.add(pkg);
+        }
+        log.info("End of createPackages in Connector " + "correlationId:" + correlationId);
+        return packages;
+    }
+
+    public Packages getPackages(PackageBenefitsDetail packageBenefitsDetail) {
+        Packages packages = packageRepository.getRecordById(packageBenefitsDetail.getPackageId());
+        return packages;
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/adapter/EventPublisher.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/EventPublisher.java b/src/main/java/com/syzegee/customer/events/adapter/EventPublisher.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/EventPublisher.java	(date 1613491889000)
@@ -0,0 +1,31 @@
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.service.MessageProducer;
+import lombok.Data;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Data
+@Component
+public class EventPublisher {
+
+    @Autowired
+    private MessageProducer messageProducer;
+
+
+    public void send(String message,String topic) {
+        try {
+            log.info("Initiate to send in EventPublisher " + " - message: " + message + "  topic: " + topic);
+            messageProducer.send(topic, message);
+        }catch(Exception e)
+        {
+            e.printStackTrace();
+        }
+    }
+
+}
\ No newline at end of file
Index: src/main/java/com/syzegee/customer/events/adapter/CrafterConnectors.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/CrafterConnectors.java b/src/main/java/com/syzegee/customer/events/adapter/CrafterConnectors.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/CrafterConnectors.java	(date 1613491889000)
@@ -0,0 +1,309 @@
+package com.syzegee.customer.events.adapter;
+
+
+import com.syzegee.customer.events.domain.crafter.*;
+import com.syzegee.customer.events.util.CrafterTokenUtil;
+import com.syzegee.customer.events.util.CrafterXmlConverter;
+import lombok.extern.slf4j.Slf4j;
+import org.json.JSONObject;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+
+import javax.ws.rs.client.Client;
+import javax.ws.rs.client.ClientBuilder;
+import javax.ws.rs.client.Entity;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.MultivaluedMap;
+import javax.ws.rs.core.Response;
+import javax.xml.bind.JAXBException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import static com.syzegee.customer.events.constants.Constants.*;
+import static org.apache.commons.lang3.StringUtils.isNotBlank;
+
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class CrafterConnectors {
+
+    @Value("${Crafter.url}")
+    private  String crafterSiteURL;
+    @Value("${Crafter.userName}")
+    private String crafterUserName;
+    @Value("${Crafter.firstName}")
+    private String crafterFirstName;
+    @Value("${Crafter.lastName}")
+    private String crafterLastName;
+    @Value("${Crafter.groups}")
+    private String crafterGroups;
+    @Value("${Crafter.email}")
+    private String email;
+    @Value("${Crafter.secureKey}")
+    private String crafterSecureKey;
+    @Value("${Crafter.password}")
+    private String crafterPassword;
+    @Value("${Crafter.authenticationUrl}")
+    private String authenticationUrl;
+    @Value("${Crafter.createUserUrl}")
+    private String createUserUrl;
+    @Value("${Crafter.addMemberToGroupUrl}")
+    private String addMemberToGroupUrl;
+    @Value("${Crafter.startSiteUrl}")
+    private String startSiteUrl;
+    @Value("${Crafter.createSiteUrl}")
+    private String createSiteUrl;
+    @Value("${Crafter.writeContent.writeContentUrl}")
+    private String writeContentUrl;
+    @Value("${Crafter.writeContent.phase}")
+    private String phase;
+    @Value("${Crafter.writeContent.path}")
+    private String path;
+    @Value("${Crafter.writeContent.fileName}")
+    private String fileName;
+    @Value("${Crafter.writeContent.user}")
+    private String user;
+    @Value("${Crafter.writeContent.contentType}")
+    private String contentType;
+    @Value("${Crafter.writeContent.unlock}")
+    private Boolean unlock;
+    @Value("${Crafter.deployment.url}")
+    private String deploymentUrl;
+
+    @Value("${Crafter.jessionIdValue}")
+    private String JSESSIONID_VALUE;
+    @Value("${Crafter.xXsrfTokenValue}")
+    private String X_XSRF_TOKEN_VALUE;
+
+    private Client restClient = ClientBuilder.newClient();
+
+    private CrafterXmlConverter xmlConverter;
+
+    public CrafterConnectors() {
+        xmlConverter = new CrafterXmlConverter();
+    }
+
+    public CrafterAuhtnticatedToken authenticateCrafter(CrafterLogin login) {
+        Response response = restClient.target(crafterSiteURL)
+                .request(MediaType.APPLICATION_JSON)
+                .header(FIRSTNAME,login.getFirstname())
+                .header(LASTNAME,login.getLastname())
+                .header(EMAIL,login.getEmail())
+                .header(USERNAME,login.getUsername())
+                .header(SECURE_KEY,login.getSecureKey())
+                .header(GROUPS,login.getGroups())
+                .header(X_XSRF_TOKEN, X_XSRF_TOKEN_VALUE)
+                .get();
+        log.info("response status  authenticateCrafter: "+ response.getStatus());
+        return getResponseToken(response);
+
+    }
+
+    private CrafterAuhtnticatedToken getResponseToken(Response response){
+        String xsrfToken  = null;
+        String jessionIdToken = null;
+        MultivaluedMap<String, Object> headers = response.getHeaders();
+
+        for (Map.Entry<String, List<Object>> entry : headers.entrySet()) {
+            if(HEADER_NAME_SET_COOKIE.equals(entry.getKey())) {
+                log.info("entry Key :"+ entry.getKey() + ": entry.Key vAlue: "+ entry.getValue());
+                List<Object> keyObjects = entry.getValue();
+                for (Object temp : keyObjects) {
+                    String tokenValue = (String) temp;
+                    if (isNotBlank(tokenValue)) {
+                        if (tokenValue.contains(HEADER_NAME_XSRF_TOKEN)){
+                            xsrfToken = CrafterTokenUtil.token(tokenValue);
+                        }
+                        if(tokenValue.contains(HEADER_NAME_JSESSIONID)){
+                            jessionIdToken = CrafterTokenUtil.token(tokenValue);
+                        }
+                    }
+                }
+                break;
+            }
+        }
+        CrafterAuhtnticatedToken crafterAuhtnticatedToken = CrafterAuhtnticatedToken.builder()
+                .xsrfTOken(xsrfToken)
+                .jessionId(jessionIdToken).build();
+        return crafterAuhtnticatedToken;
+    }
+
+    public JSONObject createCMSUser(CrafterUser crafterUser) {
+        JSONObject userJson = null;
+        generateCrafterToken();
+        Response response = restClient.target(crafterSiteURL + createUserUrl)
+                .request(MediaType.APPLICATION_JSON)
+                .header(Cookie, JSESSIONID + JSESSIONID_VALUE + ";"
+                        + XSRF_TOKEN + X_XSRF_TOKEN_VALUE)
+                .header(X_XSRF_TOKEN, X_XSRF_TOKEN_VALUE)
+                .post(Entity.entity(crafterUser, MediaType.APPLICATION_JSON));
+        if (response.getStatus() == 201) {
+            String output = response.readEntity(String.class);
+            userJson = new JSONObject(output);
+            addMemberstoGroup(String.valueOf(userJson.getJSONObject(USER).getLong(ID)),
+                    userJson.getJSONObject(USER).getString(USERNAME));
+        }
+        return userJson;
+    }
+
+    public JSONObject addMemberstoGroup(String id, String name) {
+        JSONObject memberJson = null;
+        generateCrafterToken();
+        CrafterGroups groups = new CrafterGroups();
+        List<String> ids = new ArrayList<>();
+        ids.add(id);
+        List<String> users = new ArrayList<>();
+        users.add(name);
+        groups.setIds(ids);
+        groups.setUsernames(users);
+        Response response = restClient.target(crafterSiteURL + addMemberToGroupUrl)
+                .request(MediaType.APPLICATION_JSON)
+                .header(Cookie, JSESSIONID + JSESSIONID_VALUE + ";"
+                        + XSRF_TOKEN + X_XSRF_TOKEN_VALUE)
+                .header(X_XSRF_TOKEN, X_XSRF_TOKEN_VALUE)
+                .post(Entity.entity(groups, MediaType.APPLICATION_JSON));
+
+        if (response.getStatus() == 200) {
+            String output = response.readEntity(String.class);
+            memberJson = new JSONObject(output);
+        }
+        return memberJson;
+    }
+    public JSONObject deploymentTemplate(DeploymentSite deploymentSite,Long customerId) {
+        JSONObject siteJson = null;
+        CrafterLogin login = setLoginDetails(String.valueOf(customerId));
+        Response response = restClient.target(deploymentUrl)
+                .request(MediaType.APPLICATION_JSON)
+                .header(FIRSTNAME, login.getFirstname())
+                .header(LASTNAME, login.getLastname())
+                .header(email, login.getEmail())
+                .header(USERNAME, login.getUsername())
+                .header(SECURE_KEY, login.getSecureKey())
+                .header(GROUPS, login.getGroups())
+                .header(X_XSRF_TOKEN, "Test2")
+                .header(Cookie,
+                        XSRF_TOKEN + "Test2;Path=/studio; HttpOnly")
+                .post(Entity.entity(deploymentSite, MediaType.APPLICATION_JSON));
+
+        if (response.getStatus() == 201) {
+            String output = response.readEntity(String.class);
+        }
+        return siteJson;
+    }
+    public JSONObject startCMSSite(CrafterCreateSite createSite,Long customerId) {
+        JSONObject siteJson = null;
+        CrafterLogin login = setLoginDetails(String.valueOf(customerId));
+        Response response = restClient.target(crafterSiteURL + startSiteUrl)
+                .request(MediaType.APPLICATION_JSON)
+                .header(FIRSTNAME, login.getFirstname())
+                .header(LASTNAME, login.getLastname())
+                .header(email, login.getEmail())
+                .header(USERNAME, login.getUsername())
+                .header(SECURE_KEY, login.getSecureKey())
+                .header(GROUPS, login.getGroups())
+                .header(X_XSRF_TOKEN, "Test2")
+                .header(Cookie,
+                        XSRF_TOKEN + "Test2;Path=/studio; HttpOnly")
+                .post(Entity.entity(createSite.getSite_id(), MediaType.APPLICATION_JSON));
+        System.out.println("........... " + response.getStatus());
+        if (response.getStatus() == 201) {
+            String output = response.readEntity(String.class);
+            siteJson = new JSONObject(output);
+        }
+        return siteJson;
+    }
+
+    public JSONObject createCMSSite(CrafterCreateSite createSite,Long customerId) {
+        JSONObject siteJson = null;
+        CrafterLogin login = setLoginDetails(String.valueOf(customerId));
+        Response response = restClient.target(crafterSiteURL + createSiteUrl)
+                .request(MediaType.APPLICATION_JSON)
+                .header(FIRSTNAME, login.getFirstname())
+                .header(LASTNAME, login.getLastname())
+                .header(EMAIL, login.getEmail())
+                .header(USERNAME, login.getUsername())
+                .header(SECURE_KEY, login.getSecureKey())
+                .header(GROUPS, login.getGroups())
+                .header(X_XSRF_TOKEN, "Test2")
+                .header(Cookie,
+                        XSRF_TOKEN + "Test2;Path=/studio; HttpOnly")
+                .post(Entity.entity(createSite, MediaType.APPLICATION_JSON));
+        if (response.getStatus() == 201) {
+            String output = response.readEntity(String.class);
+            siteJson = new JSONObject(output);
+        }
+        return siteJson;
+    }
+
+    public JSONObject writeContent(List<String> binifits, String siteName,String email,String logo) throws JAXBException {
+        JSONObject writeContentJson = null;
+        generateCrafterToken();
+        String xmlPayload = xmlConverter.setFeatures(binifits,email,logo);
+        Response response = restClient.target(crafterSiteURL + writeContentUrl)
+                .queryParam(SITE_ID, siteName)
+                .queryParam(PHASE, phase)
+                .queryParam(PATH, path)
+                .queryParam(FILENAME, fileName)
+                .queryParam(USER, user)
+                .queryParam(CONTENTTYPE, contentType)
+                .queryParam(UNLOCK, unlock)
+                .request(MediaType.APPLICATION_XML)
+                .header(Cookie, JSESSIONID + JSESSIONID_VALUE + ";"
+                        + XSRF_TOKEN + X_XSRF_TOKEN_VALUE)
+                .header(X_XSRF_TOKEN, X_XSRF_TOKEN_VALUE)
+                .post(Entity.entity(xmlPayload, MediaType.APPLICATION_XML));
+        log.info("writeContent..... " + response.getStatus());
+        if (response.getStatus() == 200) {
+            String output = response.readEntity(String.class);
+            writeContentJson = new JSONObject(output);
+        }
+        return writeContentJson;
+    }
+
+    private CrafterAuhtnticatedToken generateCrafterToken() {
+        CrafterLogin crafterLogin= setLoginDetails();
+        CrafterAuhtnticatedToken token = authenticateCrafter(crafterLogin);
+        log.info("Generated Token ::: "+token.getJessionId() + " : Generated XSRF Token : "+token.getXsrfTOken());
+        return token;
+    }
+
+    private CrafterLogin setLoginDetails(String customerId){
+        CrafterLogin login = CrafterLogin.builder().firstname(crafterFirstName)
+                .groups(crafterGroups)
+                .lastname(crafterLastName)
+                .username(crafterUserName)
+                .email(email)
+                .secureKey(crafterSecureKey)
+                .customerId(customerId)
+                .build();
+        return login;
+    }
+
+    private CrafterLogin setLoginDetails(){
+        CrafterLogin login = CrafterLogin.builder().firstname(crafterFirstName)
+                .groups(crafterGroups)
+                .lastname(crafterLastName)
+                .username(crafterUserName)
+                .secureKey(crafterSecureKey)
+                .email(email)
+                .build();
+        return login;
+    }
+    public static void main(String[] args) throws JAXBException {
+        CrafterConnectors connectors=new CrafterConnectors();
+        CrafterUser user=new CrafterUser();
+        user.setUsername("sagar");
+        user.setPassword("sagar123");
+        user.setFirstName("venky");
+        user.setLastName("donkey");
+        user.setEmail("sagar.nadagoud@wildjasmine.com");
+        user.setEnabled(Boolean.FALSE);
+        user.setExternallyManaged(Boolean.TRUE);
+        List<String> h = new ArrayList<>();
+        h.add("events");
+    }
+}
Index: src/main/java/com/syzegee/customer/events/adapter/CustomerInboxAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/CustomerInboxAdapter.java b/src/main/java/com/syzegee/customer/events/adapter/CustomerInboxAdapter.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/CustomerInboxAdapter.java	(date 1613491889000)
@@ -0,0 +1,138 @@
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.entity.Customer;
+import com.syzegee.customer.events.entity.CustomerInbox;
+import com.syzegee.customer.events.model.CustomerCreateDetail;
+import com.syzegee.customer.events.model.CustomerEvent;
+import com.syzegee.customer.events.model.CustomerSiteUpdateRequest;
+import com.syzegee.customer.events.model.CustomerUpdateDetail;
+import com.syzegee.customer.events.model.crafter.CustomerSiteEvent;
+import com.syzegee.customer.events.model.crafter.CustomerTemplateEvent;
+import com.syzegee.customer.events.model.ruleengine.CustomerRuleEvent;
+import com.syzegee.customer.events.repository.CustomerInboxRepository;
+import com.syzegee.customer.events.util.CorrelationIdUtil;
+import com.syzegee.customer.events.util.JsonUtil;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+import org.springframework.transaction.annotation.Transactional;
+
+import static com.syzegee.customer.events.constants.Constants.CUSTOMER_CREATED;
+import static com.syzegee.customer.events.constants.Constants.CUSTOMER_UPDATED;
+
+@Component
+@Slf4j
+public class CustomerInboxAdapter {
+
+    @Autowired
+    private CustomerInboxRepository customerInboxRepository;
+
+    @Autowired
+    private JsonUtil util;
+
+    /**
+     * This method is used to create Tier for the customer
+     *
+     * @param detail     ,
+     * @param customerId id is required to create the tier
+     * @return tier object
+     */
+
+    public CustomerInbox saveToinbox(CustomerCreateDetail detail, Long customerId, String correlationId) {
+        log.info("Initiate saveToinbox in connector " + "correlationId:" + correlationId);
+        String customerRequestId = CorrelationIdUtil.generateCorrelationId();
+        String details = util.objectToString(detail);
+        CustomerInbox customerInbox = CustomerInbox.builder().
+                customerId(customerId)
+                .customerRequestId(customerRequestId)
+                .status(CUSTOMER_CREATED).details(details)
+                .correlationId(correlationId).build();
+        CustomerInbox inbox = customerInboxRepository.save(customerInbox);
+        log.info("End of  saveToinbox in connector " + "correlationId:" + correlationId);
+        return inbox;
+    }
+
+    @Transactional
+    //TODO Convert into one single method
+    public CustomerInbox updateCustomerSiteToinbox(CustomerSiteUpdateRequest customerSiteUpdateRequest, Customer customer, String correlationId) {
+        log.info("Initiate updateToinbox in connector " + "correlationId:" + correlationId);
+        String customerRequestId = CorrelationIdUtil.generateCorrelationId();
+        String details = util.objectToString(customerSiteUpdateRequest);
+        CustomerInbox customerInbox = CustomerInbox.builder().
+                customerId(customer.getCustomerId())
+                .customerRequestId(customerRequestId)
+                .status(CUSTOMER_UPDATED).details(details.toString())
+                .correlationId(correlationId).build();
+        CustomerInbox inbox = customerInboxRepository.save(customerInbox);
+        log.info("End of  updateToinbox in connector " + "correlationId:" + correlationId);
+        return inbox;
+    }
+
+    @Transactional
+    public CustomerInbox updateToinbox(CustomerUpdateDetail detail, Customer customer, String correlationId) {
+        log.info("Initiate updateToinbox in connector " + "correlationId:" + correlationId);
+        String customerRequestId = CorrelationIdUtil.generateCorrelationId();
+        String details = util.objectToString(detail);
+        CustomerInbox customerInbox = CustomerInbox.builder().
+                customerId(customer.getCustomerId())
+                .customerRequestId(customerRequestId)
+                .status(CUSTOMER_UPDATED).details(details.toString())
+                .correlationId(correlationId).build();
+        CustomerInbox inbox = customerInboxRepository.save(customerInbox);
+        log.info("End of  updateToinbox in connector " + "correlationId:" + correlationId);
+        return inbox;
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param event
+     * @return CustomerInbox
+     */
+    @Transactional
+    public CustomerInbox getCustomerForRuleRequest(CustomerRuleEvent event) {
+        log.info("Initiate getCustomerForRuleRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        CustomerInbox customerDeatils = customerInboxRepository.getCustomerRequest(event.getCustomerRequestId());
+        log.info("End of getCustomerForRuleRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        return customerDeatils;
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param event
+     * @return CustomerInbox
+     */
+    @Transactional
+    public CustomerInbox getCustomerForTemplateRequest(CustomerTemplateEvent event) {
+        log.info("Initiate getCustomerForTemplateRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        CustomerInbox customerDeatils = customerInboxRepository.getCustomerRequest(event.getCustomerRequestId());
+        log.info("End of getCustomerForTemplateRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        return customerDeatils;
+    }
+    @Transactional
+    public CustomerInbox getCustomerInboxForSiteUpdate(CustomerSiteEvent event) {
+        log.info("Initiate getCustomerForSiteUpdate in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        CustomerInbox customerDeatils = customerInboxRepository.getCustomerRequest(event.getCustomerRequestId());
+        log.info("End of getCustomerForSiteUpdate in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        return customerDeatils;
+    }
+
+    /**
+     * This method is used to create customer with organization
+     *
+     * @param event
+     * @return CustomerInbox
+     */
+    @Transactional
+    public CustomerInbox getCustomerRequest(CustomerEvent event) {
+        log.info("Initiate getCustomerRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        CustomerInbox customerDeatils = customerInboxRepository.getCustomerRequest(event.getCustomerRequestId());
+        log.info("End of getCustomerRequest in Connector " + " - CorrelationId: " + event.getCorrelationId());
+        return customerDeatils;
+    }
+
+
+
+
+}
Index: src/main/java/com/syzegee/customer/events/adapter/CommunicationConnector.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/CommunicationConnector.java b/src/main/java/com/syzegee/customer/events/adapter/CommunicationConnector.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/CommunicationConnector.java	(date 1613491889000)
@@ -0,0 +1,58 @@
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.domain.CustomerActivationResponse;
+import com.syzegee.customer.events.domain.CustomerCreateDetail;
+import com.syzegee.customer.events.util.ActivationTemplate;
+import com.syzegee.customer.events.util.CommunicationConfig;
+import com.syzegee.customer.events.util.MailSender;
+import com.syzegee.customer.events.util.SiteInviteTemplate;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+
+import java.io.IOException;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class CommunicationConnector {
+
+    @Autowired
+    private ActivationTemplate activationTemplate;
+    @Autowired
+    private CommunicationConfig communicationConfig;
+    @Autowired
+    private MailSender mailSender;
+    @Autowired
+    private SiteInviteTemplate inviteTemplate;
+
+    public void sendCustomerActivationEmail(CustomerActivationResponse activationResponse) throws IOException {
+        log.info("Initiate sendCustomerActivationEmail in CommunicationConnector");
+        //TODO Integrate the template with rule engine
+        // Retrive the rule engine with Mautic automation url
+        String template = activationTemplate.createActivationTemplate(activationResponse.getEmailId(), activationResponse.getActivation_code());
+        try {
+            mailSender.emailTemplateInfo(template, activationResponse.getEmailId());
+        }
+        catch (Exception exception)
+        {
+            log.error("Unable to generate email :" + exception.getMessage());
+        }
+        log.info("End of sendCustomerActivationEmail in CommunicationConnector");
+    }
+
+    public void sendCustomerSiteInviteEmail(CustomerCreateDetail createDetail) throws IOException {
+        log.info("Initiate sendCustomerActivationEmail in CommunicationConnector");
+        String template = inviteTemplate.createSiteInviteTemplate(createDetail.getCustomerDetail().getBusinessEmail());
+        try {
+            mailSender.emailTemplateInfo(template, createDetail.getCustomerDetail().getBusinessEmail());
+        }
+        catch (Exception exception)
+        {
+            log.error("Unable to generate email :" + exception.getMessage());
+        }
+        log.info("End of sendCustomerActivationEmail in CommunicationConnector");
+    }
+}
Index: src/main/java/com/syzegee/customer/events/adapter/CrafterAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/CrafterAdapter.java b/src/main/java/com/syzegee/customer/events/adapter/CrafterAdapter.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/CrafterAdapter.java	(date 1613491889000)
@@ -0,0 +1,283 @@
+package com.syzegee.customer.events.adapter;
+
+
+import com.syzegee.customer.events.model.crafter.*;
+import com.syzegee.customer.events.util.CrafterTokenUtil;
+import com.syzegee.customer.events.util.CrafterXmlConverter;
+import lombok.extern.slf4j.Slf4j;
+import org.json.JSONObject;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+
+import javax.ws.rs.client.Client;
+import javax.ws.rs.client.ClientBuilder;
+import javax.ws.rs.client.Entity;
+import javax.ws.rs.core.MediaType;
+import javax.ws.rs.core.MultivaluedMap;
+import javax.ws.rs.core.Response;
+import javax.xml.bind.JAXBException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import static com.syzegee.customer.events.constants.Constants.*;
+import static org.apache.commons.lang3.StringUtils.isNotBlank;
+
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class CrafterAdapter {
+
+    @Value("${Crafter.url}")
+    private  String crafterSiteURL;
+    @Value("${Crafter.userName}")
+    private String crafterUserName;
+    @Value("${Crafter.firstName}")
+    private String crafterFirstName;
+    @Value("${Crafter.lastName}")
+    private String crafterLastName;
+    @Value("${Crafter.groups}")
+    private String crafterGroups;
+    @Value("${Crafter.email}")
+    private String email;
+    @Value("${Crafter.secureKey}")
+    private String crafterSecureKey;
+    @Value("${Crafter.password}")
+    private String crafterPassword;
+    @Value("${Crafter.authenticationUrl}")
+    private String authenticationUrl;
+    @Value("${Crafter.createUserUrl}")
+    private String createUserUrl;
+    @Value("${Crafter.addMemberToGroupUrl}")
+    private String addMemberToGroupUrl;
+    @Value("${Crafter.startSiteUrl}")
+    private String startSiteUrl;
+    @Value("${Crafter.createSiteUrl}")
+    private String createSiteUrl;
+    @Value("${Crafter.writeContent.writeContentUrl}")
+    private String writeContentUrl;
+    @Value("${Crafter.writeContent.phase}")
+    private String phase;
+    @Value("${Crafter.writeContent.path}")
+    private String path;
+    @Value("${Crafter.writeContent.fileName}")
+    private String fileName;
+    @Value("${Crafter.writeContent.user}")
+    private String user;
+    @Value("${Crafter.writeContent.contentType}")
+    private String contentType;
+    @Value("${Crafter.writeContent.unlock}")
+    private Boolean unlock;
+    @Value("${Crafter.deployment.url}")
+    private String deploymentUrl;
+
+    @Value("${Crafter.jessionIdValue}")
+    private String JSESSIONID_VALUE;
+    @Value("${Crafter.xXsrfTokenValue}")
+    private String X_XSRF_TOKEN_VALUE;
+
+    private Client restClient = ClientBuilder.newClient();
+
+    private CrafterXmlConverter xmlConverter;
+
+    public CrafterAdapter() {
+        xmlConverter = new CrafterXmlConverter();
+    }
+
+
+
+
+    public JSONObject createCMSUser(CrafterUser crafterUser) {
+        JSONObject userJson = null;
+        Response response = restClient.target(crafterSiteURL + createUserUrl)
+                .request(MediaType.APPLICATION_JSON)
+                .header(Cookie, JSESSIONID + JSESSIONID_VALUE + ";"
+                        + XSRF_TOKEN + X_XSRF_TOKEN_VALUE)
+                .header(X_XSRF_TOKEN, X_XSRF_TOKEN_VALUE)
+                .post(Entity.entity(crafterUser, MediaType.APPLICATION_JSON));
+        if (response.getStatus() == 201) {
+            String output = response.readEntity(String.class);
+            userJson = new JSONObject(output);
+            addMemberstoGroup(String.valueOf(userJson.getJSONObject(USER).getLong(ID)),
+                    userJson.getJSONObject(USER).getString(USERNAME));
+        }
+        return userJson;
+    }
+
+    public JSONObject addMemberstoGroup(String id, String name) {
+        JSONObject memberJson = null;
+
+        CrafterGroups groups = new CrafterGroups();
+        List<String> ids = new ArrayList<>();
+        ids.add(id);
+        List<String> users = new ArrayList<>();
+        users.add(name);
+        groups.setIds(ids);
+        groups.setUsernames(users);
+        Response response = restClient.target(crafterSiteURL + addMemberToGroupUrl)
+                .request(MediaType.APPLICATION_JSON)
+                .header(Cookie, JSESSIONID + JSESSIONID_VALUE + ";"
+                        + XSRF_TOKEN + X_XSRF_TOKEN_VALUE)
+                .header(X_XSRF_TOKEN, X_XSRF_TOKEN_VALUE)
+                .post(Entity.entity(groups, MediaType.APPLICATION_JSON));
+
+        if (response.getStatus() == 200) {
+            String output = response.readEntity(String.class);
+            memberJson = new JSONObject(output);
+        }
+        return memberJson;
+    }
+    public JSONObject deploymentTemplate(DeploymentSite deploymentSite,Long customerId) {
+        JSONObject siteJson = null;
+        CrafterLogin login = setLoginDetails(String.valueOf(customerId));
+        Response response = restClient.target(deploymentUrl)
+                .request(MediaType.APPLICATION_JSON)
+                .header(FIRSTNAME, login.getFirstname())
+                .header(LASTNAME, login.getLastname())
+                .header(email, login.getEmail())
+                .header(USERNAME, login.getUsername())
+                .header(SECURE_KEY, login.getSecureKey())
+                .header(GROUPS, login.getGroups())
+                .header(X_XSRF_TOKEN, "Test2")
+                .header(Cookie,
+                        XSRF_TOKEN + "Test2;Path=/studio; HttpOnly")
+                .post(Entity.entity(deploymentSite, MediaType.APPLICATION_JSON));
+
+        if (response.getStatus() == 201) {
+            String output = response.readEntity(String.class);
+        }
+        return siteJson;
+    }
+    public JSONObject startCMSSite(CrafterCreateSite createSite,Long customerId) {
+        JSONObject siteJson = null;
+        CrafterLogin login = setLoginDetails(String.valueOf(customerId));
+        Response response = restClient.target(crafterSiteURL + startSiteUrl)
+                .request(MediaType.APPLICATION_JSON)
+                .header(FIRSTNAME, login.getFirstname())
+                .header(LASTNAME, login.getLastname())
+                .header(email, login.getEmail())
+                .header(USERNAME, login.getUsername())
+                .header(SECURE_KEY, login.getSecureKey())
+                .header(GROUPS, login.getGroups())
+                .header(X_XSRF_TOKEN, "Test2")
+                .header(Cookie,
+                        XSRF_TOKEN + "Test2;Path=/studio; HttpOnly")
+                .post(Entity.entity(createSite.getSite_id(), MediaType.APPLICATION_JSON));
+        System.out.println("........... " + response.getStatus());
+        if (response.getStatus() == 201) {
+            String output = response.readEntity(String.class);
+            siteJson = new JSONObject(output);
+        }
+        return siteJson;
+    }
+
+    public JSONObject createCMSSite(CrafterCreateSite createSite,Long customerId) {
+        JSONObject siteJson = null;
+        CrafterLogin login = setLoginDetails(String.valueOf(customerId));
+        Response response = restClient.target(crafterSiteURL + createSiteUrl)
+                .request(MediaType.APPLICATION_JSON)
+                .header(FIRSTNAME, login.getFirstname())
+                .header(LASTNAME, login.getLastname())
+                .header(EMAIL, login.getEmail())
+                .header(USERNAME, login.getUsername())
+                .header(SECURE_KEY, login.getSecureKey())
+                .header(GROUPS, login.getGroups())
+                .header(X_XSRF_TOKEN, "Test2")
+                .header(Cookie,
+                        XSRF_TOKEN + "Test2;Path=/studio; HttpOnly")
+                .post(Entity.entity(createSite, MediaType.APPLICATION_JSON));
+        if (response.getStatus() == 201) {
+            String output = response.readEntity(String.class);
+            siteJson = new JSONObject(output);
+        }
+        return siteJson;
+    }
+
+    public JSONObject deleteCMSSite(CrafterCreateSite createSite,Long customerId) {
+        JSONObject siteJson = null;
+        CrafterLogin login = setLoginDetails(String.valueOf(customerId));
+        Response response = restClient.target(crafterSiteURL + createSiteUrl)
+                .request(MediaType.APPLICATION_JSON)
+                .header(FIRSTNAME, login.getFirstname())
+                .header(LASTNAME, login.getLastname())
+                .header(EMAIL, login.getEmail())
+                .header(USERNAME, login.getUsername())
+                .header(SECURE_KEY, login.getSecureKey())
+                .header(GROUPS, login.getGroups())
+                .header(X_XSRF_TOKEN, "Test2")
+                .header(Cookie,
+                        XSRF_TOKEN + "Test2;Path=/studio; HttpOnly")
+                .post(Entity.entity(createSite, MediaType.APPLICATION_JSON));
+        if (response.getStatus() == 201) {
+            String output = response.readEntity(String.class);
+            siteJson = new JSONObject(output);
+        }
+        return siteJson;
+    }
+
+    public JSONObject writeContent(List<String> binifits, String siteName,String email,String logo) throws JAXBException {
+        JSONObject writeContentJson = null;
+
+        String xmlPayload = xmlConverter.setFeatures(binifits,email,logo);
+        Response response = restClient.target(crafterSiteURL + writeContentUrl)
+                .queryParam(SITE_ID, siteName)
+                .queryParam(PHASE, phase)
+                .queryParam(PATH, path)
+                .queryParam(FILENAME, fileName)
+                .queryParam(USER, user)
+                .queryParam(CONTENTTYPE, contentType)
+                .queryParam(UNLOCK, unlock)
+                .request(MediaType.APPLICATION_XML)
+                .header(Cookie, JSESSIONID + JSESSIONID_VALUE + ";"
+                        + XSRF_TOKEN + X_XSRF_TOKEN_VALUE)
+                .header(X_XSRF_TOKEN, X_XSRF_TOKEN_VALUE)
+                .post(Entity.entity(xmlPayload, MediaType.APPLICATION_XML));
+        log.info("writeContent..... " + response.getStatus());
+        if (response.getStatus() == 200) {
+            String output = response.readEntity(String.class);
+            writeContentJson = new JSONObject(output);
+        }
+        return writeContentJson;
+    }
+
+
+
+    private CrafterLogin setLoginDetails(String customerId){
+        CrafterLogin login = CrafterLogin.builder().firstname(crafterFirstName)
+                .groups(crafterGroups)
+                .lastname(crafterLastName)
+                .username(crafterUserName)
+                .email(email)
+                .secureKey(crafterSecureKey)
+                .customerId(customerId)
+                .build();
+        return login;
+    }
+
+    private CrafterLogin setLoginDetails(){
+        CrafterLogin login = CrafterLogin.builder().firstname(crafterFirstName)
+                .groups(crafterGroups)
+                .lastname(crafterLastName)
+                .username(crafterUserName)
+                .secureKey(crafterSecureKey)
+                .email(email)
+                .build();
+        return login;
+    }
+    public static void main(String[] args) throws JAXBException {
+        CrafterAdapter crafterAdapter=new CrafterAdapter();
+        CrafterUser user=new CrafterUser();
+        user.setUsername("sagar");
+        user.setPassword("sagar123");
+        user.setFirstName("venky");
+        user.setLastName("donkey");
+        user.setEmail("sagar.nadagoud@wildjasmine.com");
+        user.setEnabled(Boolean.FALSE);
+        user.setExternallyManaged(Boolean.TRUE);
+        List<String> h = new ArrayList<>();
+        h.add("events");
+    }
+}
Index: src/main/java/com/syzegee/customer/events/service/MessageProducer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/service/MessageProducer.java b/src/main/java/com/syzegee/customer/events/service/MessageProducer.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/service/MessageProducer.java	(date 1613491889000)
@@ -0,0 +1,25 @@
+package com.syzegee.customer.events.service;
+
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.kafka.core.KafkaTemplate;
+import org.springframework.stereotype.Service;
+
+
+
+/**
+ * @author Sagar
+ */
+@Service
+@Slf4j
+public class MessageProducer {
+
+    @Autowired
+    private KafkaTemplate<String, String> kafkaTemplate;
+
+    public void send(String topic, String message) {
+        log.info("Topic: "+topic);
+        log.info("sending data='{}'", message);
+        kafkaTemplate.send(topic, message);
+        }
+}
Index: src/main/java/com/syzegee/customer/events/service/PackagingService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/service/PackagingService.java b/src/main/java/com/syzegee/customer/events/service/PackagingService.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/service/PackagingService.java	(date 1613491889000)
@@ -0,0 +1,25 @@
+package com.syzegee.customer.events.service;
+
+import com.syzegee.customer.events.adapter.PackagingAdapter;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.List;
+import java.util.Map;
+
+@Service
+@Slf4j
+public class PackagingService {
+
+    @Autowired
+    private PackagingAdapter packagingAdapter;
+
+    public List<Map<String, Object>> getSolicitationPackageList(Long customerId) {
+        log.info("Initiate getSolicitationPackageList in service" + " - customerId: " + customerId);
+        List<Map<String, Object>> solicitationPackages = packagingAdapter.getSolicitationPackageList(customerId);
+        //CustomerCreateDetail createDetailJson = util.getCreateDetailfromJson(customerDeatils);
+        log.info("End getSolicitationPackageList in service" + " - customerId: " + customerId);
+        return solicitationPackages;
+    }
+}
Index: src/main/java/com/syzegee/customer/events/adapter/CommunicationAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/CommunicationAdapter.java b/src/main/java/com/syzegee/customer/events/adapter/CommunicationAdapter.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/CommunicationAdapter.java	(date 1613491889000)
@@ -0,0 +1,53 @@
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.model.CustomerActivationResponse;
+import com.syzegee.customer.events.model.CustomerCreateDetail;
+import com.syzegee.customer.events.util.ActivationTemplate;
+import com.syzegee.customer.events.util.MailSender;
+import com.syzegee.customer.events.util.SiteInviteTemplate;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+
+import java.io.IOException;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class CommunicationAdapter {
+
+    @Autowired
+    private ActivationTemplate activationTemplate;
+    @Autowired
+    private MailSender mailSender;
+    @Autowired
+    private SiteInviteTemplate inviteTemplate;
+
+    public void sendCustomerActivationEmail(CustomerActivationResponse activationResponse) throws IOException {
+        log.info("Initiate sendCustomerActivationEmail in CommunicationConnector");
+        String template = activationTemplate.createActivationTemplate(activationResponse.getEmailId(), activationResponse.getActivation_code());
+        try {
+            mailSender.emailTemplateInfo(template, activationResponse.getEmailId());
+        }
+        catch (Exception exception)
+        {
+            log.error("Unable to generate email :" + exception.getMessage());
+        }
+        log.info("End of sendCustomerActivationEmail in CommunicationConnector");
+    }
+
+    public void sendCustomerSiteInviteEmail(CustomerCreateDetail createDetail) throws IOException {
+        log.info("Initiate sendCustomerActivationEmail in CommunicationConnector");
+        String template = inviteTemplate.createSiteInviteTemplate(createDetail.getCustomerDetail().getBusinessEmail());
+        try {
+            mailSender.emailTemplateInfo(template, createDetail.getCustomerDetail().getBusinessEmail());
+        }
+        catch (Exception exception)
+        {
+            log.error("Unable to generate email :" + exception.getMessage());
+        }
+        log.info("End of sendCustomerActivationEmail in CommunicationConnector");
+    }
+}
Index: src/main/java/com/syzegee/customer/events/adapter/DomainDetailsAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/adapter/DomainDetailsAdapter.java b/src/main/java/com/syzegee/customer/events/adapter/DomainDetailsAdapter.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/adapter/DomainDetailsAdapter.java	(date 1613491889000)
@@ -0,0 +1,100 @@
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.entity.Customer;
+import com.syzegee.customer.events.entity.DomainDetails;
+import com.syzegee.customer.events.model.CustomerDomainDetails;
+import com.syzegee.customer.events.model.CustomerDomainStatusUpdateEvent;
+import com.syzegee.customer.events.repository.DomainRepository;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Component;
+
+import java.util.Date;
+import java.util.List;
+import java.util.Optional;
+import java.util.stream.Collectors;
+
+@Component
+@Slf4j
+public class DomainDetailsAdapter {
+
+    @Autowired
+    private DomainRepository domainRepository;
+
+    public void updateDomainDetails(CustomerDomainStatusUpdateEvent event, Optional<Customer> customer) {
+        DomainDetails domainDetails = DomainDetails.builder().customerId(customer.get()).correlationId(event.getCorrelationId()).siteName(event.getSiteName())
+                .domainName(event.getDomainName())
+                .createdBy(event.getCreatedBy())
+                .isActive(event.isActive())
+                .siteCode(event.getSiteName())
+                .siteType(event.getSiteType())
+                .siteName(event.getSiteName())
+                .state(event.getState())
+                .templateCode(event.getTemplateCode())
+                .build();
+        domainRepository.save(domainDetails);
+    }
+
+    public void updateExistingDomainDetails(CustomerDomainDetails customerDomainDetails, Customer customer,String correlationId) {
+        List<DomainDetails> domainDetailsList = domainRepository.findBySiteCodeAndCustomerId(customerDomainDetails.getSiteCode(),customer.getCustomerId());
+        if(!domainDetailsList.isEmpty())
+        {
+            List<DomainDetails> updatedDomainDetailsList = domainDetailsList.stream().map(x-> {
+                x.setIsActive(Boolean.FALSE);
+                x.setCreatedBy(null);
+                x.setState("Site Deleted");
+                x.setUpdatedBy(customerDomainDetails.getUpdatedBy());
+                x.setUpdatedDate(new Date());
+                return x;
+            }).collect(Collectors.toList());
+            updatedDomainDetailsList.forEach(x ->   domainRepository.save(x));
+        }
+        else {
+
+            DomainDetails details = DomainDetails.builder()
+                    .siteCode(customerDomainDetails.getSiteCode())
+                    .templateCode(customerDomainDetails.getTemplateCode())
+                    .siteName(customerDomainDetails.getSiteName())
+                    .siteType(customerDomainDetails.getSiteType())
+                    .customerId(customer)
+                    .domainName(customerDomainDetails.getDomainName())
+                    .logo(customerDomainDetails.getLogo())
+                    .tagline(customerDomainDetails.getTagline())
+                    .isActive(Boolean.TRUE)
+                    .createdBy(customerDomainDetails.getCreatedBy())
+                    .createdDate(new Date())
+                    .correlationId(correlationId).build();
+            domainRepository.save(details);
+        }
+
+    }
+
+    /**
+     * This method is used to create Tier for the customer
+     *
+     * @param customerDomainDetails  ,
+     * @param correlationId is required to create the tier
+     * @return domainDetails
+     */
+    public DomainDetails createDomainDetails(CustomerDomainDetails customerDomainDetails, Customer customer, String correlationId) {
+        log.info("Initiate createDomainDetails in connector " + " - CorrelationId: " + correlationId);
+        DomainDetails details = DomainDetails.builder()
+                .siteCode(customerDomainDetails.getSiteCode())
+                .templateCode(customerDomainDetails.getTemplateCode())
+                .siteName(customerDomainDetails.getSiteName())
+                .siteType(customerDomainDetails.getSiteType())
+                .customerId(customer)
+                .domainName(customerDomainDetails.getDomainName())
+                .logo(customerDomainDetails.getLogo())
+                .tagline(customerDomainDetails.getTagline())
+                .isActive(Boolean.TRUE)
+                .createdBy(customerDomainDetails.getCreatedBy())
+                .createdDate(new Date())
+                .updatedBy(customerDomainDetails.getUpdatedBy())
+                .updatedDate(new Date())
+                .correlationId(correlationId).build();
+        DomainDetails domainDetails = domainRepository.save(details);
+        log.info("End of createDomainDetails  in connector " + " - CorrelationId: " + correlationId);
+        return domainDetails;
+    }
+}
Index: src/main/java/com/syzegee/customer/events/security/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/security/SecurityConfig.java b/src/main/java/com/syzegee/customer/events/security/SecurityConfig.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/security/SecurityConfig.java	(date 1613491889000)
@@ -0,0 +1,8 @@
+package com.syzegee.customer.events.security;
+
+
+
+
+public class SecurityConfig  {
+
+}
Index: src/main/java/com/syzegee/customer/events/response/GenericResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/response/GenericResponse.java b/src/main/java/com/syzegee/customer/events/response/GenericResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/response/GenericResponse.java	(date 1613491889000)
@@ -0,0 +1,17 @@
+package com.syzegee.customer.events.response;
+
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import lombok.*;
+
+@Data
+@Builder
+@JsonIgnoreProperties(ignoreUnknown = true)
+@AllArgsConstructor
+public class GenericResponse<T> {
+	private boolean success;
+	private int status;
+	private String message;
+	private String description;
+	private T data;
+
+}
Index: src/main/java/com/syzegee/customer/events/service/CustomerService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/service/CustomerService.java b/src/main/java/com/syzegee/customer/events/service/CustomerService.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/service/CustomerService.java	(date 1613491889000)
@@ -0,0 +1,498 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.service;
+
+import com.google.gson.Gson;
+import com.syzegee.customer.events.adapter.*;
+import com.syzegee.customer.events.entity.*;
+import com.syzegee.customer.events.model.*;
+import com.syzegee.customer.events.model.crafter.CrafterCreateSite;
+import com.syzegee.customer.events.model.crafter.CustomerSiteEvent;
+import com.syzegee.customer.events.model.crafter.CustomerTemplateEvent;
+import com.syzegee.customer.events.model.crafter.DeploymentSite;
+import com.syzegee.customer.events.model.ruleengine.CustomerRuleEvent;
+import com.syzegee.customer.events.exception.CustomerRuntimeException;
+import com.syzegee.customer.events.repository.CustomerInboxRepository;
+import com.syzegee.customer.events.repository.CustomerRepository;
+import com.syzegee.customer.events.repository.CustomerUserRepository;
+import com.syzegee.customer.events.util.BuilderGenerator;
+import com.syzegee.customer.events.util.JsonUtil;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
+
+import javax.xml.bind.JAXBException;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
+import java.util.Optional;
+import java.util.concurrent.CompletableFuture;
+import java.util.stream.Collectors;
+
+import static com.syzegee.customer.events.constants.Constants.*;
+
+
+/**
+ * @author Sagar
+ */
+@Service
+@Slf4j
+public class CustomerService {
+
+    @Autowired
+    private CustomerAdapter customerAdapter;
+
+    @Autowired
+    private CustomerRepository customerRepository;
+
+    @Autowired
+    private BuilderGenerator builderGenerator;
+    @Autowired
+    private DomainDetailsAdapter domainDetailsAdapter;
+    @Autowired
+    CustomerStatusAdapter customerStatusAdapter;
+    @Autowired
+    private CustomerInboxAdapter customerInboxAdapter;
+    @Autowired
+    private CustomerInboxRepository customerInboxRepository;
+    @Autowired
+    private RuleEngineAdapter ruleEngineAdapter;
+    @Autowired
+    private EventPublisher publisher;
+    @Autowired
+    private JsonUtil util;
+    @Autowired
+    private CommunicationAdapter communicationAdapter;
+    @Autowired
+    private CrafterAdapter crafterAdapter;
+    @Autowired
+    private CustomerUserRepository customerUserRepository;
+    @Value("${Crafter.createOption}")
+    private String createOption;
+    @Value("${Crafter.authenticationType}")
+    private String authenticationType;
+    @Value("${Crafter.blueprint}")
+    private String blueprint;
+    @Value("${Crafter.description}")
+    private String description;
+    @Value("${Crafter.remoteName}")
+    private String remoteName;
+    @Value("${Crafter.remotePassword}")
+    private String remotePassword;
+    @Value("${Crafter.remoteUrl}")
+    private String remoteUrl;
+    @Value("${Crafter.remoteUsername}")
+    private String remoteUsername;
+    @Value("${Crafter.useRemote}")
+    private Boolean useRemote;
+    @Value("${Crafter.deployment.url}")
+    private String deploymentUrl;
+    @Value("${Crafter.deployment.replace}")
+    private Boolean replace;
+    @Value("${Crafter.deployment.env}")
+    private String env;
+    @Value("${Crafter.deployment.templateName}")
+    private String templateName;
+    @Value("${Crafter.deployment.repoUrl}")
+    private String repoUrl;
+    @Value("${Crafter.deployment.repoBranch}")
+    private String repoBranch;
+    @Value("${Crafter.deployment.engineUrl}")
+    private String engineUrl;
+
+    private String customerRequestId = " - CustomerRequestId: ";
+    private String correlationId = " - CorrelationId: ";
+
+
+
+    //TODO This method needs to be simpleified.
+    public CustomerResponse customerCreateEvent(CustomerCreateDetail customerCreateDetail,
+                                                String correlationId, Long customerId) throws CustomerRuntimeException, IOException {
+        log.info("Initiate customerCreateEvent in service new request " + correlationId + correlationId);
+        CustomerInbox customerInbox = customerInboxAdapter.saveToinbox(customerCreateDetail, customerId, correlationId);
+        CustomerEvent customerEvent = builderGenerator.generateCustomerEvent(customerCreateDetail,customerInbox);
+        log.info("customerEvent builder ->"+customerEvent);
+        sendDataToPublisher(customerEvent, customerEvent.getState());
+        log.info("customerEvent Published in service: " + customerRequestId + customerEvent.getCustomerRequestId());
+
+        CustomerRuleEvent ruleEvent = builderGenerator.generateCustomerRuleEvent(customerInbox);
+        sendDataToPublisher(ruleEvent, ruleEvent.getState());
+        log.info("ruleEvent Published in service: " + customerRequestId + customerEvent.getCustomerRequestId());
+        CustomerSiteEvent customerSiteEvent = builderGenerator.generateCustomerSiteEvent(customerCreateDetail, customerInbox);
+        sendDataToPublisher(customerSiteEvent, customerSiteEvent.getState());
+        log.info("customerSiteEvent Published in service: " + customerRequestId + customerSiteEvent.getCustomerRequestId());
+        CustomerResponse customerResponse = builderGenerator.generateCustomerResponse(customerInbox);
+        // communicationAdapter.sendCustomerSiteInviteEmail(customerCreateDetail);
+        log.info("End of customerCreateEvent in service " + correlationId + correlationId);
+        /* marketing automation event */
+        CustomerUser customerUser = null;
+        try
+        {
+            customerUser = customerUserRepository.getCustomerUserByEmailId(customerCreateDetail.getCustomerDetail().getCustomerUserEmailId());
+        }
+        catch (Exception exception)
+        {
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "Duplicate user exists");
+        }
+
+        MarketingAutomationCreationEvent marketingAutomationCreationEventEvent = builderGenerator.generateMarketingAutomationEvent(customerCreateDetail, customerUser);
+        sendDataToPublisher(marketingAutomationCreationEventEvent, marketingAutomationCreationEventEvent.getState());
+        log.info("marketingAutomationEvent Published in service: " + customerRequestId + customerSiteEvent.getCustomerRequestId());
+        return customerResponse;
+    }
+
+    private void sendDataToPublisher(Object eventType, String state) {
+        String jsoncustomerEvent = util.objectToString(eventType);
+        publisher.send(jsoncustomerEvent, state);
+    }
+
+
+    public void createCustomerRule(CustomerRuleEvent event) {
+        log.info("Initiate createCustomerRule in service" + correlationId + event.getCorrelationId());
+        CustomerInbox customerDeatils = customerInboxAdapter.getCustomerForRuleRequest(event);
+        CustomerCreateDetail createDetailJson = util.getCreateDetailfromJson(customerDeatils);
+        ruleEngineAdapter.createCustomerRuleEvent(createDetailJson, event.getCustomerId());
+        log.info("End of the createCustomerRule in service " + correlationId + event.getCorrelationId());
+    }
+
+    //TODO change this t create site and update the domain details
+    public CustomerDomainDetails createCrafterSite(CustomerTemplateEvent templateEvent) throws JAXBException {
+        log.info("Initiate createCrafterSite in service" + correlationId + templateEvent.getCorrelationId());
+        CustomerInbox customerDeatils = customerInboxAdapter.getCustomerForTemplateRequest(templateEvent);
+        CustomerCreateDetail createDetailJson = util.getCreateDetailfromJson(customerDeatils);
+        CrafterCreateSite createSite = CrafterCreateSite.builder().create_option(createOption)
+                .site_id(createDetailJson.getDomainDetails().getSiteName().toLowerCase())
+                .authentication_type(authenticationType).blueprint(blueprint).description(description)
+                .remote_name(remoteName).remote_password(remotePassword).remote_url(remoteUrl)
+                .remote_username(remoteUsername).use_remote(useRemote).build();
+
+        CustomerDomainDetails customerDomainDetails = CustomerDomainDetails.builder()
+                .customerId(createDetailJson.getDomainDetails().getCustomerId())
+                .domainName(createDetailJson.getDomainDetails().getDomainName())
+                .siteCode(createDetailJson.getDomainDetails().getSiteCode())
+        .build();
+        crafterAdapter.createCMSSite(createSite,customerDeatils.getCustomerId());
+
+        /*List<String> listString=new ArrayList<>();
+            listString.add("package1");
+        listString.add("package2");
+        crafterConnectors.writeContent(listString,createSite.getSite_id(),
+                "riya.patel@balajiinfosol.com","logo");*/
+        log.info("End of the createCrafterSite in service " + correlationId);
+        CustomerStatus customerStatus =  CustomerStatus.builder().customerId(templateEvent.getCustomerId())
+                .correlationId(templateEvent.getCorrelationId())
+                .build();
+        customerStatusAdapter.updateOnboardCustomerStatus(customerStatus);
+        return customerDomainDetails;
+    }
+    //TODO change this t create site and update the domain details
+    public void createSites(CustomerSiteEvent customerSiteEvent) throws JAXBException {
+        log.info("Initiate createSites in service" + correlationId + customerSiteEvent.getCorrelationId());
+        Optional<Customer> customer = Optional.ofNullable(customerRepository.getRecordById(customerSiteEvent.getCustomerId()));
+        customerSiteEvent.getBenefitDetailsList().forEach(item->{
+            //TODO Get the SSO parameters populated here
+            CrafterCreateSite createSite = CrafterCreateSite.builder().create_option(createOption)
+                    .site_id(item.getDomainDetails().getSiteName().toLowerCase())
+                    .authentication_type(authenticationType).blueprint(blueprint).description(item.getDomainDetails().getSiteDesc())
+                    .remote_name(remoteName).remote_password(remotePassword).remote_url(remoteUrl)
+                    .remote_username(remoteUsername).use_remote(useRemote).build();
+            CompletableFuture.supplyAsync(() ->
+                crafterAdapter.createCMSSite(createSite,customerSiteEvent.getCustomerId())
+            ).thenRun(() ->
+                //TODO Find a way to populate the customer object for domain and SSO
+                domainDetailsAdapter.createDomainDetails(item.getDomainDetails(),customer.get(),customerSiteEvent.getCorrelationId())
+
+            );
+        });
+
+    }
+
+    public void createSitesNUpdateCustomerStatus(CustomerSiteEvent customerSiteEvent) throws JAXBException {
+        createSites(customerSiteEvent);
+        CustomerStatus customerStatus = CustomerStatus.builder().customerId(customerSiteEvent.getCustomerId())
+                .correlationId(customerSiteEvent.getCorrelationId())
+                .build();
+        customerStatusAdapter.updateOnboardCustomerStatus(customerStatus);
+    }
+
+    //TODO change this t create site and update the domain details
+    public void deleteSites(CustomerSiteEvent customerSiteEvent) throws JAXBException {
+        log.info("Initiate createSites in service" + correlationId + customerSiteEvent.getCorrelationId());
+        Optional<Customer> customer = Optional.ofNullable(customerRepository.getRecordById(customerSiteEvent.getCustomerId()));
+        customerSiteEvent.getBenefitDetailsList().forEach(item->{
+            //TODO Get the SSO parameters populated here
+            CrafterCreateSite createSite = CrafterCreateSite.builder().create_option(createOption)
+                    .site_id(item.getDomainDetails().getSiteName().toLowerCase())
+                    .authentication_type(authenticationType).blueprint(blueprint).description(item.getDomainDetails().getSiteDesc())
+                    .remote_name(remoteName).remote_password(remotePassword).remote_url(remoteUrl)
+                    .remote_username(remoteUsername).use_remote(useRemote).build();
+            CompletableFuture.supplyAsync(() ->
+                    crafterAdapter.deleteCMSSite(createSite,customerSiteEvent.getCustomerId())
+            ).thenRun(() ->
+                    //TODO Find a way to populate the customer object for domain and SSO
+                    domainDetailsAdapter.updateExistingDomainDetails(item.getDomainDetails(),customer.get(),customerSiteEvent.getCorrelationId())
+
+            );
+        });
+
+    }
+    public void updateCustomerSites(CustomerSiteEvent customerSiteEvent) throws JAXBException {
+        log.info("Initiate createCrafterSite in service" + correlationId + customerSiteEvent.getCorrelationId());
+        CustomerInbox customerUpdateSiteDetails = customerInboxAdapter.getCustomerInboxForSiteUpdate(customerSiteEvent);
+        log.info("Retrieve the customer site details "+ customerUpdateSiteDetails);
+        CustomerSiteUpdateRequest customerSiteUpdateRequest = util.getSiteUpdateDetailfromJson(customerUpdateSiteDetails);
+        List<BenefitDetail> benefitList = customerSiteUpdateRequest.getBenefitDetail();
+        List<BenefitDetail> newSiteList = benefitList.parallelStream().filter(b->b.isNewlyAdded()).collect(Collectors.toList());
+        List<BenefitDetail> updatingSiteList = benefitList.parallelStream().filter(b->b.isDeleted()).collect(Collectors.toList());
+        //CustomerSiteEvent newcustomerSiteEvent = customerSiteEvent;
+        CustomerSiteEvent newcustomerSiteEvent = CustomerSiteEvent.builder()
+                .customerId(customerSiteEvent.getCustomerId())
+                .customerRequestId(customerSiteEvent.getCustomerRequestId())
+                .state(customerSiteEvent.getState())
+                .correlationId(customerSiteEvent.getCorrelationId())
+                .customerTemplateId(customerSiteEvent.getCustomerTemplateId())
+                .email(customerSiteEvent.getEmail())
+                .firsName(customerSiteEvent.getFirsName())
+                .benefitDetailsList(newSiteList)
+                .build();
+      //  newcustomerSiteEvent.setBenefitDetailsList(newSiteList);
+        createSites(newcustomerSiteEvent);
+      //  CustomerSiteEvent deletecustomerSiteEvent = customerSiteEvent;
+        CustomerSiteEvent deletecustomerSiteEvent = CustomerSiteEvent.builder()
+                .customerId(customerSiteEvent.getCustomerId())
+                .customerRequestId(customerSiteEvent.getCustomerRequestId())
+                .state(customerSiteEvent.getState())
+                .correlationId(customerSiteEvent.getCorrelationId())
+                .customerTemplateId(customerSiteEvent.getCustomerTemplateId())
+                .email(customerSiteEvent.getEmail())
+                .firsName(customerSiteEvent.getFirsName())
+                .benefitDetailsList(updatingSiteList)
+                .build();
+       // deletecustomerSiteEvent.setBenefitDetailsList(updatingSiteList);
+        deleteSites(deletecustomerSiteEvent);
+        CustomerStatus customerStatus =  CustomerStatus.builder().customerId(customerSiteEvent.getCustomerId())
+                .correlationId(customerSiteEvent.getCorrelationId())
+                .build();
+        customerStatusAdapter.updateCmsSiteCustomerStatus(customerStatus);
+        benefitList.parallelStream().filter(b->b.isNewlyAdded()).collect(Collectors.toList());
+        //TODO complete the delete site
+        log.info("End of the createCrafterSite in service " + correlationId);
+    }
+    public void publishTemplate(CustomerTemplateEvent templateEvent) throws JAXBException {
+        log.info("End of the publishTemplate in service " + correlationId);
+        CustomerInbox customerDeatils = customerInboxAdapter.getCustomerForTemplateRequest(templateEvent);
+        CustomerCreateDetail createDetailJson = util.getCreateDetailfromJson(customerDeatils);
+        CrafterCreateSite createSite = CrafterCreateSite.builder().create_option(createOption)
+                .site_id(createDetailJson.getDomainDetails().getSiteName().toLowerCase())
+                .authentication_type(authenticationType).blueprint(blueprint).description(description)
+                .remote_name(remoteName).remote_password(remotePassword).remote_url(remoteUrl)
+                .remote_username(remoteUsername).use_remote(useRemote).build();
+
+        crafterAdapter.startCMSSite(createSite,customerDeatils.getCustomerId());
+
+        log.info("End of the publishTemplate in service " + correlationId);
+    }
+
+    public void publishTemplate(CustomerSiteEvent customerSiteEvent) throws JAXBException {
+        log.info("End of the publishTemplate in service " + correlationId);
+        CustomerInbox customerDeatils = customerInboxAdapter.getCustomerInboxForSiteUpdate(customerSiteEvent);
+        CustomerCreateDetail createDetailJson = util.getCreateDetailfromJson(customerDeatils);
+        CrafterCreateSite createSite = CrafterCreateSite.builder().create_option(createOption)
+                .site_id(createDetailJson.getDomainDetails().getSiteName().toLowerCase())
+                .authentication_type(authenticationType).blueprint(blueprint).description(description)
+                .remote_name(remoteName).remote_password(remotePassword).remote_url(remoteUrl)
+                .remote_username(remoteUsername).use_remote(useRemote).build();
+
+        crafterAdapter.startCMSSite(createSite,customerDeatils.getCustomerId());
+
+        log.info("End of the publishTemplate in service " + correlationId);
+    }
+
+    public void deployTemplate(CustomerSiteEvent customerSiteEvent) throws JAXBException {
+        log.info("End of the deployTemplate in service " + correlationId);
+        CustomerInbox customerDeatils = customerInboxAdapter.getCustomerInboxForSiteUpdate(customerSiteEvent);
+        CustomerCreateDetail createDetailJson = util.getCreateDetailfromJson(customerDeatils);
+        DeploymentSite deploymentSite = DeploymentSite.builder()
+                .env(env)
+                .site_name(createDetailJson.getDomainDetails().getSiteName().toLowerCase())
+                .replace(replace).template_name(templateName)
+                .repo_url(repoUrl.replace("member-templates",createDetailJson.getDomainDetails().getSiteName().toLowerCase()))
+                .repo_branch(repoBranch)
+                .engine_url(engineUrl).build();
+        crafterAdapter.deploymentTemplate(deploymentSite,customerDeatils.getCustomerId());
+
+        log.info("End of the deployTemplate in service " + correlationId);
+    }
+    public void deployTemplate(CustomerTemplateEvent templateEvent) throws JAXBException {
+        log.info("End of the deployTemplate in service " + correlationId);
+        CustomerInbox customerDeatils = customerInboxAdapter.getCustomerForTemplateRequest(templateEvent);
+        CustomerCreateDetail createDetailJson = util.getCreateDetailfromJson(customerDeatils);
+        DeploymentSite deploymentSite = DeploymentSite.builder()
+                .env(env)
+                .site_name(createDetailJson.getDomainDetails().getSiteName().toLowerCase())
+                .replace(replace).template_name(templateName)
+                .repo_url(repoUrl.replace("member-templates",createDetailJson.getDomainDetails().getSiteName().toLowerCase()))
+                .repo_branch(repoBranch)
+                .engine_url(engineUrl).build();
+        crafterAdapter.deploymentTemplate(deploymentSite,customerDeatils.getCustomerId());
+
+        log.info("End of the deployTemplate in service " + correlationId);
+    }
+
+    @Transactional
+    // TODO This method may not be used in current
+    public CustomerResponse updateCustomerEvent(CustomerUpdateDetail customerUpdateDetail, Long id, String correlationId)
+            throws CustomerRuntimeException {
+        log.info("Initiate updateCustomerRegistration in service " + correlationId + correlationId);
+        Customer customer = customerAdapter.getCustomer(id, correlationId);
+
+        CustomerInbox customerInbox = customerInboxAdapter.updateToinbox(customerUpdateDetail, customer, correlationId);
+        //TODO Decide what event and what fields need to be adjusted here
+        CustomerEvent customerEvent = CustomerEvent.builder().state(CUSTOMER_UPDATED)
+                .correlationId(customerInbox.getCorrelationId()).customerRequestId(customer.getCorrelationId())
+                .customerRequestId(customerInbox.getCustomerRequestId())
+                .customerId(customerInbox.getCustomerId()).build();
+        publisher.send(customerEvent.toString(), customerEvent.getState());
+        log.info("updateCustomerEvent Published in service: " + customerRequestId + customerEvent.getCustomerRequestId());
+        CustomerRuleEvent ruleEvent = CustomerRuleEvent.builder().state("rules.updated")
+                .correlationId(customerInbox.getCorrelationId()).customerRequestId(customer.getCorrelationId())
+                .customerId(customerInbox.getCustomerId()).build();
+        publisher.send(ruleEvent.toString(), ruleEvent.getState());
+        log.info("ruleEvent Published in service: " + customerRequestId + customerEvent.getCustomerRequestId());
+        List<BenefitDetail> benefitDetailsList = new ArrayList<>();
+        benefitDetailsList.add(customerUpdateDetail.getBenefitDetail());
+        CustomerSiteEvent customerSiteEvent = CustomerSiteEvent.builder().state(CUSTOMER_SITE_UPDATED)
+                .correlationId(customerInbox.getCorrelationId()).customerRequestId(customer.getCorrelationId())
+                .benefitDetailsList(benefitDetailsList)
+                .customerId(customerInbox.getCustomerId()).build();
+        publisher.send(customerSiteEvent.toString(), customerSiteEvent.getState());
+        log.info("customerSiteEvent Published in service: " + customerRequestId + customerSiteEvent.getCustomerRequestId());
+
+
+        CustomerResponse customerResponse = CustomerResponse.builder().customerId(customer.getCustomerId())
+                .correlationId(customer.getCorrelationId())
+                .customerRequestId(customer.getCorrelationId())
+                .message("Customer update request has been received and you will be receiving an Email Shortly!! ").build();
+        log.info("End of createCustomerEvent in service " + correlationId + correlationId);
+        return customerResponse;
+    }
+    @Transactional
+    //TODO THIS method is being used to update the customer sites
+    public CustomerResponse updateCustomerSitesEvent(CustomerSiteUpdateRequest customerSiteUpdateRequest, String correlationId,Long id)
+            throws CustomerRuntimeException {
+        log.info("Initiate updateCustomerRegistration in service " + correlationId + correlationId);
+        Customer customer = customerAdapter.getCustomer(id, correlationId);
+        // TODO Determine what details need to be updated
+        CustomerInbox customerInbox = customerInboxAdapter.updateCustomerSiteToinbox(customerSiteUpdateRequest, customer, correlationId);
+      /*  CustomerEvent customerEvent = CustomerEvent.builder().state(CUSTOMER_UPDATED)
+                .correlationId(customerInbox.getCorrelationId()).customerRequestId(customer.getCorrelationId())
+                .customerRequestId(customerInbox.getCustomerRequestId())
+                .customerId(customerInbox.getCustomerId()).build();
+        sendDataToPublisher(customerEvent, customerEvent.getState());
+        log.info("updateCustomerEvent Published in service: " + customerRequestId + customerEvent.getCustomerRequestId());*/
+        CustomerUser customerUser = null;
+        try
+        {
+            customerUser = customerUserRepository.getCustomerUserByEmailId(customerSiteUpdateRequest.getCustomerDetail().getCustomerUserEmailId());
+        }
+        catch (Exception exception)
+        {
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+                    "Duplicate user exists");
+        }
+        if(Objects.isNull(customerUser))
+        {
+            throw new CustomerRuntimeException(HttpStatus.BAD_REQUEST,400,"Customer with user email id :"
+                    + customerSiteUpdateRequest.getCustomerDetail().getCustomerUserEmailId() +" does not exist");
+        }
+        CustomerSiteEvent siteUpdateEvent = CustomerSiteEvent.builder().state(CUSTOMER_SITE_UPDATED)
+                .correlationId(customerInbox.getCorrelationId())
+                .customerTemplateId("b") //TODO get the template from benefit details
+                .firsName(customerUser.getFirstName())
+                .lastName(customerUser.getLastName())
+                .email(customerUser.getEmailId())
+                .benefitDetailsList(customerSiteUpdateRequest.getBenefitDetail())
+                .customerRequestId(customerInbox.getCustomerRequestId())
+                .groupName("test") //TODO Change the group name from the organization
+                .customerId(customerInbox.getCustomerId()).build();
+        sendDataToPublisher(siteUpdateEvent, siteUpdateEvent.getState());
+        log.info("Customer site update event is published in service: " + customerRequestId + siteUpdateEvent.getCustomerRequestId());
+        // TODO think about different events and update the status
+        CustomerResponse customerResponse = CustomerResponse.builder().customerId(customer.getCustomerId())
+                .correlationId(customer.getCorrelationId())
+                .customerRequestId(customer.getCorrelationId())
+                .message("Customer update request has been received and you will be receiving an Email Shortly!! ").build();
+        log.info("End of createCustomerEvent in service " + correlationId + correlationId);
+        return customerResponse;
+    }
+
+    @Transactional
+    public Customer updateCustomer(CreateUpdateCustomerRequest request)
+            throws CustomerRuntimeException {
+
+        Customer customer = customerAdapter.getCustomer(request.getCustomerId(),"");
+        log.info("customer details fetched success"+customer);
+
+        customer.setUserId(request.getUserId());
+        Customer  customerResponse=null;
+        try {
+            customerResponse=  customerRepository.save(customer);
+            log.info("update customer -by praveen success");
+        }catch(Exception e) {
+            e.printStackTrace();
+            throw new CustomerRuntimeException();
+            //throw here customerruntimeexception
+        }
+
+        return customerResponse;
+    }
+
+    public Customer updateCustomerRegistration(CustomerEvent event) throws CustomerRuntimeException {
+        log.info("Initiate createCustomerRegistration in service" + correlationId + event.getCorrelationId());
+        CustomerInbox customerDeatils = customerInboxRepository.getCustomerRequest(event.getCustomerRequestId());
+        Gson g = new Gson();
+        CustomerUpdateDetail updateDatail = g.fromJson(customerDeatils.getDetails(), CustomerUpdateDetail.class);
+        Customer customerDetails = customerAdapter.updateAllCustomerDetails(updateDatail, event.getCustomerId(), event.getCorrelationId());
+        log.info("End of the createCustomerRegistration in service " + correlationId + event.getCorrelationId());
+        return customerDetails;
+    }
+
+
+    @Transactional
+    public void updateMarketingAutomationStatus(CustomerDomainStatusUpdateEvent eventCreated) throws CustomerRuntimeException {
+        log.info("Initiate updateMarketingAutomationStatus request");
+        customerAdapter.updateCustomerDomainNMAStatus(eventCreated);
+
+    }
+
+    @Transactional
+    public void updateCustomerDetails(CustomerUpdateDetail eventCreated) throws CustomerRuntimeException {
+        log.info("Initiate updateCustomerUpdateDetails request");
+        Organization organization = customerAdapter.appendOrganization(eventCreated.getOrgDetail(),eventCreated.getCustomerId(),null);
+        Customer customerEntity = Customer.builder().customerId(eventCreated.getCustomerId()).build();
+        Tier tier = customerAdapter.createTier(eventCreated.getTierDetail(),customerEntity,null);
+        List<Tier> tierList = new ArrayList<>();
+        tierList.add(tier);
+        customerEntity.setTierCollection(tierList);
+        customerAdapter.updateCustomerOrgTierNAddressDetails(eventCreated,organization,tierList);
+
+    }
+
+    @Transactional
+    public CustomerUserResponse addCustomerUser(CustomerUserRequest customerUserRequest, String correlationId, Long customerId)
+            throws CustomerRuntimeException {
+        log.info("Initiate customerUserRole in service " + " - CorrelationId: " + correlationId);
+        CustomerUserResponse customerUserResponse=customerAdapter.addCustomerUserAndRole(customerUserRequest,correlationId,customerId);
+
+        return  customerUserResponse;
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/service/ActivationService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/service/ActivationService.java b/src/main/java/com/syzegee/customer/events/service/ActivationService.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/service/ActivationService.java	(date 1613491889000)
@@ -0,0 +1,66 @@
+package com.syzegee.customer.events.service;
+
+import com.syzegee.customer.events.adapter.CommunicationAdapter;
+import com.syzegee.customer.events.adapter.CustomerAdapter;
+import com.syzegee.customer.events.adapter.CustomerInboxAdapter;
+import com.syzegee.customer.events.entity.Customer;
+import com.syzegee.customer.events.entity.CustomerInbox;
+import com.syzegee.customer.events.exception.CustomerRuntimeException;
+import com.syzegee.customer.events.model.*;
+import com.syzegee.customer.events.util.JsonUtil;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.io.IOException;
+
+@Service
+@Slf4j
+public class ActivationService {
+
+    @Autowired
+    private CustomerAdapter customerAdapter;
+
+    @Autowired
+    private CustomerInboxAdapter customerInboxAdapter;
+
+    @Autowired
+    private CommunicationAdapter communicationAdapter;
+
+    @Autowired
+    private JsonUtil util;
+
+    private String correlationId = " - CorrelationId: ";
+
+    public CustomerActivationResponse createActivation(CustomerActivationDetails customerActivationDetails, String correlationId) throws IOException {
+        log.info("Initiate createActivation in service " + " - CorrelationId: " + correlationId);
+        Customer customer = customerAdapter.createActivationDetails(customerActivationDetails, correlationId);
+        CustomerActivationResponse activationResponse = CustomerActivationResponse.builder().customerId(customer.getCustomerId())
+                .correlationId(customer.getCorrelationId())
+                .emailId(customerActivationDetails.getUserDetail().getEmailId())
+                .activation_code(customer.getActivationCode()).build();
+
+            communicationAdapter.sendCustomerActivationEmail(activationResponse);
+
+        log.info("End of createActivation in service " + correlationId + correlationId);
+        return activationResponse;
+    }
+
+    public ActivationValidateResponse createValidateActivation(ActivationValidateDetails activationValidateDetails,
+                                                               String correlationId) {
+        log.info("Initiate createValidateActivation in service " + correlationId + correlationId);
+        ActivationValidateResponse activationValidateResponse = customerAdapter.createValidateActivationDetails
+                (activationValidateDetails, correlationId);
+        log.info("End of createValidateActivation in service " + " - CorrelationId: " + correlationId);
+        return activationValidateResponse;
+    }
+
+    public Customer createCustomerRegistration(CustomerEvent event) throws CustomerRuntimeException {
+        log.info("Initiate createCustomerRegistration in service" + correlationId + event.getCorrelationId());
+        CustomerInbox customerDeatils = customerInboxAdapter.getCustomerRequest(event);
+        CustomerCreateDetail createDetailJson = util.getCreateDetailfromJson(customerDeatils);
+        Customer customerDetails = customerAdapter.createAllCustomerDetails(createDetailJson, event.getCorrelationId(), event.getCustomerId());
+        log.info("End of the createCustomerRegistration in service " + correlationId + event.getCorrelationId());
+        return customerDetails;
+    }
+}
Index: src/main/java/com/syzegee/customer/events/exception/CustomerServiceException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/exception/CustomerServiceException.java b/src/main/java/com/syzegee/customer/events/exception/CustomerServiceException.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/exception/CustomerServiceException.java	(date 1613491889000)
@@ -0,0 +1,54 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.exception;
+
+ import org.springframework.http.HttpStatus;
+
+
+/**
+ * @author Sagar
+ */
+public class CustomerServiceException extends RuntimeException {
+
+    private HttpStatus status;
+    private int code;
+    private String message;
+
+    public CustomerServiceException(Exception exception) {
+        super(exception);
+    }
+
+    public CustomerServiceException(HttpStatus httpStatus, int code, String message) {
+        this.status = httpStatus;
+        this.code = code;
+        this.message = message;
+    }
+
+    public HttpStatus getHttpStatus() {
+        return status;
+    }
+
+    public void setHttpStatus(HttpStatus httpStatus) {
+        this.status = httpStatus;
+    }
+
+    public int getCode() {
+        return code;
+    }
+
+    public void setCode(int code) {
+        this.code = code;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/exception/ErrorMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/exception/ErrorMessage.java b/src/main/java/com/syzegee/customer/events/exception/ErrorMessage.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/exception/ErrorMessage.java	(date 1613491889000)
@@ -0,0 +1,62 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.exception;
+
+import org.springframework.http.HttpStatus;
+
+
+/**
+ * @author Sagar
+ */
+public class ErrorMessage {
+
+    private HttpStatus status;
+    private int code;
+    private String message;
+
+    public ErrorMessage() {
+    }
+
+
+    public ErrorMessage(HttpStatus status, int code, String message) {
+        super();
+        this.status = status;
+        this.code = code;
+        this.message = message;
+    }
+
+    public ErrorMessage(HttpStatus status, int code) {
+        super();
+        this.status = status;
+        this.code = code;
+    }
+
+    public HttpStatus getStatus() {
+        return status;
+    }
+
+    public void setStatus(HttpStatus status) {
+        this.status = status;
+    }
+
+    public int getCode() {
+        return code;
+    }
+
+    public void setCode(int code) {
+        this.code = code;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+
+}
Index: src/main/java/com/syzegee/customer/events/exception/GenericException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/exception/GenericException.java b/src/main/java/com/syzegee/customer/events/exception/GenericException.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/exception/GenericException.java	(date 1613491889000)
@@ -0,0 +1,23 @@
+package com.syzegee.customer.events.exception;
+
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.Setter;
+
+@Getter
+@Setter
+@JsonIgnoreProperties(ignoreUnknown = true)
+@AllArgsConstructor
+public class GenericException extends RuntimeException{
+	
+	private static final long serialVersionUID = 1L;
+	
+	private boolean success;
+	private int status;
+	private String message;
+	private String description;
+	private String data;
+
+
+}
Index: src/main/java/com/syzegee/customer/events/constants/Constants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/constants/Constants.java b/src/main/java/com/syzegee/customer/events/constants/Constants.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/constants/Constants.java	(date 1613491889000)
@@ -0,0 +1,51 @@
+package com.syzegee.customer.events.constants;
+
+public class Constants {
+
+    public static final String CUSTOMER_CREATED = "customer.created";
+    public static final String CUSTOMER_UPDATED = "customer.updated";
+    public static final String CUSTOMER_DELETED = "customer.deleted";
+    public static final String CUSTOMER_RULE_CREATED = "customer.rule.created";
+    public static final String CUSTOMER_RULE_UPDATED = "customer.rule.updated";
+    public static final String CUSTOMER_RULE_DELETED = "customer.rule.deleted";
+    public static final String CUSTOMER_SITE_CREATION = "customer.template.created";
+    public static final String CUSTOMER_SITE_UPDATED= "customer.site.updated";
+    public static final String CUSTOMER_SITE_DELETED = "customer.site.deleted";
+    public static final String MARKETING_AUTOMATION ="marketing.automation";
+    public static final String MARKETING_AUTOMATION_CREATED ="marketing.automation.created";
+    public static final String Cookie = "cookie";
+    public static final String JSESSIONID = "JSESSIONID=";
+    public static final String XSRF_TOKEN = "XSRF-TOKEN=";
+    public static final String X_XSRF_TOKEN = "X-XSRF-TOKEN";
+    public static final String HEADER_NAME_SET_COOKIE = "Set-Cookie";
+    public static final String HEADER_NAME_XSRF_TOKEN = "XSRF-TOKEN";
+    public static final String HEADER_NAME_JSESSIONID = "JSESSIONID";
+
+    public static final String FIRSTNAME = "firstname";
+    public static final String LASTNAME = "lastname";
+    public static final String EMAIL = "email";
+    public static final String USERNAME = "username";
+    public static final String SECURE_KEY = "secure_key";
+    public static final String GROUPS = "groups";
+
+    public static final String USER = "user";
+    public static final String ID = "id";
+
+    public static final String SITE_ID = "site_id";
+    public static final String PHASE = "phase";
+    public static final String PATH = "path";
+    public static final String FILENAME = "fileName";
+    public static final String CONTENTTYPE = "contentType";
+    public static final String UNLOCK = "unlock";
+
+    public static final String TRUE = "true";
+    public static final String MEMBER_SUBSCRIPTION_HISTORY = "member_subscription_history";
+    public static final String BATCH = "Batch";
+
+    public static final String X_CORRELATION_ID = "x-correlation-id";
+    public static final String TENANT_ID = "tenant-id";
+
+    private Constants() {
+
+    }
+}
Index: src/main/java/com/syzegee/customer/events/validator/CustomerValidator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/validator/CustomerValidator.java b/src/main/java/com/syzegee/customer/events/validator/CustomerValidator.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/validator/CustomerValidator.java	(date 1613491889000)
@@ -0,0 +1,139 @@
+package com.syzegee.customer.events.validator;
+
+import com.syzegee.customer.events.exception.CustomerServiceException;
+import com.syzegee.customer.events.model.*;
+import com.syzegee.customer.events.entity.Customer;
+import com.syzegee.customer.events.entity.CustomerUser;
+import com.syzegee.customer.events.exception.CustomerRuntimeException;
+import com.syzegee.customer.events.repository.CustomerRepository;
+import com.syzegee.customer.events.repository.CustomerUserRepository;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Component;
+import org.springframework.transaction.annotation.Transactional;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@Component
+public class CustomerValidator {
+
+	@Autowired
+	private CustomerRepository customerRepository;
+
+	@Autowired
+	private CustomerUserRepository userRepository;
+
+	public boolean validateEntity(String fieldName, Object entity) {
+		if (entity != null) {
+			log.info("field value is:" + entity);
+			return true;
+		} else {
+			throw new CustomerServiceException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(), fieldName + " is not present " +
+					"with given id");
+		}
+	}
+
+
+	public void validateActivationFields(CustomerActivationDetails customerActivationDetails) throws CustomerRuntimeException {
+		if (customerActivationDetails != null) {
+			this.validateField("organization", customerActivationDetails.getOrgDetail().getOrganizationName());
+			this.validateField("customer_user", customerActivationDetails.getUserDetail().getFirstName());
+			this.validateField("customer_user", customerActivationDetails.getUserDetail().getLastName());
+			this.validateField("customer_user", customerActivationDetails.getUserDetail().getEmailId());
+			CustomerUser customerUser = userRepository.getCustomerUserByEmailId(customerActivationDetails.getUserDetail().getEmailId());
+			if (customerUser != null) {
+				throw new CustomerServiceException(HttpStatus.BAD_REQUEST,HttpStatus.BAD_REQUEST.value(),"Customer User ID :" + customerUser.getEmailId() + " Already Exist!! Please provide new email address");
+			}
+		} else {
+			throw new  CustomerServiceException(HttpStatus.BAD_REQUEST,HttpStatus.BAD_REQUEST.value(),"Invalid Payload. Please verify the input request");
+		}
+	}
+
+
+	public void validateActivationCodeFields(ActivationValidateDetails activationValidateDetails) throws CustomerRuntimeException {
+		if (activationValidateDetails != null) {
+			this.validateField("customer", activationValidateDetails.getActivationCode());
+			this.validateField("customer", activationValidateDetails.getCustomerUserId());
+		} else
+			throw new  CustomerServiceException(HttpStatus.BAD_REQUEST,HttpStatus.BAD_REQUEST.value(),"Invalid Payload. Please verify the input request");
+	}
+
+	public void validateRequiredFields(CustomerCreateDetail createDetail) throws CustomerRuntimeException {
+		if (createDetail != null) {
+			this.validateField("organization", createDetail.getOrgDetail().getOrganizationSize());
+			this.validateField("customer", createDetail.getCustomerDetail().getRegion());
+			this.validateField("customer", createDetail.getCustomerDetail().getBusinessType());
+			this.validateField("customer", createDetail.getCustomerDetail().getBusinessCategory());
+			this.validateField("Address", createDetail.getCustAddressDetail().getAddressLine1());
+			this.validateField("Tier", createDetail.getTierDetail().getTierName());
+			if(createDetail.getPackagesDetail()!=null&&!createDetail.getPackagesDetail().isEmpty())
+			{
+				for (PackagesDetail detail : createDetail.getPackagesDetail()) {
+					this.validateField("Package", detail.getPackageName());
+				}
+			}
+			if(createDetail.getBenefitDetail()!=null&&!createDetail.getBenefitDetail().isEmpty()) {
+				for (BenefitDetail benefitDetail : createDetail.getBenefitDetail()) {
+					this.validateField("Benefit", benefitDetail.getBenefitName());
+				}
+			}
+			try {
+				System.out.println("createDetail.getPackagesDetail()"+createDetail.getPackagesDetail());
+				if(createDetail.getPackagesDetail()!=null&&!createDetail.getPackagesDetail().isEmpty()) {
+					for (PackagesDetail packageBenefitsDetail : createDetail.getPackagesDetail()) {
+						this.validateField("PackageBenefits", packageBenefitsDetail.getPackageName());
+					}
+				}
+			}catch(Exception e) {
+				e.printStackTrace();
+			}
+
+		} else
+			throw new CustomerServiceException(HttpStatus.BAD_REQUEST,HttpStatus.BAD_REQUEST.value(),"Invalid Payload");
+	}
+
+	/**
+	 * @param fieldName
+	 * @param fieldValue
+	 * @return
+	 */
+	public boolean validateField(String fieldName, String fieldValue) {
+		if (fieldValue != null && !fieldValue.equals("null") && !fieldValue.trim().isEmpty()) {
+			log.info("field value is test:" + fieldValue + "fieldname is:" + fieldName);
+			return true;
+		} else
+			throw new CustomerServiceException(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(),
+					"" + fieldName + ": " + fieldValue + " Invalid Input, field cannot be null");
+	}
+
+	@Transactional
+	//TODO move the Respository logic into the class
+	public ActivationValidateResponse validateActivationCode(ActivationValidateDetails activationValidateDetails) {
+		ActivationValidateResponse validateResponse;
+		CustomerUser customerUser = userRepository.getCustomerUserByEmailId(activationValidateDetails.getCustomerUserId());
+
+		if (customerUser != null) {
+			Customer customer = customerRepository.getActiveCustomerById(customerUser.getCustomerId().getCustomerId());
+			if(customer.getActivationStatus() == true) {
+				throw new  CustomerServiceException(HttpStatus.BAD_REQUEST,HttpStatus.BAD_REQUEST.value(),"Customer Activation code is already completed");
+			}
+			if (customer != null) {
+				if (customer.getActivationCode().equals(activationValidateDetails.getActivationCode())) {
+					customer.setActivationStatus(Boolean.TRUE);
+					Customer save = customerRepository.save(customer);
+					validateResponse = ActivationValidateResponse.builder().status(save.getActivationStatus()).customerId(save.getCustomerId()).build();
+					return validateResponse;
+				} else {
+					throw new  CustomerServiceException(HttpStatus.BAD_REQUEST,HttpStatus.BAD_REQUEST.value(),"Customer Activation code did not match Please Re-enter Your Activation Code");
+				}
+			} else {
+				throw new  CustomerServiceException(HttpStatus.BAD_REQUEST,HttpStatus.BAD_REQUEST.value(),"Customer Activation Code Not Found!!");
+			}
+		} else {
+			throw new  CustomerServiceException(HttpStatus.BAD_REQUEST,HttpStatus.BAD_REQUEST.value(),"Customer userId Not Found!");
+		}
+	}
+}
Index: src/main/java/com/syzegee/customer/events/listeners/CustomerCommandHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/listeners/CustomerCommandHandler.java b/src/main/java/com/syzegee/customer/events/listeners/CustomerCommandHandler.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/listeners/CustomerCommandHandler.java	(date 1613491889000)
@@ -0,0 +1,135 @@
+package com.syzegee.customer.events.listeners;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.syzegee.customer.events.adapter.CustomerConnectors;
+
+
+import com.syzegee.customer.events.model.CustomerDomainStatusUpdateEvent;
+import com.syzegee.customer.events.model.CustomerUpdateDetail;
+import com.syzegee.customer.events.model.crafter.CustomerSiteEvent;
+import com.syzegee.customer.events.model.ruleengine.CustomerRuleEvent;
+import com.syzegee.customer.events.model.CustomerEvent;
+import com.syzegee.customer.events.service.ActivationService;
+import com.syzegee.customer.events.service.CustomerService;
+import com.syzegee.customer.events.util.JsonUtil;
+import lombok.Builder;
+import lombok.Data;
+import lombok.experimental.Tolerate;
+import lombok.extern.slf4j.Slf4j;
+import org.apache.kafka.clients.consumer.ConsumerRecord;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.kafka.annotation.KafkaListener;
+import org.springframework.stereotype.Service;
+
+import javax.xml.bind.JAXBException;
+
+import static com.syzegee.customer.events.constants.Constants.*;
+
+@Data
+@Builder
+@Slf4j
+@Service
+public class CustomerCommandHandler {
+
+    @Autowired
+    private CustomerConnectors connector;
+    @Autowired
+    private CustomerService service;
+    @Autowired
+    private ActivationService activationService;
+    // TODO Util class should not be autowired and change to static accessed way.
+    @Autowired
+    JsonUtil util;
+    @Tolerate
+    public CustomerCommandHandler() {
+    }
+
+    @KafkaListener(topics = {CUSTOMER_CREATED, CUSTOMER_UPDATED, CUSTOMER_SITE_UPDATED,CUSTOMER_DELETED,
+            CUSTOMER_RULE_CREATED, CUSTOMER_RULE_UPDATED, CUSTOMER_RULE_DELETED, CUSTOMER_SITE_CREATION,CUSTOMER_SITE_DELETED})
+    public void consumeCustomerEvent(ConsumerRecord<String, Object> event) throws JsonProcessingException, JAXBException {
+        try {
+            log.info("Initiate consumeCustomerEvent in CustomerCommandHandler" + " - CorrelationId: " + event);
+
+            switch (event.topic()){
+                case CUSTOMER_CREATED:
+                    customerCreatedEventListener(event);
+
+                case CUSTOMER_UPDATED:
+                    customerUpdatedEventListener(event);
+
+                case CUSTOMER_RULE_CREATED:
+                    customerRuleCreatedEventListener(event);
+
+                case CUSTOMER_SITE_CREATION:
+                    customerSiteCreatedEventListener(event);
+
+                case CUSTOMER_SITE_UPDATED:
+                    customerSiteUpdatedEventListener(event);
+
+                case CUSTOMER_SITE_DELETED:
+                    customerSiteUpdatedEventListener(event);
+
+                case MARKETING_AUTOMATION_CREATED:
+                    marketingAutomationCreatedEventListener(event);
+
+            }
+            log.info("End of consumeCustomerEvent in CustomerCommandHandler");
+        } catch (Exception ex){
+            log.info("In CustomerCommandHandler Error occured "+ex+"  correlationId="+event.value().toString());
+        }
+    }
+
+    private void marketingAutomationCreatedEventListener(ConsumerRecord<String, Object> event) {
+        CustomerDomainStatusUpdateEvent customerDomainStatusUpdateEvent = util.getMarketingAutomationtEventCreatedFromJson(event.value().toString());
+        service.updateMarketingAutomationStatus(customerDomainStatusUpdateEvent);
+        log.info("End of MARKETING_AUTOMATION_CREATED in CustomerCommandHandler" + " - CustomerRequestID: " + customerDomainStatusUpdateEvent.getCorrelationId());
+    }
+
+    private void customerSiteUpdatedEventListener(ConsumerRecord<String, Object> event) throws JAXBException {
+        System.out.println("-------------------------------CUSTOMER_SITE_UPDATED : "+ (event.value().toString()));
+        CustomerSiteEvent customerSiteUpdateEvent = util.getCustomerSiteUpdateEventFromJson(event.value().toString());
+        System.out.println("Customer Site update event String : "+ customerSiteUpdateEvent.toString());
+        service.updateCustomerSites(customerSiteUpdateEvent);
+        System.out.println("CUSTOMER_SITE_UPDATED : "+ (event.value().toString()));
+        // TODO decide the logic here
+        // TODO create Customer status table and update the status
+        log.info("End of CUSTOMER_TEMPLATE_CREATED in CustomerCommandHandler" + " - CustomerRequestID: " + customerSiteUpdateEvent.getCustomerRequestId());
+    }
+
+    private void customerSiteCreatedEventListener(ConsumerRecord<String, Object> event) throws JAXBException {
+        //CustomerTemplateEvent customerTemplateEvent = util.getCustomerTemplateEventFromJson( event.value().toString());
+        //service.createCrafterSite(customerTemplateEvent);
+        CustomerSiteEvent customerSiteEvent = util.getCustomerSiteUpdateEventFromJson(event.value().toString());
+        //   List<BenefitDetail> benefitList = new ArrayList<>(); //Check what needs to be added here
+  //      service.createSites(customerSiteEvent);
+        service.createSitesNUpdateCustomerStatus(customerSiteEvent);
+        //T0DO check if the above method is working fine
+     //   service.publishTemplate(customerSiteEvent);
+    //    service.deployTemplate(customerSiteEvent);
+        //TODO investigate why these two methods are needed
+        //  service.publishTemplate(customerSiteUpdateEvent);
+        //service.deployTemplate(customerSiteUpdateEvent);
+        log.info("End of CUSTOMER_TEMPLATE_CREATED in CustomerCommandHandler" + " - CustomerRequestID: " + customerSiteEvent.getCustomerRequestId());
+    }
+
+    private void customerRuleCreatedEventListener(ConsumerRecord<String, Object> event) {
+        CustomerRuleEvent customerRuleEventFromJson = util.getCustomerRuleEventFromJson(event.value().toString());
+        service.createCustomerRule(customerRuleEventFromJson);
+        log.info("End of CUSTOMER_RULE_CREATED in CustomerCommandHandler" + " - CustomerRequestID: " + customerRuleEventFromJson.getCustomerRequestId());
+        //TODO this CUSTOMER_TEMPLATE_CREATED need to be changed as Customer site created.
+    }
+
+    private void customerUpdatedEventListener(ConsumerRecord<String, Object> event) {
+        //TODO DISCUSS and update what ned to be done
+        CustomerUpdateDetail customerUpdateDetail = util.getCustomerUpdateDetailFromJson(event.value().toString());
+        service.updateCustomerDetails(customerUpdateDetail);
+
+    }
+
+    private void customerCreatedEventListener(ConsumerRecord<String, Object> event) {
+        CustomerEvent customerEventFromJson = util.getCustomerEventFromJson(event.value().toString());
+        activationService.createCustomerRegistration(customerEventFromJson);
+        log.info("End of CUSTOMER_CREATED in CustomerCommandHandler" + " - CustomerRequestID: " + customerEventFromJson.getCustomerRequestId());
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/exception/CustomerRuntimeException.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/exception/CustomerRuntimeException.java b/src/main/java/com/syzegee/customer/events/exception/CustomerRuntimeException.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/exception/CustomerRuntimeException.java	(date 1613491889000)
@@ -0,0 +1,62 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+
+package com.syzegee.customer.events.exception;
+
+import org.springframework.http.HttpStatus;
+
+
+/**
+ * @author Sagar
+ */
+
+public class CustomerRuntimeException extends RuntimeException{
+
+
+    private HttpStatus status;
+    private int code = -1;
+    private String message;
+    
+
+    public CustomerRuntimeException() {
+    }
+
+    public CustomerRuntimeException(Exception exception) {
+        super(exception);
+    }
+
+    public CustomerRuntimeException(HttpStatus status, int code, String message) {
+        this.code = code;
+        this.status = status;
+        this.message=message;
+    }
+    
+
+    public HttpStatus getStatus() {
+        return status;
+    }
+
+    public void setStatus(HttpStatus status) {
+        this.status = status;
+    }
+
+    public int getCode() {
+        return code;
+    }
+
+    public void setCode(int code) {
+        this.code = code;
+    }
+
+    public String getMessage() {
+        return message;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/exception/CustomerExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/exception/CustomerExceptionHandler.java b/src/main/java/com/syzegee/customer/events/exception/CustomerExceptionHandler.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/exception/CustomerExceptionHandler.java	(date 1613491889000)
@@ -0,0 +1,70 @@
+ /*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.exception;
+
+ import com.syzegee.customer.events.response.GenericResponse;
+ import org.springframework.http.HttpHeaders;
+ import org.springframework.http.HttpStatus;
+ import org.springframework.http.ResponseEntity;
+ import org.springframework.http.converter.HttpMessageNotReadableException;
+ import org.springframework.web.bind.annotation.ControllerAdvice;
+ import org.springframework.web.bind.annotation.ExceptionHandler;
+ import org.springframework.web.bind.annotation.RestController;
+ import org.springframework.web.context.request.WebRequest;
+ import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;
+
+
+ /**
+  * @author Sagar
+  */
+@ControllerAdvice 
+@RestController 
+public class CustomerExceptionHandler extends ResponseEntityExceptionHandler {
+
+    @Override
+    protected ResponseEntity<Object> handleHttpMessageNotReadable(HttpMessageNotReadableException ex,
+            HttpHeaders headers, HttpStatus status, WebRequest request) {
+        String error = "Malformed JSON request";
+        return buildResponseEntity(new ErrorMessage(status, status.value(), "Provide valid JSON input"));
+    }
+
+    private ResponseEntity<Object> buildResponseEntity(ErrorMessage errorMessage) {
+        return new ResponseEntity<>(errorMessage, errorMessage.getStatus());
+    }
+
+    @ExceptionHandler(Exception.class)
+    public final ResponseEntity<ErrorMessage> handleAllExceptions(Exception ex, WebRequest request) {
+        ErrorMessage errorMessage = new ErrorMessage(HttpStatus.BAD_REQUEST, HttpStatus.BAD_REQUEST.value(), "Bad Request Error Occured..!");
+        return new ResponseEntity<>(errorMessage, HttpStatus.BAD_REQUEST);
+    }
+
+    @ExceptionHandler(CustomerServiceException.class)
+    public final ResponseEntity<ErrorMessage> handleUserNotFoundException(CustomerServiceException exception,
+                                                                          WebRequest request) {
+       ErrorMessage errorMessage
+                = new ErrorMessage(exception.getHttpStatus(), exception.getCode(),
+                        exception.getMessage());
+        return new ResponseEntity<>(errorMessage, errorMessage.getStatus());
+    }
+    @ExceptionHandler(CustomerRuntimeException.class)
+    public final ResponseEntity<ErrorMessage> handleSyzegeeException(CustomerRuntimeException exception,
+                                                                     WebRequest request) {
+        ErrorMessage errorMessage
+                = new ErrorMessage(exception.getStatus(), exception.getCode(),
+                exception.getMessage());
+        return new ResponseEntity<>(errorMessage, errorMessage.getStatus());
+    }
+    
+    @ExceptionHandler(GenericException.class)
+    public final GenericResponse handleSyzegeeException(GenericException exception,
+                                                                     WebRequest request) {
+    	GenericResponse errorMessage
+                = new GenericResponse(false,exception.getStatus(),exception.getMessage(),exception.getDescription(), exception.getData()
+                );
+        return errorMessage;
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/repository/PackageRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/PackageRepository.java b/src/main/java/com/syzegee/customer/events/repository/PackageRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/PackageRepository.java	(date 1613491889000)
@@ -0,0 +1,22 @@
+package com.syzegee.customer.events.repository;
+
+import com.syzegee.customer.events.entity.Packages;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+/**
+ * @author Sagar
+ */
+@Repository
+public interface PackageRepository extends JpaRepository<Packages,Long> {
+    /**
+     * Custom query for getRecordById only getting object where isActive=true
+     *
+     * @param packageId
+     * @return Rule
+     */
+    @Query("from Packages where packageId=:packageId")
+    Packages getRecordById(@Param("packageId") Long packageId);
+}
Index: src/main/java/com/syzegee/customer/events/controller/CustomerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/controller/CustomerController.java b/src/main/java/com/syzegee/customer/events/controller/CustomerController.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/controller/CustomerController.java	(date 1613491889000)
@@ -0,0 +1,218 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.controller;
+
+import com.syzegee.customer.events.constants.Constants;
+import com.syzegee.customer.events.model.*;
+import com.syzegee.customer.events.entity.Customer;
+import com.syzegee.customer.events.exception.CustomerServiceException;
+import com.syzegee.customer.events.response.GenericResponse;
+import com.syzegee.customer.events.service.ActivationService;
+import com.syzegee.customer.events.service.CustomerService;
+import com.syzegee.customer.events.util.CorrelationIdUtil;
+import com.syzegee.customer.events.validator.CustomerValidator;
+import io.swagger.annotations.ApiImplicitParam;
+import io.swagger.annotations.ApiImplicitParams;
+import io.swagger.annotations.ApiOperation;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+import java.io.IOException;
+import java.util.Date;
+
+/**
+ * @author Sagar
+ */
+@Slf4j
+@RestController
+@RequestMapping("/v1/customer")
+public class CustomerController extends CustomerBaseResponse {
+
+	@Autowired
+	CustomerService customerService;
+
+	@Autowired
+	ActivationService activationService;
+
+	@Autowired
+	CustomerValidator validator;
+
+	@Autowired
+	CustomerBaseResponse customerBaseResponse;
+
+	@ApiOperation(value = "Api for Web Enabled")
+	@PostMapping(path = "/webenabled")
+	@ApiImplicitParams({
+			@ApiImplicitParam(name = HttpHeaders.AUTHORIZATION, value = "Authorization", required = true, paramType = "header", dataTypeClass = String.class),
+			@ApiImplicitParam(name = Constants.X_CORRELATION_ID, value = "Correlation Id", required = true, paramType = "header", dataTypeClass = String.class)
+	})
+	public ResponseEntity<GenericResponse> activationPostRequest(@RequestHeader(value = HttpHeaders.AUTHORIZATION) String authorization,@RequestHeader(value = "correlationId",
+			required = false, defaultValue = "") String correlationId, @RequestBody CustomerActivationDetails customerActivationDetails)
+			throws CustomerServiceException, IOException {
+
+		String generatedCorrelationId = CorrelationIdUtil.generateCorrelationId();
+		log.info("Initiate activationPostRequest in controller : " + " - CorrelationId: " + generatedCorrelationId);
+		CustomerActivationResponse activationResponse = null;
+		GenericResponse response =null;
+		validator.validateActivationFields(customerActivationDetails);
+		activationResponse = activationService.createActivation(customerActivationDetails, generatedCorrelationId);
+		response = customerBaseResponse.buildResponse("Customer created ","Customer creation completed",
+				"Customer creation failed ","Customer creation failed",activationResponse);
+		ResponseEntity responseEntity = new ResponseEntity<>(response, HttpStatus.OK);
+		log.info("End of activationPostRequest in controller: " + " - CorrelationId: " + generatedCorrelationId);
+		return responseEntity;
+	}
+
+	@ApiOperation(value = "Api for Activation")
+	@PostMapping(path = "/activate")
+	@ApiImplicitParams({
+			@ApiImplicitParam(name = HttpHeaders.AUTHORIZATION, value = "Authorization", required = true, paramType = "header", dataTypeClass = String.class),
+			@ApiImplicitParam(name = Constants.X_CORRELATION_ID, value = "Correlation Id", required = true, paramType = "header", dataTypeClass = String.class)
+	})
+	public ResponseEntity<GenericResponse> validateActCodePostRequest(@RequestHeader(value = HttpHeaders.AUTHORIZATION) String authorization,@RequestHeader(value = "correlationId",
+			required = false, defaultValue = "") String correlationId, @RequestBody ActivationValidateDetails activationValidateDetails)
+			throws CustomerServiceException {
+		String generatedCorrelationId = CorrelationIdUtil.generateCorrelationId();
+		log.info("Initiate validateActCodePostRequest in controller : " + " - CorrelationId: " + generatedCorrelationId);
+		validator.validateActivationCodeFields(activationValidateDetails);
+		ActivationValidateResponse validateResponse;
+		validateResponse = activationService.createValidateActivation(activationValidateDetails, generatedCorrelationId);
+		GenericResponse response =null;
+		ActivateResponse activateResponse = null;
+		log.info("Initiate validateActCodePostRequest in controller Praveentest :" +validateResponse);
+		log.info("Initiate validateActCodePostRequest in controller Praveen :" +validateResponse.equals(true));
+
+		if(validateResponse.getStatus().equals(true)) {
+			activateResponse = ActivateResponse.builder().customerId(validateResponse.getCustomerId()).build();
+		}
+		response = customerBaseResponse.buildResponse("Code activation completed ","Customer code activation completed",
+				"Code activation failed ","Customer code activation failed",activateResponse);
+
+		ResponseEntity responseEntity = new ResponseEntity<>(response, HttpStatus.OK);
+		log.info("End of validateActCodePostRequest in controller: " + " - CorrelationId: " + generatedCorrelationId);
+		return responseEntity;
+	}
+
+	@ApiOperation(value = "Api for fetching details based on CustomerId")
+	@PutMapping("/{Id}")
+	@ApiImplicitParams({
+			@ApiImplicitParam(name = HttpHeaders.AUTHORIZATION, value = "Authorization", required = true, paramType = "header", dataTypeClass = String.class),
+			@ApiImplicitParam(name = Constants.X_CORRELATION_ID, value = "Correlation Id", required = true, paramType = "header", dataTypeClass = String.class)
+	})
+	public ResponseEntity<GenericResponse> customerCreateRequest(@RequestHeader(value = HttpHeaders.AUTHORIZATION) String authorization,
+																 @RequestHeader(value = "correlationId",required = false, defaultValue = "") String correlationId, @PathVariable long Id,
+																 @RequestBody CustomerCreateDetail customerCreateDetail) throws CustomerServiceException, IOException {
+
+		log.info("Request Input="+customerCreateDetail.toString());
+		String generatedCorrelationId = CorrelationIdUtil.generateCorrelationId();
+		log.info("Initiate customerCreateRequest in controller : " + " - CorrelationId: " + generatedCorrelationId);
+		com.syzegee.customer.events.model.CustomerResponse customerCreateResponse = null;
+		validator.validateRequiredFields(customerCreateDetail);
+		customerCreateResponse = customerService.customerCreateEvent(customerCreateDetail, generatedCorrelationId,Id);
+		GenericResponse response = customerBaseResponse.buildResponse("Customer create request has been sent successfully ","Customer create request has been received and you will be receiving an Email",
+				"Code activation failed ","Customer code activation failed",customerCreateResponse);
+
+		ResponseEntity responseEntity = new ResponseEntity<>(response, HttpStatus.OK);
+		log.info("End of customerCreateRequest in controller: " + " - CorrelationId: " + generatedCorrelationId);
+		return responseEntity;
+	}
+
+	@ApiOperation(value = "Api for Updating details for Customer using CustomerId")
+	@PutMapping("update/{id}") // Analysis
+	@ApiImplicitParams({
+			@ApiImplicitParam(name = HttpHeaders.AUTHORIZATION, value = "Authorization", required = true, paramType = "header", dataTypeClass = String.class),
+			@ApiImplicitParam(name = Constants.ID, value = "Id", required = true, paramType = "pathVariable", dataTypeClass = String.class),
+			@ApiImplicitParam(name = Constants.X_CORRELATION_ID, value = "Correlation Id", required = true, paramType = "header", dataTypeClass = String.class)
+	})
+	public ResponseEntity<com.syzegee.customer.events.model.CustomerResponse> updateCustomerRequest(@RequestHeader(value = HttpHeaders.AUTHORIZATION) String authorization,@RequestHeader(value = "correlationId",
+			required = false, defaultValue = "") String correlationId, @RequestBody CustomerUpdateDetail customerUpdateDetail
+			, @PathVariable long id) throws CustomerServiceException {
+		String validCorrelationId = CorrelationIdUtil.generateCorrelationId(correlationId);
+		log.info("Initiate customerPutRequestin controller : " + " - CorrelationId: " + validCorrelationId);
+		com.syzegee.customer.events.model.CustomerResponse customerupdateResponse = null;
+		customerupdateResponse = customerService.updateCustomerEvent(customerUpdateDetail, id, validCorrelationId);
+		ResponseEntity responseEntity = new ResponseEntity<>(customerupdateResponse, HttpStatus.OK);
+		log.info("End of customerPutRequest in controller: " + " - CorrelationId: " + validCorrelationId);
+		return responseEntity;
+	}
+
+	@ApiOperation(value = "Update UserDetails")
+	@PutMapping("update/userId")
+	public ResponseEntity<GenericResponse> customerUpdate(@RequestBody CreateUpdateCustomerRequest customerUpdateRequest) throws CustomerServiceException {
+		System.out.println("update customer -by praveen customerId" +customerUpdateRequest.getCustomerId());
+		System.out.println("update customer -by praveen UserId" +customerUpdateRequest.getUserId());
+		Customer customerResponse= customerService.updateCustomer(customerUpdateRequest);
+		GenericResponse response = customerBaseResponse.buildResponse("Customer userId updated","Customer userId updated succesfully",
+				"Customer userId update failed ","Customer userId update failed",null);
+
+		ResponseEntity responseEntity = new ResponseEntity<>(response, HttpStatus.OK);
+		log.info("End of customerUpdate in controller: " );
+		return responseEntity;
+	}
+
+	@ApiOperation(value = "Updating status for customer based on CustomerId")
+	@PatchMapping("/{Id}/status")
+	@ApiImplicitParams({
+			@ApiImplicitParam(name = HttpHeaders.AUTHORIZATION, value = "Authorization", required = true, paramType = "header", dataTypeClass = String.class),
+			@ApiImplicitParam(name = Constants.ID, value = "Id", required = true, paramType = "pathVariable", dataTypeClass = String.class),
+			@ApiImplicitParam(name = Constants.X_CORRELATION_ID, value = "Correlation Id", required = true, paramType = "header", dataTypeClass = String.class)
+	})
+	public ResponseEntity<GenericResponse> updateMarketingAutomationStatus(@RequestHeader(value = HttpHeaders.AUTHORIZATION) String authorization,
+			@RequestHeader(value = "correlationId",required = false, defaultValue = "") String correlationId, @PathVariable long Id,
+			@RequestBody CustomerSiteUpdateRequest customerSiteUpdateRequest) throws CustomerServiceException,Exception {
+		System.out.println("update customer -by praveen UserId" +customerSiteUpdateRequest.getCustomerDetail().getUserId());
+		String validCorrelationId = CorrelationIdUtil.generateCorrelationId(correlationId);
+		CustomerDomainStatusUpdateEvent marketingAutomation = CustomerDomainStatusUpdateEvent.builder().correlationId("12333")
+				.customerEmail("selvaganpr@gmail.com")
+				.customerId(Id)
+				.customerFirstName("Selva")
+				.customerLastName("Sakthivel")
+				.customerUserName("Selva")
+				.customerOrganizationName("abc")
+				.siteName("www.testSite")
+				.createdBy("mautic")
+				.createdDate(new Date())
+				.domainName("www.rwsaw")
+				.siteType("Marketing Automation")
+				.templateCode("01001")
+				.build();
+		customerService.updateMarketingAutomationStatus(marketingAutomation);
+		GenericResponse response =null;
+		response =new GenericResponse(true,HttpStatus.OK.value(),"status ","Customer status is updated","");
+		ResponseEntity responseEntity = new ResponseEntity<>(response, HttpStatus.OK);
+		log.info("End of customerUpdate in controller: " );
+		return responseEntity;
+	}
+
+	@ApiOperation(value = "Updating customer details based on userId")
+	@PatchMapping("/{Id}")
+	@ApiImplicitParams({
+			@ApiImplicitParam(name = HttpHeaders.AUTHORIZATION, value = "Authorization", required = true, paramType = "header", dataTypeClass = String.class),
+			@ApiImplicitParam(name = Constants.ID, value = "Id", required = true, paramType = "pathVariable", dataTypeClass = String.class),
+			@ApiImplicitParam(name = Constants.X_CORRELATION_ID, value = "Correlation Id", required = true, paramType = "header", dataTypeClass = String.class)
+	})
+	public ResponseEntity<GenericResponse> updateCustomerSites(
+			@RequestHeader(value = "correlationId",required = false, defaultValue = "") String correlationId, @PathVariable long Id,
+			@RequestBody CustomerSiteUpdateRequest customerSiteUpdateRequest) throws CustomerServiceException,Exception {
+		System.out.println("update customer -by praveen UserId" +customerSiteUpdateRequest.getCustomerDetail().getUserId());
+		String validCorrelationId = CorrelationIdUtil.generateCorrelationId(correlationId);
+		com.syzegee.customer.events.model.CustomerResponse
+				customerResponse= customerService.updateCustomerSitesEvent(customerSiteUpdateRequest,correlationId,Id);
+
+		GenericResponse response = customerBaseResponse.buildResponse("Customer userId updated","Customer userId updated succesfully",
+				"Customer userId update failed ","Customer userId update failed",customerResponse);
+
+		ResponseEntity responseEntity = new ResponseEntity<>(response, HttpStatus.OK);
+		log.info("End of customerUpdate in controller: " );
+		return responseEntity;
+	}
+
+
+}
Index: src/main/java/com/syzegee/customer/events/controller/CustomerUserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/controller/CustomerUserController.java b/src/main/java/com/syzegee/customer/events/controller/CustomerUserController.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/controller/CustomerUserController.java	(date 1613491889000)
@@ -0,0 +1,54 @@
+package com.syzegee.customer.events.controller;
+
+import com.syzegee.customer.events.constants.Constants;
+import com.syzegee.customer.events.entity.CustomerRole;
+import com.syzegee.customer.events.exception.CustomerServiceException;
+import com.syzegee.customer.events.model.CustomerUserRequest;
+import com.syzegee.customer.events.model.CustomerUserResponse;
+import com.syzegee.customer.events.response.GenericResponse;
+import com.syzegee.customer.events.service.CustomerService;
+import com.syzegee.customer.events.util.CorrelationIdUtil;
+import io.swagger.annotations.ApiImplicitParam;
+import io.swagger.annotations.ApiImplicitParams;
+import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.http.HttpHeaders;
+import org.springframework.http.HttpStatus;
+import org.springframework.http.ResponseEntity;
+import org.springframework.web.bind.annotation.*;
+
+
+@Slf4j
+@RestController
+@RequestMapping("/v1/customer")
+public class CustomerUserController {
+
+    @Autowired
+    CustomerService customerService;
+
+    @Autowired
+    CustomerBaseResponse customerBaseResponse;
+
+    @PostMapping("/{Id}/users")
+    @ApiImplicitParams({
+            @ApiImplicitParam(name = HttpHeaders.AUTHORIZATION, value = "Authorization", required = true, paramType = "header", dataTypeClass = String.class),
+            @ApiImplicitParam(name = Constants.X_CORRELATION_ID, value = "Correlation Id", required = true, paramType = "header", dataTypeClass = String.class)
+    })
+    public ResponseEntity<GenericResponse> customerUserRoleCreate(@RequestHeader(value = "correlationId", required = false, defaultValue = "") String correlationId,
+                                                                  @PathVariable long Id,
+                                                                   @RequestBody CustomerUserRequest customerUserRequest) throws CustomerServiceException {
+
+        log.info("Request Input=" + customerUserRequest.toString());
+        System.out.println("Request Input=" + customerUserRequest.toString());
+        String generatedCorrelationId = CorrelationIdUtil.generateCorrelationId();
+        log.info("Initiate customerUserRequest in controller : " + " - CorrelationId: " + generatedCorrelationId);
+        CustomerUserResponse customerUserResponse = customerService.addCustomerUser(customerUserRequest,generatedCorrelationId, Id);
+        GenericResponse response = customerBaseResponse.buildResponse("CustomerUser create request has been sent successfully ",
+                "CustomerUser has been created successfully with given roles",
+                "CustomerUser creation failed","CustomerUser creation failed",customerUserResponse);
+
+        ResponseEntity responseEntity = new ResponseEntity<>(response, HttpStatus.OK);
+        return responseEntity;
+
+    }
+}
Index: src/main/java/com/syzegee/customer/events/controller/CustomerBaseResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/controller/CustomerBaseResponse.java b/src/main/java/com/syzegee/customer/events/controller/CustomerBaseResponse.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/controller/CustomerBaseResponse.java	(date 1613491889000)
@@ -0,0 +1,24 @@
+package com.syzegee.customer.events.controller;
+
+import com.syzegee.customer.events.response.GenericResponse;
+import org.springframework.http.HttpStatus;
+import org.springframework.stereotype.Component;
+
+import java.util.Objects;
+
+@Component
+public class CustomerBaseResponse {
+    //TODO Construct as a functional interface, Use one of the predicate method to pass the arguments
+    public GenericResponse buildResponse(String successMessage, String successDescription,String failureMessage,
+                                         String failureDescription,Object response) {
+        GenericResponse httpResponse;
+        if (Objects.nonNull(response)) {
+             httpResponse = new GenericResponse(true, HttpStatus.OK.value(), successMessage, successDescription, response);
+
+        }else{
+            httpResponse = new GenericResponse(false, HttpStatus.INTERNAL_SERVER_ERROR.value(), failureMessage, failureDescription, null);
+        }
+        return httpResponse;
+    }
+
+}
Index: src/main/java/com/syzegee/customer/events/repository/CustomerRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/CustomerRepository.java b/src/main/java/com/syzegee/customer/events/repository/CustomerRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/CustomerRepository.java	(date 1613491889000)
@@ -0,0 +1,37 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.repository;
+
+import com.syzegee.customer.events.entity.Customer;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Modifying;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+import org.springframework.transaction.annotation.Transactional;
+
+
+@Repository
+public interface CustomerRepository extends JpaRepository<Customer, Long> {
+    /**
+     * Custom query for getRecordById only getting object where isActive=true
+     *
+     * @param customerId
+     * @return Rule
+     */
+    @Query("from Customer where customerId=:customerId")
+    Customer getRecordById(@Param("customerId") Long customerId);
+
+    @Query("from Customer where isActive=true and customerId=:customerId")
+    Customer getActiveCustomerById(@Param("customerId") Long customerId);
+
+    @Transactional
+    @Modifying
+    @Query(value = "UPDATE customer u set user_id =:userId where u.customer_id = :customerId",
+            nativeQuery = true)
+    void updateUserIdForCustomer(@Param("userId") Long userId,@Param("customerId") Long customerId);
+
+}
Index: src/main/java/com/syzegee/customer/events/repository/SolicitationPackageRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/SolicitationPackageRepository.java b/src/main/java/com/syzegee/customer/events/repository/SolicitationPackageRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/SolicitationPackageRepository.java	(date 1613491889000)
@@ -0,0 +1,24 @@
+package com.syzegee.customer.events.repository;
+
+import com.syzegee.customer.events.entity.SolicitationPackage;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+import java.util.Date;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * @author Riya Patel
+ */
+@Repository
+public interface SolicitationPackageRepository extends JpaRepository<SolicitationPackage,Long> {
+    @Query("from SolicitationPackage where solicitationId=:solicitationId")
+    SolicitationPackage getRecordBySoliciationId(@Param("solicitationId") int solicitationId);
+    @Query("select distinct solicitationId as solicitationId, solicitationName as solicitationName from SolicitationPackage where customer.customerId=:customerId and isActive=true and :currentDate BETWEEN startFrom AND endDate")
+    List<Map<String, Object>> getRecordByCustomerIdAndDate(@Param("customerId") long customerId, @Param("currentDate") Date currentDate);
+
+
+}
Index: src/main/java/com/syzegee/customer/events/repository/CustomerRoleRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/CustomerRoleRepository.java b/src/main/java/com/syzegee/customer/events/repository/CustomerRoleRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/CustomerRoleRepository.java	(date 1613491889000)
@@ -0,0 +1,15 @@
+package com.syzegee.customer.events.repository;
+
+import com.syzegee.customer.events.entity.CustomerRole;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface CustomerRoleRepository extends JpaRepository<CustomerRole, Long> {
+
+    @Query("from CustomerRole where customerId=:customerId")
+    CustomerRole getRecordById(@Param("customerId") Long customerId);
+
+}
Index: src/main/java/com/syzegee/customer/events/repository/BenefitRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/BenefitRepository.java b/src/main/java/com/syzegee/customer/events/repository/BenefitRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/BenefitRepository.java	(date 1613491889000)
@@ -0,0 +1,23 @@
+package com.syzegee.customer.events.repository;
+
+import com.syzegee.customer.events.entity.CustomerBenefit;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+/**
+ * @author Sagar
+ */
+@Repository
+public interface BenefitRepository extends JpaRepository<CustomerBenefit,Long> {
+    /**
+     * Custom query for getRecordById only getting object where isActive=true
+     *
+     * @param customerBenefitId
+     * @description get the benefit object
+     * @return Rule
+     */
+    @Query("from CustomerBenefit where isActive = true and customerBenefitId=:customerBenefitId")
+    CustomerBenefit getRecordById(@Param("customerBenefitId") Long customerBenefitId);
+}
Index: src/main/java/com/syzegee/customer/events/repository/CustomerAddressRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/CustomerAddressRepository.java b/src/main/java/com/syzegee/customer/events/repository/CustomerAddressRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/CustomerAddressRepository.java	(date 1613491889000)
@@ -0,0 +1,34 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.repository;
+
+import com.syzegee.customer.events.entity.Customer;
+import com.syzegee.customer.events.entity.CustomerAddress;
+import com.syzegee.customer.events.entity.CustomerUser;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+
+/**
+ * @author Sagar
+ */
+@Repository
+public interface CustomerAddressRepository extends JpaRepository<CustomerAddress, Long> {
+    /**
+     * Custom query for getRecordById only getting object where isActive=true
+     *
+     * @param customerAddressId
+     * @return Rule
+     */
+    @Query("from CustomerAddress where customerAddressId=:customerAddressId")
+    CustomerAddress getRecordById(@Param("customerAddressId") Long customerAddressId);
+
+    @Query("from CustomerAddress where customerId=:customerId")
+    CustomerAddress getRecordByCustomerId(@Param("customerId") Customer customerId);
+
+}
Index: src/main/java/com/syzegee/customer/events/repository/OrganizationRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/OrganizationRepository.java b/src/main/java/com/syzegee/customer/events/repository/OrganizationRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/OrganizationRepository.java	(date 1613491889000)
@@ -0,0 +1,37 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.repository;
+
+import com.syzegee.customer.events.entity.Organization;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+
+/**
+ * @author Sagar
+ */
+@Repository
+public interface OrganizationRepository extends JpaRepository<Organization, Long> {
+    /**
+     * Custom query for getRecordById only getting object where isActive=true
+     *
+     * @param organizationId
+     * @return Organization
+     */
+    @Query("from Organization where isActive = true and organizationId=:organizationId")
+    Organization getRecordById(@Param("organizationId") Long organizationId);
+
+    /**
+     * Custom query for getRecordById only getting object where isActive=true
+     *
+     * @param organizationName
+     * @return Organization
+     */
+    @Query("from Organization where isActive = true and organizationName=:organizationName")
+    Organization getRecordByName(@Param("organizationName") String organizationName);
+ }
Index: src/main/java/com/syzegee/customer/events/repository/TierRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/TierRepository.java b/src/main/java/com/syzegee/customer/events/repository/TierRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/TierRepository.java	(date 1613491889000)
@@ -0,0 +1,22 @@
+package com.syzegee.customer.events.repository;
+
+import com.syzegee.customer.events.entity.Tier;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+/**
+ * @author Sagar
+ */
+@Repository
+public interface TierRepository extends JpaRepository<Tier,Long> {
+    /**
+     * Custom query for getRecordById only getting object where isActive=true
+     *
+     * @param tierId
+     * @return Rule
+     */
+    @Query("from Tier where tierId=:tierId")
+    Tier getRecordById(@Param("tierId") Long tierId);
+}
Index: src/main/java/com/syzegee/customer/events/repository/CustomerStatusRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/CustomerStatusRepository.java b/src/main/java/com/syzegee/customer/events/repository/CustomerStatusRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/CustomerStatusRepository.java	(date 1613491889000)
@@ -0,0 +1,22 @@
+package com.syzegee.customer.events.repository;
+
+import com.syzegee.customer.events.entity.CustomerStatus;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import com.syzegee.customer.events.entity.Customer;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface CustomerStatusRepository extends JpaRepository<CustomerStatus, Long> {
+    /**
+     * Custom query for getRecordById only getting object where isActive=true
+     *
+     * @param customerId
+     * @return Rule
+     */
+    @Query("from CustomerStatus where customerId=:customerId")
+    Customer getStatusById(@Param("customerId") Long customerId);
+
+}
+
Index: src/main/java/com/syzegee/customer/events/repository/CustomerInboxRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/CustomerInboxRepository.java b/src/main/java/com/syzegee/customer/events/repository/CustomerInboxRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/CustomerInboxRepository.java	(date 1613491889000)
@@ -0,0 +1,19 @@
+package com.syzegee.customer.events.repository;
+
+import com.syzegee.customer.events.entity.CustomerInbox;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+
+public interface  CustomerInboxRepository extends JpaRepository<CustomerInbox, Long> {
+
+    /**
+     * CustomerInbox query for getCustomerRequest only getting object where isActive=true
+     *
+     * @param customerRequestId
+     * @return CustomerInbox
+     */
+    @Query("from CustomerInbox where customerRequestId=:customerRequestId")
+    CustomerInbox getCustomerRequest(@Param("customerRequestId") String customerRequestId);
+
+}
Index: src/main/java/com/syzegee/customer/events/repository/DomainRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/DomainRepository.java b/src/main/java/com/syzegee/customer/events/repository/DomainRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/DomainRepository.java	(date 1613491889000)
@@ -0,0 +1,23 @@
+package com.syzegee.customer.events.repository;
+
+
+import com.syzegee.customer.events.entity.DomainDetails;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+/**
+ * @author Sagar
+ */
+@Repository
+public interface DomainRepository extends JpaRepository<DomainDetails,Long> {
+
+//    @Query("select a from DomainDetails d" +" JOIN FETCH d.customerId c where d.siteCode=:siteCode and c.customerId=:customerId and d.siteName=:siteName")
+    @Query(value = "from DomainDetails where siteCode =:siteCode and customerId.customerId =:customerId")
+    List<DomainDetails> findBySiteCodeAndCustomerId(String siteCode, Long customerId);
+
+
+}
Index: src/main/java/com/syzegee/customer/events/repository/PackageBenefitsRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/PackageBenefitsRepository.java b/src/main/java/com/syzegee/customer/events/repository/PackageBenefitsRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/PackageBenefitsRepository.java	(date 1613491889000)
@@ -0,0 +1,22 @@
+package com.syzegee.customer.events.repository;
+
+import com.syzegee.customer.events.entity.PackagesBenefit;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+/**
+ * @author Sagar
+ */
+@Repository
+public interface PackageBenefitsRepository extends JpaRepository<PackagesBenefit,Long> {
+    /**
+     * Custom query for getRecordById only getting object where isActive=true
+     *
+     * @param packageBenefitId
+     * @return Rule
+     */
+    @Query("from PackagesBenefit where  packageBenefitId=:packageBenefitId")
+    PackagesBenefit getRecordById(@Param("packageBenefitId") Long packageBenefitId);
+}
Index: src/main/java/com/syzegee/customer/events/repository/CustomerUserRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/repository/CustomerUserRepository.java b/src/main/java/com/syzegee/customer/events/repository/CustomerUserRepository.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/repository/CustomerUserRepository.java	(date 1613491889000)
@@ -0,0 +1,21 @@
+package com.syzegee.customer.events.repository;
+
+
+import com.syzegee.customer.events.entity.CustomerUser;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+/**
+ * @author Sagar
+ */
+@Repository
+public interface CustomerUserRepository  extends JpaRepository<CustomerUser,Long> {
+
+    @Query("from CustomerUser where isActive=true and emailId=:emailId")
+    CustomerUser getCustomerUserByEmailId(@Param("emailId") String emailId);
+
+    @Query("from CustomerUser where customer_user_id=:customerUserId")
+    CustomerUser getCustomerUserById(@Param("customerUserId") Long customerUserId);
+}
Index: src/main/java/com/syzegee/customer/events/configuration/CorsConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/configuration/CorsConfiguration.java b/src/main/java/com/syzegee/customer/events/configuration/CorsConfiguration.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/configuration/CorsConfiguration.java	(date 1613491889000)
@@ -0,0 +1,20 @@
+package com.syzegee.customer.events.configuration;
+
+import org.springframework.context.annotation.Configuration;
+import org.springframework.web.servlet.config.annotation.CorsRegistry;
+import org.springframework.web.servlet.config.annotation.EnableWebMvc;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
+
+/**
+ * @author Riya Patel
+ */
+@Configuration
+@EnableWebMvc
+public class CorsConfiguration implements WebMvcConfigurer {
+
+    @Override
+    public void addCorsMappings(CorsRegistry registry) {
+        registry.addMapping("/**").allowedOrigins("*").allowedMethods("*").allowedHeaders("*").allowCredentials(false);
+    }
+}
+
Index: src/main/java/com/syzegee/customer/events/configuration/CustomerConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/configuration/CustomerConfig.java b/src/main/java/com/syzegee/customer/events/configuration/CustomerConfig.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/configuration/CustomerConfig.java	(date 1613491889000)
@@ -0,0 +1,16 @@
+package com.syzegee.customer.events.configuration;
+
+import io.swagger.v3.oas.models.Components;
+import io.swagger.v3.oas.models.OpenAPI;
+import io.swagger.v3.oas.models.security.SecurityScheme;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+public class CustomerConfig {
+  @Bean
+  public OpenAPI customOpenAPI() {
+    return new OpenAPI().components(new Components().addSecuritySchemes("bearerAuth",
+            new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme("bearer").bearerFormat("JWT")));
+  }
+}
Index: src/main/java/com/syzegee/customer/events/configuration/SecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/configuration/SecurityConfig.java b/src/main/java/com/syzegee/customer/events/configuration/SecurityConfig.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/configuration/SecurityConfig.java	(date 1613491889000)
@@ -0,0 +1,60 @@
+package com.syzegee.customer.events.configuration;
+import org.keycloak.adapters.springsecurity.KeycloakConfiguration;
+import org.keycloak.adapters.springsecurity.authentication.KeycloakAuthenticationProvider;
+import org.keycloak.adapters.springsecurity.config.KeycloakWebSecurityConfigurerAdapter;
+import org.keycloak.adapters.springsecurity.management.HttpSessionManager;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.context.annotation.Bean;
+import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.core.authority.mapping.SimpleAuthorityMapper;
+import org.springframework.security.core.session.SessionRegistryImpl;
+import org.springframework.security.web.authentication.AuthenticationFailureHandler;
+import org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy;
+import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;
+
+/**
+ * @author Riya Patel
+ */
+@KeycloakConfiguration
+public class SecurityConfig extends KeycloakWebSecurityConfigurerAdapter {
+
+    @Autowired
+    public void configureGlobal(AuthenticationManagerBuilder auth) {
+        SimpleAuthorityMapper grantedAuthorityMapper = new SimpleAuthorityMapper();
+        grantedAuthorityMapper.setPrefix("ROLE_");
+
+        KeycloakAuthenticationProvider keycloakAuthenticationProvider = keycloakAuthenticationProvider();
+        keycloakAuthenticationProvider.setGrantedAuthoritiesMapper(grantedAuthorityMapper);
+        auth.authenticationProvider(keycloakAuthenticationProvider);
+    }
+
+    @Bean
+    @Override
+    protected SessionAuthenticationStrategy sessionAuthenticationStrategy() {
+        return new RegisterSessionAuthenticationStrategy(new SessionRegistryImpl());
+    }
+
+    @Bean
+    @Override
+    @ConditionalOnMissingBean(HttpSessionManager.class)
+    protected HttpSessionManager httpSessionManager() {
+        return new HttpSessionManager();
+    }
+
+    @Override
+    protected void configure(HttpSecurity http) throws Exception {
+        super.configure(http);
+        http.csrf().disable()
+                .authorizeRequests()
+                .anyRequest().permitAll();
+    }
+
+    @Bean
+    public AuthenticationFailureHandler authenticationFailureHandler() {
+        return new RestAuthenticationEntryPoint();
+    }
+
+
+}
Index: src/main/java/com/syzegee/customer/events/configuration/KeyCloakConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/configuration/KeyCloakConfig.java b/src/main/java/com/syzegee/customer/events/configuration/KeyCloakConfig.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/configuration/KeyCloakConfig.java	(date 1613491889000)
@@ -0,0 +1,20 @@
+package com.syzegee.customer.events.configuration;
+
+
+import org.keycloak.adapters.springboot.KeycloakSpringBootConfigResolver;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+/**
+ * @author Riya Patel
+ */
+
+
+@Configuration
+public class KeyCloakConfig {
+
+    @Bean
+    public KeycloakSpringBootConfigResolver keycloakConfigResolver() {
+        return new KeycloakSpringBootConfigResolver();
+    }
+}
Index: src/main/resources/db_schema.sql
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/db_schema.sql b/src/main/resources/db_schema.sql
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/resources/db_schema.sql	(date 1613491889000)
@@ -0,0 +1,260 @@
+-- #Steps to create the database
+-- DROP DATABASE if exists ;
+-- DROP USER if exists piishield;
+-- CREATE USER syzegee  PASSWORD 'syzegee123!@#';
+
+-- CREATE DATABASE customer_events ENCODING = 'UTF8';
+
+-- GRANT ALL PRIVILEGES ON DATABASE customer_events TO syzegee;
+
+-- GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO syzegee;
+
+-- GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO syzegee;
+
+-- //KILLING THE PROCCESS WHEN THE PG-ADMINE SERVER IS HANGED
+
+-- SELECT 
+--     pg_terminate_backend(pid)
+-- FROM
+--     pg_stat_activity 
+-- WHERE 
+--     -- don't kill my own connection!
+--     pid <> pg_backend_pid()
+--     -- don't kill the connections to other databases
+--     AND datname = 'customer_events'
+--     ; 
+--     -- don't kill my own 
+
+-- //alter table users alter column email drop not null;
+-- //Steps to restore the database from dev to stage.
+-- 1)take the back of dev db by clicking  backup in tables and stoere in the local location
+-- 2)delete the exisiting stage db and restore it by taking the file which is stored in the local location
+
+      
+-- // Alter table benefit_subscription alter COLUMN created_date type timestamp 
+-- //ALTER TABLE table_name ADD COLUMN new_column_name data_type;
+
+-- -- Adding column to table
+-- ALTER TABLE customer_events ADD COLUMN VISIBILITY_SCOPE_ID BIGSERIAL;
+-- -- Modify column data type
+-- ALTER TABLE customer_inbox ALTER COLUMN DETAILS TYPE  VARCHAR(10485760);
+
+-- # Tables
+-- ALTER TABLE ORGANIZATION
+-- ADD COLUMN STATE VARCHAR(120) NULL;
+
+-- CREATE TABLE ORGANIZATION (
+--   ORGANIZATION_ID BIGSERIAL NOT NULL,
+--   ORGANIZATION_NAME VARCHAR(120) NULL,
+--   ORGANIZATION_DESC VARCHAR(120) NULL,
+--   ORGANIZATION_SIZE VARCHAR(120) NULL,
+--   IS_ACTIVE boolean,
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   STATE VARCHAR(120) NULL,
+--   CREATED_BY VARCHAR(120) NULL,
+--   CREATED_DATE TIMESTAMP DEFAULT NULL,
+--   UPDATED_BY VARCHAR(120) NULL,
+--   UPDATED_DATE TIMESTAMP DEFAULT NULL,
+--   PRIMARY KEY (ORGANIZATION_ID)
+-- );
+
+
+-- CREATE TABLE CUSTOMER (
+--   CUSTOMER_ID BIGSERIAL NOT NULL,
+--   ORGANIZATION_ID BIGSERIAL NOT NULL,
+--   USER_ID VARCHAR(120) NULL,
+--   STATE VARCHAR(120) NULL,
+--   BUSINESS_NAME VARCHAR(1024) NULL,
+--   BUSINESS_EMAIL VARCHAR(120) NULL,
+--   BUSINESS_TYPE VARCHAR(120) NULL,
+--   BUSINESS_CATEGORY VARCHAR(120) NULL,
+--   REGION VARCHAR(120) NULL,
+--   PHONE VARCHAR(120) NULL,
+--   CURRENCY VARCHAR(120) NULL,
+--   IS_ACTIVE boolean,
+--   ACTIVATION_STATUS boolean,
+--   ACTIVATION_CODE VARCHAR(120) NOT NULL,
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   CREATED_BY VARCHAR(120) NULL,
+--   CREATED_DATE TIMESTAMP DEFAULT NULL,
+--   UPDATED_BY VARCHAR(120) NULL,
+--   UPDATED_DATE TIMESTAMP DEFAULT NULL,
+--   PRIMARY KEY (CUSTOMER_ID),
+--   CONSTRAINT  cust_org FOREIGN KEY(ORGANIZATION_ID) REFERENCES ORGANIZATION(ORGANIZATION_ID)
+--   ON DELETE CASCADE
+-- );
+
+-- CREATE TABLE CUSTOMER_INBOX (
+--   CUSTOMER_INBOX_ID BIGSERIAL NOT NULL,
+--   CUSTOMER_ID BIGSERIAL NOT NULL,
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   CUSTOMER_REQUEST_ID VARCHAR(120) NULL, 
+--   STATUS VARCHAR(120) NULL,             
+--   DETAILS TEXT NULL, 
+--   PRIMARY KEY (CUSTOMER_INBOX_ID)
+--   );
+
+-- CREATE TABLE TIER (
+--   TIER_ID BIGSERIAL NOT NULL,
+--   CUSTOMER_ID BIGSERIAL NOT NULL,
+--   TIER_NAME VARCHAR(120)  NULL,
+--   IS_ACTIVE boolean,
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   STATE VARCHAR(120) NULL,
+--   CREATED_BY VARCHAR(120) NULL,
+--   CREATED_DATE TIMESTAMP DEFAULT NULL,
+--   UPDATED_BY VARCHAR(120) NULL,
+--   UPDATED_DATE TIMESTAMP DEFAULT NULL,
+--   PRIMARY KEY (TIER_ID),
+--   CONSTRAINT  tier_cust FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
+--   ON DELETE CASCADE
+-- );
+
+-- CREATE TABLE PACKAGES (
+--   PACKAGE_ID BIGSERIAL NOT NULL,
+--   TIER_ID BIGSERIAL NOT NULL,
+--   CUSTOMER_ID BIGSERIAL NOT NULL,
+--   PACKAGE_NAME VARCHAR(120)  NULL,
+--   IS_ACTIVE boolean,
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   STATE VARCHAR(120) NULL,
+--   CREATED_BY VARCHAR(120) NULL,
+--   CREATED_DATE TIMESTAMP DEFAULT NULL,
+--   UPDATED_BY VARCHAR(120) NULL,
+--   UPDATED_DATE TIMESTAMP DEFAULT NULL,
+--   PRIMARY KEY (PACKAGE_ID),
+--   CONSTRAINT pack_tier FOREIGN KEY (TIER_ID) REFERENCES TIER(TIER_ID),
+--   CONSTRAINT pack_cust FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
+--   ON DELETE CASCADE
+-- );
+
+-- CREATE TABLE CUSTOMER_ADDRESS (
+--   CUSTOMER_ADDRESS_ID BIGSERIAL NOT NULL,
+--   CUSTOMER_ID BIGSERIAL NOT NULL,
+--   STATE VARCHAR(120) NULL,
+--   ADDRESS_LINE1 VARCHAR(120) NULL,
+--   ADDRESS_LINE2 VARCHAR(120) NULL,
+--   ADDRESS_LINE3 VARCHAR(120) NULL,
+--   CITY VARCHAR(120) NULL,
+--   SATE VARCHAR(120) NULL,
+--   ZIP_CODE VARCHAR(120) NULL,
+--   COUNTRY_CODE VARCHAR(120) NULL,
+--   IS_ACTIVE boolean,
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   CREATED_BY VARCHAR(120) NULL,
+--   CREATED_DATE TIMESTAMP DEFAULT NULL,
+--   UPDATED_BY VARCHAR(120) NULL,
+--   UPDATED_DATE TIMESTAMP DEFAULT NULL,
+--   PRIMARY KEY (CUSTOMER_ADDRESS_ID),
+--   CONSTRAINT add_cust FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
+--  ON DELETE CASCADE
+-- );
+
+-- CREATE TABLE CUSTOMER_BENEFIT (
+--   CUSTOMER_BENEFIT_ID BIGSERIAL NOT NULL,
+--   CUSTOMER_ID BIGSERIAL NOT NULL,
+--   VENDOR_ID BIGSERIAL NOT NULL,
+--   STATE VARCHAR(120) NULL,
+--   BENEFIT_NAME VARCHAR(120) NULL,
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   IS_ACTIVE boolean,
+--   CREATED_BY VARCHAR(120) NULL,
+--   CREATED_DATE TIMESTAMP DEFAULT NULL,
+--   UPDATED_BY VARCHAR(120) NULL,
+--   UPDATED_DATE TIMESTAMP DEFAULT NULL,
+--   PRIMARY KEY (CUSTOMER_BENEFIT_ID),
+--   CONSTRAINT custbenfit_cust FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
+--  ON DELETE CASCADE
+-- );
+
+-- CREATE TABLE PACKAGES_BENEFIT (
+--   PACKAGE_BENEFIT_ID BIGSERIAL NOT NULL,
+--   PACKAGE_ID BIGSERIAL NOT NULL,
+--   CUSTOMER_BENEFIT_ID BIGSERIAL NOT  NULL,
+--   IS_ACTIVE boolean,
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   STATE VARCHAR(120) NULL,
+--   CREATED_BY VARCHAR(120) NULL,
+--   CREATED_DATE TIMESTAMP DEFAULT NULL,
+--   UPDATED_BY VARCHAR(120) NULL,
+--   UPDATED_DATE TIMESTAMP DEFAULT NULL,
+--   PRIMARY KEY (PACKAGE_BENEFIT_ID),
+--   CONSTRAINT pckgbenf_packg FOREIGN KEY (PACKAGE_ID) REFERENCES PACKAGES(PACKAGE_ID),
+--   CONSTRAINT pckgbenf_custbene FOREIGN KEY (CUSTOMER_BENEFIT_ID) REFERENCES CUSTOMER_BENEFIT(CUSTOMER_BENEFIT_ID)
+--   ON DELETE CASCADE
+-- );
+
+-- CREATE TABLE DOMAIN_DETAILS (
+--   SITE_ID BIGSERIAL NOT NULL,
+--   CUSTOMER_ID BIGSERIAL NOT NULL,
+--   SITE_CODE VARCHAR(120) NOT NULL,
+--   TEMPLATE_CODE VARCHAR(120) NOT NULL,
+--   SITE_NAME VARCHAR(120) NULL,
+--   SITE_DESC VARCHAR(120) NULL,
+--   SITE_TYPE VARCHAR(120) NULL,
+--   DOMAIN_NAME VARCHAR(120) NULL,
+--   LOGO TEXT,
+--   TAGLINE VARCHAR(120) NULL,
+--   IS_ACTIVE boolean,
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   STATE VARCHAR(120) NULL,
+--   CREATED_BY VARCHAR(120) NULL,
+--   CREATED_DATE TIMESTAMP DEFAULT NULL,
+--   UPDATED_BY VARCHAR(120) NULL,
+--   UPDATED_DATE TIMESTAMP DEFAULT NULL,
+--   PRIMARY KEY (SITE_ID),
+--   CONSTRAINT site_cust FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
+--   ON DELETE CASCADE
+-- );
+
+-- CREATE TABLE CUSTOMER_USER (
+--   CUSTOMER_USER_ID BIGSERIAL NOT NULL,
+--   CUSTOMER_ID BIGSERIAL NOT NULL,
+--   EMAIL_ID  VARCHAR(120)  NULL,
+--   FIRST_NAME VARCHAR(120) NULL,
+--   LAST_NAME VARCHAR(120) NULL,
+--   IS_ACTIVE boolean, 
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   CREATED_BY VARCHAR(120) NULL,
+--   CREATED_DATE TIMESTAMP DEFAULT NULL,
+--   UPDATED_BY VARCHAR(120) NULL,
+--   UPDATED_DATE TIMESTAMP DEFAULT NULL,
+--   PRIMARY KEY (CUSTOMER_USER_ID),
+--   CONSTRAINT custusr_cust FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
+--   ON DELETE CASCADE
+-- );
+
+-- CREATE TABLE  LOCATION (
+--   LOCATION_ID BIGSERIAL NOT NULL,
+--   ACCOUNT_ID BIGSERIAL NOT NULL,
+--   CUSTOMER_BENEFIT_ID BIGSERIAL NOT  NULL,
+--   LOCATION_NAME VARCHAR(120) NULL,
+--   IS_ACTIVE boolean, 
+--   STATE VARCHAR(120) NULL,
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   CREATED_BY VARCHAR(120) NULL,
+--   CREATED_DATE TIMESTAMP DEFAULT NULL,
+--   UPDATED_BY VARCHAR(120) NULL,
+--   UPDATED_DATE TIMESTAMP DEFAULT NULL,
+--   PRIMARY KEY (PACKAGE_BENEFIT_ID),
+--   CONSTRAINT pckgbenf_custbene FOREIGN KEY (CUSTOMER_BENEFIT_ID) REFERENCES CUSTOMER_BENEFIT(CUSTOMER_BENEFIT_ID)
+--   ON DELETE CASCADE
+-- );
+
+
+-- CREATE TABLE CUSTOMER_ROLE (
+--   CUSTOMER_ROLE_ID BIGSERIAL NOT NULL,
+--   CUSTOMER_ID BIGSERIAL NOT NULL,
+--   CUSTOMER_ROLE_TYPE VARCHAR(120)  NULL,
+--   IS_ACTIVE boolean,
+--   CORRELATION_ID VARCHAR(120) NULL,
+--   CREATED_BY VARCHAR(120) NULL,
+--   CREATED_DATE TIMESTAMP DEFAULT NULL,
+--   UPDATED_BY VARCHAR(120) NULL,
+--   UPDATED_DATE TIMESTAMP DEFAULT NULL,
+--   PRIMARY KEY (CUSTOMER_ROLE_ID),
+--   CONSTRAINT custrole_cust FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
+--   ON DELETE CASCADE
+-- );
+
+
Index: src/main/resources/log4j.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
diff --git a/src/main/resources/log4j.properties b/src/main/resources/log4j.properties
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/resources/log4j.properties	(date 1613491889000)
@@ -0,0 +1,30 @@
+name=PropertiesConfig
+property.filename = logs
+appenders = console, file
+
+appender.console.type = Console
+appender.console.name = STDOUT
+appender.console.layout.type = PatternLayout
+appender.console.layout.pattern = [%-5level] %d{yyyy-MM-dd
+HH:mm:ss.SSS} [%t] %c{1} - %msg%n
+
+appender.file.type = File
+appender.file.name = LOGFILE
+appender.file.fileName=${user.home}/customer-events/logs/customer.log
+appender.file.layout.type=PatternLayout
+appender.file.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS}
+[%t] %c{1} - %msg%n
+
+loggers=file
+logger.file.name=logs.log4j2properties
+logger.file.level = debug
+logger.file.appenderRefs = file
+logger.file.appenderRef.file.ref = LOGFILE
+
+rootLogger.level = debug
+rootLogger.appenderRefs = stdout
+rootLogger.appenderRef.stdout.ref = STDOUT
+# To change this license header, choose License Headers in Project Properties.
+# To change this template file, choose Tools | Templates
+# and open the template in the editor.
+
Index: src/main/java/com/syzegee/customer/events/configuration/SwaggerConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/configuration/SwaggerConfiguration.java b/src/main/java/com/syzegee/customer/events/configuration/SwaggerConfiguration.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/configuration/SwaggerConfiguration.java	(date 1613491889000)
@@ -0,0 +1,25 @@
+package com.syzegee.customer.events.configuration;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import springfox.documentation.builders.PathSelectors;
+import springfox.documentation.builders.RequestHandlerSelectors;
+import springfox.documentation.spi.DocumentationType;
+import springfox.documentation.spring.web.plugins.Docket;
+import springfox.documentation.swagger2.annotations.EnableSwagger2;
+@Configuration
+//Enable Swagger
+@EnableSwagger2
+public class SwaggerConfiguration
+{
+    //creating bean
+    @Bean
+    public Docket api()
+    {
+//creating constructor of Docket class that accepts parameter DocumentationType
+        return new Docket(DocumentationType.SWAGGER_2)
+                .select()
+                .apis(RequestHandlerSelectors.basePackage("com.syzegee.customer.events"))
+                .paths(PathSelectors.any())
+                .build();
+    }
+}
\ No newline at end of file
Index: src/main/java/com/syzegee/customer/events/configuration/RestAuthenticationEntryPoint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/syzegee/customer/events/configuration/RestAuthenticationEntryPoint.java b/src/main/java/com/syzegee/customer/events/configuration/RestAuthenticationEntryPoint.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/java/com/syzegee/customer/events/configuration/RestAuthenticationEntryPoint.java	(date 1613491889000)
@@ -0,0 +1,29 @@
+package com.syzegee.customer.events.configuration;
+
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.syzegee.customer.events.response.GenericResponse;
+import org.springframework.http.HttpStatus;
+import org.springframework.security.core.AuthenticationException;
+import org.springframework.security.web.authentication.AuthenticationFailureHandler;
+import org.springframework.stereotype.Component;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.io.OutputStream;
+
+/**
+ * @author Riya Patel
+ */
+@Component
+public class RestAuthenticationEntryPoint implements AuthenticationFailureHandler {
+    @Override
+    public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,
+                                        AuthenticationException ex) throws IOException {
+        response.setStatus(HttpStatus.OK.value());
+        OutputStream out = response.getOutputStream();
+        ObjectMapper mapper = new ObjectMapper();
+        mapper.writeValue(out, new GenericResponse(false, HttpStatus.FORBIDDEN.value(), ex.getMessage(), null, null));
+        out.flush();
+    }
+}
Index: src/main/resources/kafka_installation
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/kafka_installation b/src/main/resources/kafka_installation
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/resources/kafka_installation	(date 1613491889000)
@@ -0,0 +1,141 @@
+Setup a single Apache Kafka node on CentOS 7
+
+ Prerequisites
+
+ We are going to setup Kafka on a CentOS 7 Linux server. For this purpose,
+ we need a CentOS 7 virtual machine with the latest updates and JDK 1.8.
+
+Create firewall rule
+
+The default minimal installation of CentOS 7 activates firewalld. To connect to our Kafka instance we have to create a rule to open port 9092. In CentOS 7 we have to add the corresponding firewall rule.
+
+1) Kafka firewall rule
+For Kafka, we have to open port 9092.
+[user@kafka1 ~]$ sudo vi /etc/firewalld/services/kafka.xml
+
+We have to add the following content to the kafka.xml file.
+<?xml version="1.0" encoding="utf-8"?>
+<service>
+  <short>Kafka</short>
+  <description>Firewall rule for Kafka port</description>
+  <port protocol="tcp" port="9092"/>
+</service>
+
+Activate the new rule
+Now we can activate the new firewall rule.
+Let's first restart the firewalld service to enforce that all existing service specifications are reloaded.
+[user@kafka1 ~]$ sudo service firewalld restart
+We can now permanently add the firewall rule for Kafka.
+
+[user@kafka1 ~]$ sudo firewall-cmd --permanent --add-service=kafka
+After activating the rule we have to restart firewalld.
+
+[user@kafka1 ~]$ sudo service firewalld restart
+To ensure that everything works as expected we can check if the new rule has been activated.
+
+[user@kafka1 ~]$ sudo firewall-cmd --list-services
+ssh dhcpv6-client ntp kafka
+The outout shows that the Kafka rule is active.
+
+2) Create kafka user
+I recommend creating a separate kafka user for operating the Kafka node.
+
+[user@kafka1 ~]$ sudo adduser kafka
+[user@kafka1 ~]$ sudo passwd kafka
+After creating the user we can switch to the new user and can perform the remaining configuration.
+
+[user@kafka1 ~]$ su kafka
+
+3)Install ZooKeeper and Kafka
+Now we can download Apache Kafka
+
+4)[kafka@kafka1 ~]$ wget http://apache.forsale.plus/kafka/1.0.0/kafka_2.11-1.0.0.tgz
+Let's decompress the tar.gz file
+
+[kafka@kafka1 ~]$ tar -xzf kafka_2.11-1.0.0.tgz
+That's it! As the Kafka archive already includes ZooKeeper we already have a fully working Kafka installation on our system. Let's adjust the configuration.
+
+5)Create directories
+We have to create data and log directories for ZooKeeper and Kafka. To simplify this process we can add the directories within the user home directory. In a production environment, we would use different locations, e.g. separate mount points or physical disks for data and log directories.
+
+[kafka@kafka1 ~]$ mkdir -p /home/kafka/zookeeper/data
+[kafka@kafka1 ~]$ mkdir -p /home/kafka/kafka/kafka-logs
+
+6)ZooKeeper configuration
+The configuration file of the embedded ZooKeeper instance is located at kafka_2.11-1.0.0/config/zookeeper.properties.
+
+[kafka@kafka1 ~]$ vi kafka_2.11-1.0.0/config/zookeeper.properties
+Within this file, we have to locate the dataDir property and set the value to point to the new ZooKeeper directory we created above.
+
+dataDir=/home/kafka/zookeeper/data
+Each Kafka node needs a unique server id. ZooKeeper looks up this information from the following file: /home/kafka/zookeeper/data/myid. As we have only one node we can simply assign the value "1" for our instance.
+
+[kafka@kafka1 ~]$ echo "1" > /home/kafka/zookeeper/data/myid
+Apache Kafka configuration
+Now we can adjust the Kafka configuration files stored here: kafka_2.11-1.0.0/config/server.properties.
+
+[kafka@kafka1 ~]$ vi kafka_2.11-1.0.0/config/server.properties
+Similar to the ZooKeeper configuration, each Kafka node needs a unique id. We have to find the broker.id property in the configuration file and change the id. I recommend using the same value as we used for ZooKeeper: 1.
+
+broker.id=1
+We also have to change the log directory location specified in the log.dirs parameter.
+
+log.dirs=/home/kafka/kafka/kafka-logs
+Additionally, we have to update the listeners and advertised.listeners properties with the Kafka node IP address - in my example 192.168.1.120. We can look up the IP address with ip a.
+
+listeners: the address / server name and protocol kafka is listening to (internal traffic between Kafka nodes)
+advertised.listener: the address / server name and protocol clients can use to connect to the Kafka cluster (external traffic). Only need to be specified if different from above setting.
+listeners=PLAINTEXT://192.168.1.120:9092
+advertised.listeners=PLAINTEXT://192.168.1.120:9092
+In a development environment, I usually add the property delete.topic.enable. Setting this property to true allows us to easily delete topics at runtime. If this property is not being set, Kafka will only mark topics as deleted.
+
+delete.topic.enable=true
+That's it, we have configured our single node Kafka server!
+
+Start and test the cluster setup
+We finally can startup ZooKeeper and Kafka and perform a quick test.
+
+Start ZooKeeper
+To start ZooKeeper we execute the following command:
+
+7)[kafka@kafka1 ~]$ cd kafka_2.11-1.0.0
+[kafka@kafka1 ~]$ nohup bin/zookeeper-server-start.sh config/zookeeper.properties &
+Start Apache Kafka
+Now we can start Kafka:
+
+8)[kafka@kafka1 ~]$ nohup bin/kafka-server-start.sh config/server.properties &
+Create a new topic
+To test the setup we have to create a topic.
+
+9)[kafka@kafka1 ~]$ bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 6 --topic topic1 --config cleanup.policy=delete --config delete.retention.ms=60000
+The command above creates a new topic named topic1 with 6 partitions.
+
+10)We can also get a list of all existing topics
+
+[kafka@kafka1 ~]$ bin/kafka-topics.sh --list --zookeeper loaclhost:2181
+And we can get a detailed description of our topic.
+
+[kafka@kafka1 ~]$ bin/kafka-topics.sh --describe --zookeeper kafka:2181 --topic topic1
+In my case the command above prints out:
+
+Topic:topic1	PartitionCount:6	ReplicationFactor:1	Configs:delete.retention.ms=60000,cleanup.policy=delete
+	Topic: topic1	Partition: 0	Leader: 1	Replicas: 1	Isr: 1
+	Topic: topic1	Partition: 1	Leader: 1	Replicas: 1	Isr: 1
+	Topic: topic1	Partition: 2	Leader: 1	Replicas: 1	Isr: 1
+	Topic: topic1	Partition: 3	Leader: 1	Replicas: 1	Isr: 1
+	Topic: topic1	Partition: 4	Leader: 1	Replicas: 1	Isr: 1
+	Topic: topic1	Partition: 5	Leader: 1	Replicas: 1	Isr: 1
+The command shows which server is responsible for which partition and which server replicates the data. In our case, with only one node, node 1 stores all data.
+
+11)Test the cluster
+The Kafka package already includes two command line tools to create a producer and a consumer that can be used to check if the node works.
+
+We can start the producer on our Kafka server using the command below. The command opens a prompt and anything we enter here will be sent to the topic.
+
+[kafka@kafka1 ~]$ bin/kafka-console-producer.sh --broker-list localhost:9092 --topic topic1
+Now we can start a consumer on our Kafka server.
+
+[kafka@kafka1 ~]$ bin/kafka-console-consumer.sh --bootstrap-server loaclhost:9092 --topic topic1
+Whenever we enter something in the producer prompt it will be printed out in our consumer terminal.
+
+This means our test was successful, the Kafka instance has been set up
\ No newline at end of file
Index: src/main/resources/mail_settings.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
diff --git a/src/main/resources/mail_settings.properties b/src/main/resources/mail_settings.properties
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/resources/mail_settings.properties	(date 1613491889000)
@@ -0,0 +1,16 @@
+# To change this license header, choose License Headers in Project Properties.
+# To change this template file, choose Tools | Templates
+# and open the template in the editor.
+
+#mail.smtp.host=smtp.gmail.com
+#mail.smtp.socketFactory.port=465
+#mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory
+#mail.smtp.auth=true
+#mail.smtp.port=465
+
+
+# AWS Configuration
+mail.transport.protocol=smtp
+mail.smtp.port=587
+mail.smtp.starttls.enable=true
+mail.smtp.auth=true
\ No newline at end of file
Index: src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/main/resources/application.yml	(date 1613491889000)
@@ -0,0 +1,118 @@
+logging:
+  file: ${user.home}/customer_events/logs/customer_events.log
+server:
+  port: 8080
+spring:
+  datasource:
+    driver-class-name: org.postgresql.Driver
+    url: jdbc:postgresql://ruleengine.cyglulrs2sd6.us-east-2.rds.amazonaws.com:5432/customer_events
+    username: postgres
+    password: postgres
+  jmx:
+    enabled: false
+  jpa:
+    database-platform: org.hibernate.dialect.PostgreSQLDialect
+    hibernate:
+      ddl-auto: update
+    properties:
+      hibernate:
+        jdbc:
+          lob:
+            non_contextual_creation: true
+    show-sql: true
+url:
+  ruleEngine : http://ec2-18-188-157-35.us-east-2.compute.amazonaws.com:8091/syzegee/v1/ruleengine
+  createSite: http://3.133.121.247/studio/api
+#Change the SSO URL
+Crafter:
+  url: http://ec2-13-59-46-60.us-east-2.compute.amazonaws.com:8080/studio
+  userName: admin
+  firstName: Selva
+  lastName: Selva
+  email: selva@gmail.com
+  secureKey: secure
+  groups: system_admin
+  password: crafAuth!234
+  jessionIdValue : 11C07590C307F92C62AF428C15F2CD87
+  xXsrfTokenValue : 5a9faee5-0f90-47cd-90bd-776ad4503e36
+  createOption : clone
+  authenticationType : basic
+  blueprint : org.craftercms.blueprint.empty
+  description : My very first site!
+  remoteName : origin
+  remotePassword : Aswath@2020
+  remoteUrl : https://gitlab.com/szells/member/member-ui.git
+  remoteUsername : lakshmins
+  useRemote : true
+  authenticationUrl : /api/1/services/api/1/security/login.json
+  createUserUrl : /api/2/users
+  addMemberToGroupUrl : /api/2/groups/1/members
+  startSiteUrl : /api/1/publish/start.json
+  createSiteUrl : /api/1/services/api/1/site/create.json
+  writeContent:
+    writeContentUrl : /api/1/services/api/1/content/write-content.json
+    phase : onSave
+    path : /site/website/index.xml
+    fileName : index.xml
+    user : admin
+    contentType : /page/entry
+    unlock : true
+  deployment:
+    url: http://ec2-18-222-22-123.us-east-2.compute.amazonaws.com:9192/api/1/target/create
+    replace: true
+    env: default
+    templateName: remote
+    repoUrl: ssh://crafter@ec2-13-59-46-60.us-east-2.compute.amazonaws.com:/opt/crafter/data/repos/sites/member-templates/published
+    repoBranch: live
+    engineUrl: http://ec2-18-222-22-123.us-east-2.compute.amazonaws.com:9080
+
+#KAFKA
+kafka:
+  bootstrap-servers: 3.22.79.216:9092
+  consumer_groupId: customer
+
+rest:
+  security:
+    enabled: true
+    cors.allowed-origins: '*'
+    cors.allowed-headers: '*'
+    api-matcher: /v1/customer/** #api matcher to be protected using oauth. specify your api url as per your project
+    cors.allowed-methods: GET,POST,PUT,PATCH,DELETE,OPTIONS
+    cors.max-age: 3600
+    issuer-uri: http://ec2-18-191-199-237.us-east-2.compute.amazonaws.com:8080/auth/realms/internal
+    resource.id: roles
+
+#keycloak configuration
+
+keycloak:
+  realm: master
+  resource: szells-server
+  auth-server-url: http://ec2-18-191-199-237.us-east-2.compute.amazonaws.com:8080/auth
+  ssl-required: none
+
+security:
+  oauth2:
+    client:
+      client-id: szells-server
+      client-secret: cef2c6e8-8ed6-4932-84b2-8789c176a9c3
+      grant-type: password
+      user-authorization-uri: http://ec2-18-191-199-237.us-east-2.compute.amazonaws.com:8080/auth/realms/internal/protocol/openid-connect/token
+      access-token-uri: http://ec2-18-191-199-237.us-east-2.compute.amazonaws.com:8080/auth/realms/internal/protocol/openid-connect/token
+      scope: openid
+    resource:
+      token-info-uri: ${rest.security.issuer-uri}/protocol/openid-connect/token/introspect
+      user-info-uri: ${rest.security.issuer-uri}/protocol/openid-connect/userinfo
+      jwt.key-value: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn7W0KazGxTsC9BYae/1ZwWATcd9uWOxS12mzSBYduDKEhKl6tvXCUI9Iw5SocNoFRlZYILFvr6nwLNTQmfo5EGJs+kCXVf2bYWOWmfbcUW5enJAoGtXgAXQ9WpRpn/SZxPtJ06aSVet5y+sSGmtDWqHnCqcOcLcLE1juSUHWXG93U4XXpPOY64GWlddtQXZy34XIhwfv69UuBn51PlAVXagB/C/CoPD7Tbr6otGwoFOuHD5Yu9wSX4ArJqBxQ64yoyD5tZA8wt8PWsBrDIhXjxdI/qNzQEm1CNo21lPhlbLGqzc+Xx3Ge52t0qejrodrgaQIH0bL6fCorCNF5ajLAQIDAQAB
+
+requiredexecutiontimeinseconds: 10000
+
+mail:
+  activationLink : http://3.21.125.27/step3-activate
+  siteInviteLink : http://3.21.125.27/site-loader
+  from : dev.worthy1@gmail.com
+  fromName : Szells
+  host : email-smtp.us-east-1.amazonaws.com
+  smtpUsername : AKIA4DYGT4Q7F7QPCF3Y
+  smtpPassword : BMz+dvWfVQXLtrXh8vG9aL98ecIsnkGQhj4Lb4DUGEaP
+  port : 587
+  subject : Welcome Szells Platform !!
\ No newline at end of file
Index: src/test/java/com/syzegee/customer/events/CustomerEventsApplicationTests.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/syzegee/customer/events/CustomerEventsApplicationTests.java b/src/test/java/com/syzegee/customer/events/CustomerEventsApplicationTests.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/test/java/com/syzegee/customer/events/CustomerEventsApplicationTests.java	(date 1613491889000)
@@ -0,0 +1,16 @@
+package com.syzegee.customer.events;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.test.context.junit4.SpringRunner;
+
+@RunWith(SpringRunner.class)
+@SpringBootTest
+public class CustomerEventsApplicationTests {
+
+	@Test
+	public void contextLoads() {
+	}
+
+}
Index: src/test/java/com/syzegee/customer/events/bdd/CustomerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/syzegee/customer/events/bdd/CustomerTest.java b/src/test/java/com/syzegee/customer/events/bdd/CustomerTest.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/test/java/com/syzegee/customer/events/bdd/CustomerTest.java	(date 1613491889000)
@@ -0,0 +1,13 @@
+package com.syzegee.customer.events.bdd;
+
+
+import cucumber.api.CucumberOptions;
+import cucumber.api.junit.Cucumber;
+import org.junit.runner.RunWith;
+
+@RunWith(Cucumber.class)
+@CucumberOptions(features = "src/test/resources/Features" , dryRun = false, glue = "com.syzegee.customer.events.bdd.stepdefination", plugin = {
+        "pretty", "html: cucumber-html-reports", "json: cucumber-html-reports/cucumber.json"})
+public class CustomerTest {
+
+}
\ No newline at end of file
Index: src/test/java/com/syzegee/customer/events/service/CustomerServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/syzegee/customer/events/service/CustomerServiceTest.java b/src/test/java/com/syzegee/customer/events/service/CustomerServiceTest.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/test/java/com/syzegee/customer/events/service/CustomerServiceTest.java	(date 1613491889000)
@@ -0,0 +1,190 @@
+package com.syzegee.customer.events.service;
+
+import static org.junit.Assert.assertEquals;
+
+//@RunWith(MockitoJUnitRunner.class)
+public class CustomerServiceTest {
+
+//    @Mock
+//    CustomerConnectors connectors;
+//    @InjectMocks
+//    CustomerService customerService;
+
+//    @Test
+//    public void createCustomerEventTest() {
+//        CustomerResponse expectedResult = new CustomerResponse();
+//        expectedResult.setCustomerId(5L);
+//        expectedResult.setCorrelationId("1");
+//        expectedResult.setMessage("Customer Record Successfully Created ");
+//        CustomerBenefit customerBenefit = null;
+//        OrganizationDetail organizationDetail = OrganizationDetail.builder().organizationId(1L).organizationName("Amazon")
+//                .organizationDesc("desc").build();
+//        Organization organization = Organization.builder().organizationName("Amazon").
+//                organizationDesc("desc").isActive(Boolean.TRUE)
+//                .createdBy("Admin").createdDate(new Date()).build();
+//        when(connectors.createOrganization(organizationDetail,"124568562")).thenReturn(organization);
+//        CustomerDetail customerDetail = CustomerDetail.builder().customerId(1L).userId("User1")
+//                .businessName("Amazon").businessEmail("info@amazon.com").phoneNo("12335453")
+//                .businessType("software").currency("USD").region("USA")
+//                .createdBy("admin").createdDate(new Date()).updatedBy("admin").updatedDate(new Date()).build();
+//
+//
+//        Customer customer = Customer.builder().organizationId(organization).customerId(5L)
+//                .userId("User1").businessName("Amazon").businessEmail("info@amazon.com").
+//                        businessType("software").currency("USD").region("USA").isActive(Boolean.TRUE)
+//                .createdBy("admin").createdDate(new Date()).build();
+//        String correlationId = "123";
+//        when(connectors.createCustomer(customerDetail, organization, correlationId)).thenReturn(customer);
+//
+//        TierDetail tierDetail = TierDetail.builder().id(1L).tierName("Basic").build();
+//        Tier tier = Tier.builder().customerId(customer).tierName(tierDetail.getTierName()).isActive(Boolean.TRUE)
+//                .createdBy(tierDetail.getCreatedBy()).createdDate(new Date()).build();
+//        when(connectors.createTier(tierDetail, customer, correlationId)).thenReturn(tier);
+//
+//        List<CustomerAddressDetail> custAddressDetail = new ArrayList<>();
+//
+//        CustomerAddressDetail addressDetail = CustomerAddressDetail.builder().customerAddressId(1L)
+//                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli").city("Bangalore")
+//                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+//        custAddressDetail.add(addressDetail);
+//        List<CustomerAddress> customerAddresses = new ArrayList<>();
+//        CustomerAddress customerAddress = CustomerAddress.builder().addressLine1(addressDetail.getAddressLine1()).addressLine2(addressDetail.getAddressLine2())
+//                .addressLine3(addressDetail.getAddressLine3()).city(addressDetail.getCity()).countryCode(addressDetail.getCountryCode())
+//                .customerId(customer).isActive(Boolean.TRUE).createdBy(addressDetail.getCreatedBy()).createdDate(new Date()).build();
+//        customerAddresses.add(customerAddress);
+//        when(connectors.createCustomerAddress(custAddressDetail, customer, correlationId)).thenReturn(customerAddresses);
+//List<PackagesDetail> detailList=new ArrayList<>();
+//        PackagesDetail packagesDetail = PackagesDetail.builder().id(1L).packageName("Dianing").build();
+//        detailList.add(packagesDetail);
+//        List<Packages> packagesList=new ArrayList<>();
+//        Packages packages = Packages.builder().tierId(tier).packageName(packagesDetail.getPackageName()).
+//                createdBy(packagesDetail.getCreatedBy())
+//                .createdDate(new Date()).build();
+//        packagesList.add(packages);
+//        when(connectors.createPackages(detailList, customer, tier, correlationId)).thenReturn(packagesList);
+//
+//        List<BenefitDetail> benefitDetails = new ArrayList<>();
+//
+//        BenefitDetail benefitDetail = BenefitDetail.builder().id(1L).vendorId(1L).benefitName("custom").build();
+//        benefitDetails.add(benefitDetail);
+//        List<CustomerBenefit> customerBenefits = new ArrayList<>();
+//        for (BenefitDetail detail : benefitDetails) {
+//            customerBenefit = CustomerBenefit.builder().customerId(customer).vendorId(detail.getVendorId())
+//                    .build();
+//
+//            customerBenefits.add(customerBenefit);
+//        }
+//        when(connectors.createBenefit(benefitDetails, customer, correlationId)).thenReturn(customerBenefits);
+//
+//        List<PackageBenefitsDetail> packageBenefitsDetails = new ArrayList<>();
+//        PackageBenefitsDetail packageBenefitsDetail = PackageBenefitsDetail.builder().benefitId(1L).packageId(1L).build();
+//        packageBenefitsDetails.add(packageBenefitsDetail);
+//        List<PackagesBenefit> packagesBenefits = new ArrayList<>();
+//        for (CustomerBenefit benefit : customerBenefits) {
+//            for (PackageBenefitsDetail pckBeneDetails : packageBenefitsDetails) {
+//                PackagesBenefit pckgBenfit = PackagesBenefit.builder().packageId(packages)
+//                        .customerBenefitId(benefit).isActive(Boolean.TRUE)
+//                        .createdBy(pckBeneDetails.getCreatedBy()).createdDate(new Date()).build();
+//                packagesBenefits.add(pckgBenfit);
+//            }
+//        }
+//        when(connectors.createPackageBenefit(packageBenefitsDetails
+//                , customerBenefits, packagesList, correlationId)).thenReturn(packagesBenefits);
+//
+//        List<CustomerRoleDetail> customerRoleDetails = new ArrayList<>();
+//        CustomerRoleDetail customerRoleDetail = CustomerRoleDetail.builder().customerId(customer).customerRoleType("admin").build();
+//        customerRoleDetails.add(customerRoleDetail);
+//        List<CustomerUserDetail> customerUserDetails = new ArrayList<>();
+//        CustomerUserDetail customerUserDetail = CustomerUserDetail.builder()
+//                .customerId(1l).firstName("john").lastName("dev").build();
+//        customerUserDetails.add(customerUserDetail);
+//        LocationDetail locationDetail = LocationDetail.builder().locationId(1l).locationName("India").build();
+//        CustomerCreateDetail customerCreateDetail = CustomerCreateDetail.builder().orgDetail(organizationDetail)
+//                .customerDetail(customerDetail).custAddressDetail(custAddressDetail).tierDetail(tierDetail)
+//                .packagesDetail(detailList).benefitDetail(benefitDetails).packageBenefitsDetail(packageBenefitsDetails)
+////                .locationDetail(locationDetail).customerUserDetails(customerUserDetails).customerRoleDetails(customerRoleDetails)
+//                .build();
+//        CustomerInbox customerInbox = CustomerInbox.builder().
+//                customerId(customer.getCustomerId())
+//                .customerRequestId("12345")
+//                .status(CUSTOMER_CREATED).details(customerCreateDetail.toString())
+//                .correlationId(correlationId).build();
+//        when(connectors.saveToinbox(customerCreateDetail, customerInbox.getCustomerId(), correlationId)).thenReturn(customerInbox);
+//        CustomerResponse customerRegistration = customerService.customerCreateEvent(customerCreateDetail, correlationId,customerInbox.getCustomerId());
+//        assertEquals(customerRegistration.getMessage(), expectedResult.getMessage());
+//        assertEquals(customerRegistration.getCorrelationId(), expectedResult.getCorrelationId());
+//        assertEquals(customerRegistration.getCustomerId(), expectedResult.getCustomerId());
+//    }
+
+//    @Test
+//    public void updateCustomerEventTest() {
+//        String correlationId = "123";
+//        CustomerResponse expectedResult = new CustomerResponse();
+//        expectedResult.setCustomerId(5l);
+//        expectedResult.setCorrelationId(correlationId);
+//        expectedResult.setMessage("Customer update request recevied you will be receving an eamil  ");
+//        CustomerDetail customerDetail = CustomerDetail.builder().customerId(1l).userId("User1")
+//                .businessName("Amazon").businessEmail("info@amazon.com").phoneNo("12335453")
+//                .businessType("software").currency("USD").region("USA")
+//                .createdBy("admin").createdDate(new Date()).updatedBy("admin").updatedDate(new Date()).build();
+//
+//
+//        Customer customer = Customer.builder().customerId(5l).correlationId(correlationId)
+//                .userId("User1").businessName("Amazon").businessEmail("info@amazon.com").
+//                        businessType("software").currency("USD").region("USA").isActive(Boolean.TRUE)
+//                .createdBy("admin").createdDate(new Date()).build();
+//        when(connectors.getCustomer(5L, correlationId)).thenReturn(customer);
+//
+//        when(connectors.updateCustomer(customerDetail, customer, correlationId)).thenReturn(customer);
+//
+//        CustomerAddressDetail addressDetail = CustomerAddressDetail.builder().customerAddressId(1L)
+//                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli").city("Bangalore")
+//                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+//        CustomerAddress customerAddress = CustomerAddress.builder().addressLine1(addressDetail.getAddressLine1()).addressLine2(addressDetail.getAddressLine2())
+//                .addressLine3(addressDetail.getAddressLine3()).city(addressDetail.getCity()).countryCode(addressDetail.getCountryCode())
+//                .customerId(customer).isActive(Boolean.TRUE).createdBy(addressDetail.getCreatedBy()).createdDate(new Date()).build();
+//
+//        when(connectors.updateCustomerAddress(addressDetail, customer, correlationId)).thenReturn(customerAddress);
+//
+//        BenefitDetail benefitDetail = BenefitDetail.builder().id(1L).vendorId(1L).benefitName("custom")
+//                .build();
+//        CustomerBenefit customerBenefit = CustomerBenefit.builder().customerId(customer).
+//                vendorId(benefitDetail.getVendorId())
+//                .build();
+//        when(connectors.updateCustomerBenifit(benefitDetail, customer, correlationId)).thenReturn(customerBenefit);
+//
+//        TierDetail tierDetail = TierDetail.builder().id(1L).tierName("Basic").build();
+//        Tier tier = Tier.builder().customerId(customer).tierName(tierDetail.getTierName()).isActive(Boolean.TRUE)
+//                .createdBy(tierDetail.getCreatedBy()).createdDate(new Date()).build();
+//        when(connectors.updateTier(tierDetail, customer, correlationId)).thenReturn(tier);
+//
+//        PackagesDetail packagesDetail = PackagesDetail.builder().id(1L).packageName("Dianing").build();
+//        Packages packages = Packages.builder().tierId(tier).packageName(packagesDetail.getPackageName()).
+//                createdBy(packagesDetail.getCreatedBy())
+//                .createdDate(new Date()).build();
+//        when(connectors.updatePackages(packagesDetail, customer, correlationId)).thenReturn(packages);
+//
+//        PackageBenefitsDetail packageBenefitsDetail = PackageBenefitsDetail.builder().benefitId(1L).packageId(1L).build();
+//        PackagesBenefit packagesBenefit = PackagesBenefit.builder().packageId(packages)
+//                .customerBenefitId(customerBenefit).isActive(Boolean.TRUE)
+//                .createdBy(packageBenefitsDetail.getCreatedBy()).createdDate(new Date()).build();
+//        when(connectors.updatePackageBenifit(packageBenefitsDetail, customer, correlationId)).thenReturn(packagesBenefit);
+//
+//        CustomerUpdateDatail customerUpdateDatail = CustomerUpdateDatail.builder()
+//                .customerDetail(customerDetail).custAddressDetail(addressDetail).tierDetail(tierDetail)
+//                .packagesDetail(packagesDetail).benefitDetail(benefitDetail).packageBenefitsDetail(packageBenefitsDetail)
+//                .build();
+//        CustomerInbox customerInbox = CustomerInbox.builder().
+//                customerId(customer.getCustomerId())
+//                .customerRequestId("12345")
+//                .status(CUSTOMER_CREATED).details(customerUpdateDatail.toString())
+//                .correlationId(correlationId).build();
+//        when(connectors.updateToinbox(customerUpdateDatail, customer, correlationId)).thenReturn(customerInbox);
+//        when(connectors.updateAllCustomerDetails(customerUpdateDatail, 5L, correlationId)).thenReturn(customer);
+//        CustomerResponse customerRegistration = customerService.updateCustomerEvent(customerUpdateDatail,5L,correlationId);
+//        assertEquals(customerRegistration.getMessage(), expectedResult.getMessage());
+//        assertEquals(customerRegistration.getCorrelationId(), expectedResult.getCorrelationId());
+//        assertEquals(customerRegistration.getCustomerId(), expectedResult.getCustomerId());
+//
+//    }
+}
\ No newline at end of file
Index: src/test/java/com/syzegee/customer/events/adapter/CustomerAdapterTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/syzegee/customer/events/adapter/CustomerAdapterTest.java b/src/test/java/com/syzegee/customer/events/adapter/CustomerAdapterTest.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/test/java/com/syzegee/customer/events/adapter/CustomerAdapterTest.java	(date 1613491889000)
@@ -0,0 +1,360 @@
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.model.*;
+import com.syzegee.customer.events.entity.*;
+import com.syzegee.customer.events.repository.*;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.Mockito;
+import org.mockito.junit.MockitoJUnitRunner;
+import org.springframework.beans.factory.annotation.Autowired;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+@RunWith(MockitoJUnitRunner.class)
+public class CustomerAdapterTest {
+    @Mock
+    CustomerRepository customerRepositoryMock;
+
+    @Mock
+    OrganizationRepository organizationRepositoryMock;
+    @Mock
+    CustomerAddressRepository addressRepository;
+    @Mock
+    TierRepository tierRepository;
+    @Mock
+    PackageRepository packageRepository;
+    @Mock
+    BenefitRepository benefitRepository;
+    @Mock
+    PackageBenefitsRepository packageBenefitsRepository;
+
+    @InjectMocks
+    CustomerAdapter customerAdapterMock;
+    @Mock
+    private CustomerStatusAdapter customerStatusAdapter;
+    @Mock
+    private DomainDetailsAdapter domainDetailsAdapter;
+
+
+    @Test
+    public void createOrganization() {
+        String correlationId="1213234214-123-15434235";
+        Organization organization = getOrganization();
+        Mockito.when(organizationRepositoryMock.save(new Organization())).thenReturn(organization);
+        OrganizationDetail organizationDetail = OrganizationDetail.builder().organizationId(1l)
+                .organizationName("Amazon")
+                .organizationDesc("desc").build();
+        Organization response = customerAdapterMock.createOrganization(organizationDetail,correlationId);
+        System.out.println(organization.getOrganizationName());
+        System.out.println(response.getOrganizationName());
+        assertEquals(organization, response);
+        assertEquals(organization.getOrganizationName(), response.getOrganizationName());
+    }
+
+    @Test
+    public void createCustomer() {
+        Organization organization = getOrganization();
+        Customer customer = getCustomer();
+        System.out.println("customer  >>" + customer);
+        CustomerDetail customerDetail = CustomerDetail.builder().customerId(99l)
+                .phoneNo("12345").organizationId(1l)
+                .userId(99l).businessName("Sangam").businessEmail("info@amazon.com").
+                        businessType("software").currency("USD").region("USA").
+                        isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+        Mockito.when(customerRepositoryMock.save(new Customer())).thenReturn(customer);
+        String correlationId="123";
+        Customer response = customerAdapterMock.createCustomer(customerDetail, organization, correlationId);
+        assertEquals(customer, response);
+        assertEquals(customer.getBusinessEmail(), response.getBusinessEmail());
+    }
+
+    @Test
+    public void createCustomerAddress() {
+        CustomerAddressDetail addressDetail = CustomerAddressDetail.builder()
+                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli")
+                .city("Bangalore")
+                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+        List<CustomerAddress> customerAddresses=new ArrayList<>();
+        CustomerAddress customerAddress = getCustomerAddress();
+        Customer customer = getCustomer();
+
+        Mockito.when(addressRepository.save(new CustomerAddress()))
+                .thenReturn(customerAddress);
+
+        String correlationId="123";
+        CustomerAddress response = customerAdapterMock
+                .createCustomerAddress(addressDetail, customer,correlationId);
+        assertEquals(customerAddress, response);
+        //assertEquals(addressDetail, response);
+    }
+
+    @Test
+    public void createTier() {
+        TierDetail tierDetail = TierDetail.builder().id(1l).tierName("Basic").build();
+        Tier tier = getTier();
+        Customer customer = getCustomer();
+        Mockito.when(tierRepository.save(new Tier())).thenReturn(tier);
+        String correlationId="123";
+        Tier response = customerAdapterMock.createTier(tierDetail, customer,correlationId);
+        assertEquals(tier, response);
+        assertEquals(tier.getTierName(), response.getTierName());
+    }
+
+//    @Test
+//    public void createPackages() {
+//        List<PackagesDetail> packages = new ArrayList<>();
+//        Tier tier = getTier();
+//        Customer customer=new Customer();
+//        PackagesDetail packagesDetail = PackagesDetail.builder().id(1l)
+//                .packageName("Dianing").build();
+//        packages.add(packagesDetail);
+//        String correlationId="123";
+//        Packages packag=getPackages();
+//        Mockito.when(packageRepository.save(new Packages())).thenReturn(packag);
+//        List<Packages> response = customerConnectorsMock.createPackages(packages,customer, tier,correlationId);
+//        assertEquals(packages, response);
+//        assertEquals(packages.size(), response.size());
+//    }
+
+
+    @Test
+    public void createBenefit() {
+        List<BenefitDetail> benefitDetails = new ArrayList<>();
+        List<Long> vList = new ArrayList<>();
+        vList.add((long) 1);
+        BenefitDetail benefitDetail = BenefitDetail.builder().id(1l).vendorId(vList).benefitName("custom").build();
+        benefitDetails.add(benefitDetail);
+        Customer customer = getCustomer();
+        CustomerBenefit customerBenefit=getCustomerBenefits();
+        Mockito.when( benefitRepository.save(new CustomerBenefit())).thenReturn(customerBenefit);
+        String correlationId="123";
+        List<CustomerBenefit> response = customerAdapterMock
+                .createBenefit(benefitDetails, customer,correlationId);
+        assertEquals(benefitDetails.size(), response.size());
+
+    }
+
+
+    @Test
+    public void createPackageBenefit() {
+        List<Packages> details=new ArrayList<>();
+        List<PackageBenefitsDetail> packageBenefitsDetails=new ArrayList<>();
+        PackageBenefitsDetail packageBenefitsDetail= PackageBenefitsDetail.builder()
+                .benefitId(1l).packageId(1l).build();
+        packageBenefitsDetails.add(packageBenefitsDetail);
+        List<CustomerBenefit> customerBenefits=new ArrayList<>();
+        CustomerBenefit customerBenefit=getCustomerBenefits();
+        customerBenefits.add(customerBenefit);
+        Packages packages=getPackages();
+        details.add(packages);
+        PackagesBenefit packagesBenefit =getPackagesBenefit();
+        Mockito.when( packageBenefitsRepository.save(new PackagesBenefit()))
+                .thenReturn(packagesBenefit);
+        String correlationId="123";
+        PackagesDetail packagesDetail = PackagesDetail.builder().customerId(1L).packageName("Dianing").build();
+        packagesDetail.setBenefits(customerBenefits);
+        List<PackagesDetail> packagesDetailList = new ArrayList<>();
+        packagesDetailList.add(packagesDetail);
+        List<PackagesBenefit> response = customerAdapterMock
+                .createPackageBenefit(packagesDetailList,
+                        customerBenefits, details,correlationId);
+        assertEquals(packageBenefitsDetails.size(), response.size());
+
+    }
+
+
+    @Test
+    public void getCustomerTest() {
+        Customer customer=getCustomer();
+        Mockito.when(customerRepositoryMock.getRecordById(1L)).thenReturn(customer);
+        Customer response = customerAdapterMock.getCustomer(1l,"123");
+        assertEquals(customer, response);
+        assertEquals(customer.getBusinessEmail(), response.getBusinessEmail());
+    }
+
+    @Test
+    public void updateCustomer() {
+        Customer customer = getCustomer();
+        Organization organization=getOrganization();
+        System.out.println("customer  >>" + customer);
+        CustomerDetail customerDetail = CustomerDetail.builder().customerId(99l).phoneNo("12345").organizationId(1l)
+                .userId(99l).businessName("Sangam").businessEmail("info@amazon.com").
+                        businessType("software").currency("USD").region("USA").
+                        isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+        Mockito.when(organizationRepositoryMock.getRecordById(1l)).thenReturn(organization);
+        Mockito.when(customerRepositoryMock.save(customer)).thenReturn(customer);
+        String correlationId="123";
+        Customer response = customerAdapterMock.updateCustomer(customerDetail, customer,correlationId);
+        assertEquals(customer, response);
+        assertEquals(customer.getBusinessEmail(), response.getBusinessEmail());
+    }
+
+    @Test
+    public void updateCustomerAddress() {
+        CustomerAddressDetail addressDetail = CustomerAddressDetail.builder().customerId(1l)
+                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli")
+                .city("Bangalore")
+                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+        CustomerAddress customerAddress = getCustomerAddress();
+        Customer customer = getCustomer();
+
+        Mockito.when(addressRepository.getRecordById(1l))
+                .thenReturn(customerAddress);
+
+        Mockito.when(addressRepository.save(customerAddress))
+                .thenReturn(customerAddress);
+        String correlationId="123";
+        CustomerAddress response = customerAdapterMock
+                .updateCustomerAddress(addressDetail, customer,correlationId);
+        assertEquals(customerAddress, response);
+        assertEquals(customerAddress.getAddressLine1(), response.getAddressLine1());
+    }
+
+
+
+    @Test
+    public void updateTier() {
+        TierDetail tierDetail = TierDetail.builder().id(1l).tierName("Basic").build();
+        Tier tier = getTier();
+        Customer customer = getCustomer();
+        Mockito.when( tierRepository.getRecordById(1l)).thenReturn(tier);
+        Mockito.when(tierRepository.save(tier)).thenReturn(tier);
+        String correlationId="123";
+        Tier response = customerAdapterMock.updateTier(tierDetail, customer,correlationId);
+        System.out.println(";;;;;   >>>"+response.getTierName());
+        assertEquals(tier, response);
+        assertEquals(tier.getTierName(), response.getTierName());
+    }
+
+    //@Test
+   /* public void updatePackages() {
+        Customer customer = getCustomer();
+        Packages packages = getPackages();
+        Tier tier = getTier();
+        PackagesDetail packagesDetail = PackagesDetail.builder().id(1l)
+                .packageName("Dianing").build();
+        Mockito.when(packageRepository.getRecordById(1l)).thenReturn(packages);
+        Mockito.when(packageRepository.save(packages)).thenReturn(packages);
+        String correlationId="123";
+        Packages response = customerAdapterMock.updatePackages(packagesDetail, customer,correlationId);
+        assertEquals(packages, response);
+        assertEquals(packages.getPackageName(), response.getPackageName());
+    }*/
+
+    @Test
+    public void updatePackageBenifit() {
+        Customer customer = getCustomer();
+        PackageBenefitsDetail packageBenefitsDetail= PackageBenefitsDetail.builder()
+                .id(1l).benefitId(1l).packageId(1l).build();
+        CustomerBenefit customerBenefit=getCustomerBenefits();
+        Packages packages=getPackages();
+        PackagesBenefit packagesBenefit =getPackagesBenefit();
+        Mockito.when( packageBenefitsRepository.getRecordById(1l))
+                .thenReturn(packagesBenefit);
+        Mockito.when(packageRepository.getRecordById(1l))
+                .thenReturn(packages);
+        Mockito.when( benefitRepository.getRecordById(1l))
+                .thenReturn(customerBenefit);
+        Mockito.when( packageBenefitsRepository.save(packagesBenefit))
+                .thenReturn(packagesBenefit);
+        String correlationId="123";
+        PackagesBenefit response = customerAdapterMock
+                .updatePackageBenifit(packageBenefitsDetail, customer,correlationId);
+        assertEquals(packagesBenefit, response);
+        assertEquals(packagesBenefit.getPackageBenefitId(), response.getPackageBenefitId());
+    }
+
+    @Test
+    public void updateCustomerBenifit() {
+        List<Long> vList = new ArrayList<>();
+        vList.add((long) 1);
+        BenefitDetail benefitDetail = BenefitDetail.builder().id(1l).vendorId(vList).benefitName("custom").build();
+        Customer customer = getCustomer();
+        CustomerBenefit customerBenefit=getCustomerBenefits();
+        Mockito.when( benefitRepository.getRecordById(1l)).thenReturn(customerBenefit);
+        Mockito.when( benefitRepository.save(customerBenefit)).thenReturn(customerBenefit);
+        String correlationId="123";
+      CustomerBenefit response = customerAdapterMock
+                .updateCustomerBenifit(benefitDetail, customer,correlationId);
+        assertEquals(customerBenefit, response);
+        assertEquals(customerBenefit.getCustomerBenefitId(), response.getCustomerBenefitId());
+    }
+
+    public Organization getOrganization() {
+        Organization organization = Organization.builder().organizationId(1l)
+                .organizationName("Java").
+                        organizationDesc("desc").isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+        System.out.println("org >>>" + organization.getOrganizationName());
+        return organization;
+    }
+
+    public Customer getCustomer() {
+        Organization organization = getOrganization();
+        Customer customer = Customer.builder().organizationId(organization).customerId(5l).phone("12345")
+                .userId(5l).businessName("Sangam").businessEmail("info@amazon.com").
+                        businessType("software").currency("USD").region("USA")
+                .isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+        return customer;
+    }
+
+    public CustomerAddress getCustomerAddress() {
+        CustomerAddress customerAddress = CustomerAddress.builder().customerAddressId(1l)
+                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli")
+                .city("Bangalore").customerId(getCustomer())
+                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+        return customerAddress;
+    }
+
+    public Tier getTier() {
+        Customer customer = getCustomer();
+
+        Tier tier = Tier.builder().customerId(customer).tierId(1l).tierName("Basic").isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+        return tier;
+    }
+
+    public Packages getPackages() {
+        Tier tier = getTier();
+        Packages packages = Packages.builder().tierId(tier).packageId(1l).packageName("Dianing").
+                createdBy("Admin").createdDate(new Date()).build();
+        return packages;
+    }
+
+    public CustomerBenefit getCustomerBenefits() {
+        Customer customer = getCustomer();
+        CustomerBenefit customerBenefit = CustomerBenefit.builder().customerId(customer).
+                vendorId(1l).benefitName("abc").build();
+        return customerBenefit;
+    }
+
+    public CustomerBenefit getCustomerBenefit() {
+        Customer customer = getCustomer();
+        CustomerBenefit customerBenefit = CustomerBenefit.builder().customerId(customer).
+                vendorId(1l).benefitName("").build();
+        return customerBenefit;
+    }
+
+    public PackagesBenefit getPackagesBenefit() {
+        Packages packages = getPackages();
+        CustomerBenefit benefit = getCustomerBenefits();
+        PackagesBenefit pckgBenfit = PackagesBenefit.builder().packageId(packages)
+                .customerBenefitId(benefit).isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+
+        return pckgBenfit;
+    }
+
+
+
+}
Index: src/test/java/com/syzegee/customer/events/adapter/CustomerConnectorsTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/syzegee/customer/events/adapter/CustomerConnectorsTest.java b/src/test/java/com/syzegee/customer/events/adapter/CustomerConnectorsTest.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/test/java/com/syzegee/customer/events/adapter/CustomerConnectorsTest.java	(date 1613491889000)
@@ -0,0 +1,356 @@
+package com.syzegee.customer.events.adapter;
+
+import com.syzegee.customer.events.model.*;
+import com.syzegee.customer.events.entity.*;
+import com.syzegee.customer.events.repository.*;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.InjectMocks;
+import org.mockito.Mock;
+import org.mockito.Mockito;
+import org.mockito.junit.MockitoJUnitRunner;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+@RunWith(MockitoJUnitRunner.class)
+public class CustomerConnectorsTest {
+    @Mock
+    CustomerRepository customerRepositoryMock;
+
+    @Mock
+    OrganizationRepository organizationRepositoryMock;
+    @Mock
+    CustomerAddressRepository addressRepository;
+    @Mock
+    TierRepository tierRepository;
+    @Mock
+    PackageRepository packageRepository;
+    @Mock
+    BenefitRepository benefitRepository;
+    @Mock
+    PackageBenefitsRepository packageBenefitsRepository;
+
+    @InjectMocks
+    CustomerConnectors customerConnectorsMock;
+
+    @InjectMocks
+    CustomerAdapter customerAdapterMock;
+
+
+    @Test
+    public void createOrganization() {
+        String correlationId="1213234214-123-15434235";
+        Organization organization = getOrganization();
+        Mockito.when(organizationRepositoryMock.save(new Organization())).thenReturn(organization);
+        OrganizationDetail organizationDetail = OrganizationDetail.builder().organizationId(1l)
+                .organizationName("Amazon")
+                .organizationDesc("desc").build();
+        Organization response = customerConnectorsMock.createOrganization(organizationDetail,correlationId);
+        System.out.println(organization.getOrganizationName());
+        System.out.println(response.getOrganizationName());
+        assertEquals(organization, response);
+        assertEquals(organization.getOrganizationName(), response.getOrganizationName());
+    }
+
+    @Test
+    public void createCustomer() {
+        Organization organization = getOrganization();
+        Customer customer = getCustomer();
+        System.out.println("customer  >>" + customer);
+        CustomerDetail customerDetail = CustomerDetail.builder().customerId(99l)
+                .phoneNo("12345").organizationId(1l)
+                .userId(1l).businessName("Sangam").businessEmail("info@amazon.com").
+                        businessType("software").currency("USD").region("USA").
+                        isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+        Mockito.when(customerRepositoryMock.save(new Customer())).thenReturn(customer);
+        String correlationId="123";
+        Customer response = customerConnectorsMock.createCustomer(customerDetail, organization, correlationId);
+        assertEquals(customer, response);
+        assertEquals(customer.getBusinessEmail(), response.getBusinessEmail());
+    }
+
+    @Test
+    public void createCustomerAddress() {
+        CustomerAddressDetail addressDetail = CustomerAddressDetail.builder()
+                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli")
+                .city("Bangalore")
+                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+        List<CustomerAddress> customerAddresses=new ArrayList<>();
+        CustomerAddress customerAddress = getCustomerAddress();
+        Customer customer = getCustomer();
+
+        Mockito.when(addressRepository.save(new CustomerAddress()))
+                .thenReturn(customerAddress);
+
+        String correlationId="123";
+        CustomerAddress response = customerConnectorsMock
+                .createCustomerAddress(addressDetail, customer,correlationId);
+        assertEquals(customerAddress, response);
+        //assertEquals(addressDetail, response);
+    }
+
+    @Test
+    public void createTier() {
+        TierDetail tierDetail = TierDetail.builder().id(1l).tierName("Basic").build();
+        Tier tier = getTier();
+        Customer customer = getCustomer();
+        Mockito.when(tierRepository.save(new Tier())).thenReturn(tier);
+        String correlationId="123";
+        Tier response = customerConnectorsMock.createTier(tierDetail, customer,correlationId);
+        assertEquals(tier, response);
+        assertEquals(tier.getTierName(), response.getTierName());
+    }
+
+//    @Test
+//    public void createPackages() {
+//        List<PackagesDetail> packages = new ArrayList<>();
+//        Tier tier = getTier();
+//        Customer customer=new Customer();
+//        PackagesDetail packagesDetail = PackagesDetail.builder().id(1l)
+//                .packageName("Dianing").build();
+//        packages.add(packagesDetail);
+//        String correlationId="123";
+//        Packages packag=getPackages();
+//        Mockito.when(packageRepository.save(new Packages())).thenReturn(packag);
+//        List<Packages> response = customerConnectorsMock.createPackages(packages,customer, tier,correlationId);
+//        assertEquals(packages, response);
+//        assertEquals(packages.size(), response.size());
+//    }
+
+
+    @Test
+    public void createBenefit() {
+        List<BenefitDetail> benefitDetails = new ArrayList<>();
+        List<Long> vList = new ArrayList<>();
+        vList.add((long) 1);
+        BenefitDetail benefitDetail = BenefitDetail.builder().id(1l).vendorId(vList).benefitName("custom").build();
+        benefitDetails.add(benefitDetail);
+        Customer customer = getCustomer();
+        CustomerBenefit customerBenefit=getCustomerBenefits();
+        Mockito.when( benefitRepository.save(new CustomerBenefit())).thenReturn(customerBenefit);
+        String correlationId="123";
+        List<CustomerBenefit> response = customerConnectorsMock
+                .createBenefit(benefitDetails, customer,correlationId);
+        assertEquals(benefitDetails.size(), response.size());
+
+    }
+
+
+    @Test
+    public void createPackageBenefit() {
+        List<Packages> details=new ArrayList<>();
+        List<PackageBenefitsDetail> packageBenefitsDetails=new ArrayList<>();
+        PackageBenefitsDetail packageBenefitsDetail= PackageBenefitsDetail.builder()
+                .benefitId(1l).packageId(1l).build();
+        packageBenefitsDetails.add(packageBenefitsDetail);
+        List<CustomerBenefit> customerBenefits=new ArrayList<>();
+        CustomerBenefit customerBenefit=getCustomerBenefits();
+        customerBenefit.setCustomerBenefitId(1L);
+        customerBenefit.setBenefitName("benefit1");
+        customerBenefits.add(customerBenefit);
+        Packages packages=getPackages();
+        details.add(packages);
+        PackagesBenefit packagesBenefit =getPackagesBenefit();
+        Mockito.when( packageBenefitsRepository.save(new PackagesBenefit()))
+                .thenReturn(packagesBenefit);
+        String correlationId="123";
+        PackagesDetail packagesDetail = PackagesDetail.builder().customerId(1L).packageName("Dianing").build();
+        packagesDetail.setBenefits(customerBenefits);
+        List<PackagesDetail> packagesDetailList = new ArrayList<>();
+        packagesDetailList.add(packagesDetail);
+
+        List<PackagesBenefit> response = customerConnectorsMock
+                .createPackageBenefit(packagesDetailList,
+                        customerBenefits, details,correlationId);
+        assertEquals(packageBenefitsDetails.size(), response.size());
+
+    }
+
+
+    @Test
+    public void getCustomerTest() {
+        Customer customer=getCustomer();
+        Mockito.when(customerRepositoryMock.getRecordById(1L)).thenReturn(customer);
+        Customer response = customerConnectorsMock.getCustomer(1l,"123");
+        assertEquals(customer, response);
+        assertEquals(customer.getBusinessEmail(), response.getBusinessEmail());
+    }
+
+    @Test
+    public void updateCustomer() {
+        Customer customer = getCustomer();
+        Organization organization=getOrganization();
+        System.out.println("customer  >>" + customer);
+        CustomerDetail customerDetail = CustomerDetail.builder().customerId(99l).phoneNo("12345").organizationId(1l)
+                .userId(1l).businessName("Sangam").businessEmail("info@amazon.com").
+                        businessType("software").currency("USD").region("USA").
+                        isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+        Mockito.when(organizationRepositoryMock.getRecordById(1l)).thenReturn(organization);
+        Mockito.when(customerRepositoryMock.save(customer)).thenReturn(customer);
+        String correlationId="123";
+        Customer response = customerConnectorsMock.updateCustomer(customerDetail, customer,correlationId);
+        assertEquals(customer, response);
+        assertEquals(customer.getBusinessEmail(), response.getBusinessEmail());
+    }
+
+    @Test
+    public void updateCustomerAddress() {
+        CustomerAddressDetail addressDetail = CustomerAddressDetail.builder()
+              .customerId(1l)
+                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli")
+                .city("Bangalore")
+                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+        CustomerAddress customerAddress = getCustomerAddress();
+        Customer customer = getCustomer();
+
+        Mockito.when(addressRepository.getRecordById(1l))
+                .thenReturn(customerAddress);
+
+        Mockito.when(addressRepository.save(customerAddress))
+                .thenReturn(customerAddress);
+        String correlationId="123";
+        CustomerAddress response = customerAdapterMock
+                .updateCustomerAddress(addressDetail, customer,correlationId);
+        assertEquals(customerAddress, response);
+        assertEquals(customerAddress.getAddressLine1(), response.getAddressLine1());
+    }
+
+
+
+    @Test
+    public void updateTier() {
+        TierDetail tierDetail = TierDetail.builder().id(1l).tierName("Basic").build();
+        Tier tier = getTier();
+        Customer customer = getCustomer();
+        Mockito.when( tierRepository.getRecordById(1l)).thenReturn(tier);
+        Mockito.when(tierRepository.save(tier)).thenReturn(tier);
+        String correlationId="123";
+        Tier response = customerConnectorsMock.updateTier(tierDetail, customer,correlationId);
+        System.out.println(";;;;;   >>>"+response.getTierName());
+        assertEquals(tier, response);
+        assertEquals(tier.getTierName(), response.getTierName());
+    }
+
+    @Test
+    public void updatePackages() {
+        Customer customer = getCustomer();
+        Packages packages = getPackages();
+        Tier tier = getTier();
+        PackagesDetail packagesDetail = PackagesDetail.builder().id(1l)
+                .packageName("Dianing").build();
+        Mockito.when(packageRepository.getRecordById(1l)).thenReturn(packages);
+        Mockito.when(packageRepository.save(packages)).thenReturn(packages);
+        String correlationId="123";
+        Packages response = customerConnectorsMock.updatePackages(packagesDetail, customer,correlationId);
+        assertEquals(packages, response);
+        assertEquals(packages.getPackageName(), response.getPackageName());
+    }
+
+    @Test
+    public void updatePackageBenifit() {
+        Customer customer = getCustomer();
+        PackageBenefitsDetail packageBenefitsDetail= PackageBenefitsDetail.builder()
+                .id(1l).benefitId(1l).packageId(1l).build();
+        CustomerBenefit customerBenefit=getCustomerBenefits();
+        Packages packages=getPackages();
+        PackagesBenefit packagesBenefit =getPackagesBenefit();
+        Mockito.when( packageBenefitsRepository.getRecordById(1l))
+                .thenReturn(packagesBenefit);
+        Mockito.when(packageRepository.getRecordById(1l))
+                .thenReturn(packages);
+        Mockito.when( benefitRepository.getRecordById(1l))
+                .thenReturn(customerBenefit);
+        Mockito.when( packageBenefitsRepository.save(packagesBenefit))
+                .thenReturn(packagesBenefit);
+        String correlationId="123";
+        PackagesBenefit response = customerConnectorsMock
+                .updatePackageBenifit(packageBenefitsDetail, customer,correlationId);
+        assertEquals(packagesBenefit, response);
+        assertEquals(packagesBenefit.getPackageBenefitId(), response.getPackageBenefitId());
+    }
+
+    @Test
+    public void updateCustomerBenifit() {
+        List<Long> vList = new ArrayList<>();
+        vList.add((long) 1);
+        BenefitDetail benefitDetail = BenefitDetail.builder().id(1l).vendorId(vList).benefitName("custom").build();
+        Customer customer = getCustomer();
+        CustomerBenefit customerBenefit=getCustomerBenefits();
+        Mockito.when( benefitRepository.getRecordById(1l)).thenReturn(customerBenefit);
+        Mockito.when( benefitRepository.save(customerBenefit)).thenReturn(customerBenefit);
+        String correlationId="123";
+      CustomerBenefit response = customerConnectorsMock
+                .updateCustomerBenifit(benefitDetail, customer,correlationId);
+        assertEquals(customerBenefit, response);
+        assertEquals(customerBenefit.getCustomerBenefitId(), response.getCustomerBenefitId());
+    }
+
+    public Organization getOrganization() {
+        Organization organization = Organization.builder().organizationId(1l)
+                .organizationName("Java").
+                        organizationDesc("desc").isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+        System.out.println("org >>>" + organization.getOrganizationName());
+        return organization;
+    }
+
+    public Customer getCustomer() {
+        Organization organization = getOrganization();
+        Customer customer = Customer.builder().organizationId(organization).customerId(5l).phone("12345")
+                .userId(1l).businessName("Sangam").businessEmail("info@amazon.com").
+                        businessType("software").currency("USD").region("USA")
+                .isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+        return customer;
+    }
+
+    public CustomerAddress getCustomerAddress() {
+        CustomerAddress customerAddress = CustomerAddress.builder().customerAddressId(1l)
+                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli")
+                .city("Bangalore").customerId(getCustomer())
+                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+        return customerAddress;
+    }
+
+    public Tier getTier() {
+        Customer customer = getCustomer();
+
+        Tier tier = Tier.builder().customerId(customer).tierId(1l).tierName("Basic").isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+        return tier;
+    }
+
+    public Packages getPackages() {
+        Tier tier = getTier();
+        Packages packages = Packages.builder().tierId(tier).packageId(1l).packageName("Dianing").
+                createdBy("Admin").createdDate(new Date()).build();
+        return packages;
+    }
+
+    public CustomerBenefit getCustomerBenefits() {
+        Customer customer = getCustomer();
+        CustomerBenefit customerBenefit = CustomerBenefit.builder().customerId(customer).
+                vendorId(1l).build();
+        return customerBenefit;
+    }
+
+
+    public PackagesBenefit getPackagesBenefit() {
+        Packages packages = getPackages();
+        CustomerBenefit benefit = getCustomerBenefits();
+        PackagesBenefit pckgBenfit = PackagesBenefit.builder().packageId(packages)
+                .customerBenefitId(benefit).isActive(Boolean.TRUE)
+                .createdBy("admin").createdDate(new Date()).build();
+
+        return pckgBenfit;
+    }
+
+
+
+}
Index: src/test/java/com/syzegee/customer/events/bdd/stepdefination/CustomerControllerAcceptanceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/syzegee/customer/events/bdd/stepdefination/CustomerControllerAcceptanceTest.java b/src/test/java/com/syzegee/customer/events/bdd/stepdefination/CustomerControllerAcceptanceTest.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/test/java/com/syzegee/customer/events/bdd/stepdefination/CustomerControllerAcceptanceTest.java	(date 1613491889000)
@@ -0,0 +1,286 @@
+package com.syzegee.customer.events.bdd.stepdefination;
+
+import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.github.tomakehurst.wiremock.WireMockServer;
+import com.github.tomakehurst.wiremock.client.ResponseDefinitionBuilder;
+import com.syzegee.customer.events.model.*;
+import com.syzegee.customer.events.entity.Customer;
+import cucumber.api.java.en.Given;
+import cucumber.api.java.en.Then;
+import cucumber.api.java.en.When;
+import org.apache.http.HttpResponse;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.entity.StringEntity;
+import org.apache.http.impl.client.CloseableHttpClient;
+import org.apache.http.impl.client.HttpClients;
+
+import static com.github.tomakehurst.wiremock.client.WireMock.*;
+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;
+
+import org.springframework.http.HttpStatus;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
+public class CustomerControllerAcceptanceTest {
+    private final WireMockServer wireMockServer = new WireMockServer(options().dynamicPort());
+    private final CloseableHttpClient httpClient = HttpClients.createDefault();
+    CustomerCreateDetail customerCreateDetail;
+    OrganizationDetail organizationDetail;
+    CustomerUpdateDetail customerUpdateDetail;
+    Long customerId;
+    HttpResponse response;
+
+    @Given("^I am user and entering customer details$")
+    public void i_am_user_and_entering_customer_details() throws Throwable {
+        CustomerDetail customerDetail = CustomerDetail.builder().customerId(1l).userId(1l)
+                .businessName("Amazon").businessEmail("info@amazon.com").phoneNo("12335453")
+                .businessType("software").currency("USD").region("USA")
+                .createdBy("admin").createdDate(new Date()).updatedBy("admin").updatedDate(new Date()).build();
+
+
+        List<CustomerAddressDetail> custAddressDetail = new ArrayList<>();
+        List<PackagesDetail> detailList = new ArrayList<>();
+        CustomerAddressDetail customerAddressDetail = CustomerAddressDetail.builder()
+                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli").city("Bangalore")
+                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+        custAddressDetail.add(customerAddressDetail);
+
+        TierDetail tierDetail = TierDetail.builder().id(1l).tierName("Basic").build();
+
+        PackagesDetail packagesDetail = PackagesDetail.builder().id(1l).packageName("Dianing").build();
+        detailList.add(packagesDetail);
+        List<BenefitDetail> benefitDetails = new ArrayList<>();
+        List<Long> vList = new ArrayList<>();
+        vList.add((long) 1);
+        BenefitDetail benefitDetail = BenefitDetail.builder().id(1l).vendorId(vList).benefitName("custom").build();
+        benefitDetails.add(benefitDetail);
+
+        List<PackageBenefitsDetail> packageBenefitsDetails = new ArrayList<>();
+        PackageBenefitsDetail packageBenefitsDetail = PackageBenefitsDetail.builder().benefitId(1l).packageId(1l).build();
+        packageBenefitsDetails.add(packageBenefitsDetail);
+
+
+        Customer customer = Customer.builder().customerId(1l).build();
+
+        customerCreateDetail = CustomerCreateDetail.builder().orgDetail(organizationDetail)
+                .customerDetail(customerDetail).custAddressDetail(customerAddressDetail).tierDetail(tierDetail)
+                .packagesDetail(detailList).benefitDetail(benefitDetails)./*packageBenefitsDetail(packageBenefitsDetails)
+                .*/build();
+
+
+    }
+
+    @When("^organization is not provided$")
+    public void organization_is_not_provided() throws Throwable {
+        organizationDetail = null;
+
+    }
+
+
+    @Then("^Call create api with givens details$")
+    public void call_create_api_with_givens_details() throws Throwable {
+        String customerPayload = mapToJson(customerCreateDetail);
+        wireMockServer.start();
+        configureFor("localhost", wireMockServer.port());
+        stubFor(post("/customer/v1/create")
+                .withRequestBody(containing(customerPayload))
+                .willReturn(aResponse().withStatus(HttpStatus.BAD_REQUEST.value()).withStatusMessage(
+                        "Organization is empty")
+                ));
+        HttpPost request = new HttpPost(
+                "http://localhost:" + wireMockServer.port() + "/customer/v1/create");
+        StringEntity body = new StringEntity(customerPayload);
+        request.setEntity(body);
+        response = httpClient.execute(request);
+        System.out.println("response>>>   " + response.getStatusLine().getStatusCode());
+    }
+
+    @Then("^Return client error as  organization is not provided in payload post request$")
+    public void return_client_error_organization_is_not_provided_in_post_request() throws Throwable {
+        assertEquals("Organization is empty",
+                response.getStatusLine().getReasonPhrase());
+        assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatusLine().getStatusCode());
+        wireMockServer.stop();
+    }
+
+    @Given("^Enter customer details with organization in payload$")
+    public void enter_customer_details_with_organization_in_payload() throws Exception {
+        CustomerDetail customerDetail = CustomerDetail.builder().customerId(1l).userId(1l)
+                .businessName("Amazon").businessEmail("info@amazon.com").phoneNo("12335453")
+                .businessType("software").currency("USD").region("USA")
+                .createdBy("admin").createdDate(new Date()).updatedBy("admin").updatedDate(new Date()).build();
+
+
+        List<CustomerAddressDetail> custAddressDetail = new ArrayList<>();
+        List<PackagesDetail> detailList = new ArrayList<>();
+        CustomerAddressDetail customerAddressDetail = CustomerAddressDetail.builder()
+                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli").city("Bangalore")
+                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+        custAddressDetail.add(customerAddressDetail);
+
+        TierDetail tierDetail = TierDetail.builder().id(1l).tierName("Basic").build();
+
+        PackagesDetail packagesDetail = PackagesDetail.builder().id(1l).packageName("Dianing").build();
+        detailList.add(packagesDetail);
+        List<BenefitDetail> benefitDetails = new ArrayList<>();
+
+        List<Long> vList = new ArrayList<>();
+        vList.add((long) 1);
+        BenefitDetail benefitDetail = BenefitDetail.builder().id(1l).vendorId(vList).benefitName("custom").build();
+        benefitDetails.add(benefitDetail);
+
+        List<PackageBenefitsDetail> packageBenefitsDetails = new ArrayList<>();
+        PackageBenefitsDetail packageBenefitsDetail = PackageBenefitsDetail.builder().benefitId(1l).packageId(1l).build();
+        packageBenefitsDetails.add(packageBenefitsDetail);
+
+        List<CustomerUserDetail> customerUserDetails = new ArrayList<>();
+        Customer customer = Customer.builder().customerId(1l).build();
+        customerCreateDetail = CustomerCreateDetail.builder().orgDetail(organizationDetail)
+                .customerDetail(customerDetail).custAddressDetail(customerAddressDetail).tierDetail(tierDetail)
+                .packagesDetail(detailList).benefitDetail(benefitDetails)./*packageBenefitsDetail(packageBenefitsDetails)
+                .*/build();
+    }
+
+    @When("^organization is provided with valid id$")
+    public void organization_is_provided_with_valid_id() throws Exception {
+        organizationDetail = OrganizationDetail.builder().organizationId(1l).organizationName("Amazon")
+                .organizationDesc("desc").build();
+    }
+
+    @Then("^create the customer with given details$")
+    public void create_the_customer_with_given_details() throws Exception {
+        String customerPayload = mapToJson(customerCreateDetail);
+        wireMockServer.start();
+        configureFor("localhost", wireMockServer.port());
+        stubFor(post("/customer/v1/create")
+                .withRequestBody(containing(customerPayload))
+                .willReturn(aResponse().withStatus(HttpStatus.OK.value())
+                ));
+        HttpPost request = new HttpPost(
+                "http://localhost:" + wireMockServer.port() + "/customer/v1/create");
+        StringEntity body = new StringEntity(customerPayload);
+        request.setEntity(body);
+        response = httpClient.execute(request);
+        System.out.println("response>>>   " + response.getStatusLine().getStatusCode());
+        assertEquals(HttpStatus.OK.value(), response.getStatusLine().getStatusCode());
+        wireMockServer.stop();
+    }
+
+    public static ResponseDefinitionBuilder aResponse() {
+        return new ResponseDefinitionBuilder();
+    }
+
+    private String mapToJson(Object object) throws JsonProcessingException {
+        ObjectMapper mapper = new ObjectMapper();
+        return mapper.writeValueAsString(object);
+    }
+
+    @Given("^I am user and entering update details$")
+    public void i_am_user_and_entering_update_details() throws Exception {
+        CustomerDetail customerDetail = CustomerDetail.builder().customerId(1l).userId(1l)
+                .businessName("Amazon").businessEmail("info@amazon.com").phoneNo("12335453")
+                .businessType("software").currency("USD").region("USA")
+                .createdBy("admin").createdDate(new Date()).updatedBy("admin").updatedDate(new Date()).build();
+        CustomerAddressDetail customerAddressDetail = CustomerAddressDetail.builder()
+                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli").city("Bangalore")
+                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+
+        TierDetail tierDetail = TierDetail.builder().id(1l).tierName("Basic").build();
+
+        PackagesDetail packagesDetail = PackagesDetail.builder().id(1l).packageName("Dianing").build();
+        List<Long> vList = new ArrayList<>();
+        vList.add((long) 1);
+        BenefitDetail benefitDetail = BenefitDetail.builder().id(1l).vendorId(vList).
+                benefitName("custom").build();
+        PackageBenefitsDetail packageBenefitsDetail = PackageBenefitsDetail.builder().benefitId(1l).packageId(1l).build();
+        Customer customer = Customer.builder().customerId(1l).build();
+        customerUpdateDetail = CustomerUpdateDetail.builder()
+                .customerDetail(customerDetail).custAddressDetail(customerAddressDetail).tierDetail(tierDetail)
+                .packagesDetail(packagesDetail).benefitDetail(benefitDetail).packageBenefitsDetail(packageBenefitsDetail).build();
+        String payload = mapToJson(customerUpdateDetail);
+    }
+
+    @When("^customerId is not provided$")
+    public void customerid_is_not_provided() throws Exception {
+        customerId = null;
+    }
+
+    @Then("^Call update api with givens details$")
+    public void call_update_api_with_givens_details() throws Exception {
+        String customerPayload = mapToJson(customerCreateDetail);
+        wireMockServer.start();
+        configureFor("localhost", wireMockServer.port());
+        stubFor(put("/customer/v1/update" + customerId)
+                .withRequestBody(containing(customerPayload))
+                .willReturn(aResponse().withStatus(HttpStatus.BAD_REQUEST.value()).withStatusMessage(
+                        "customer with given id is not present in record")
+                ));
+        HttpPut request = new HttpPut(
+                "http://localhost:" + wireMockServer.port() + "/customer/v1/update" + customerId);
+        StringEntity body = new StringEntity(customerPayload);
+        request.setEntity(body);
+        response = httpClient.execute(request);
+    }
+
+    @Then("^Return client error as  update is not provided in payload put request$")
+    public void return_client_error_as_update_is_not_provided_in_payload_put_request() throws Exception {
+        assertEquals("customer with given id is not present in record",
+                response.getStatusLine().getReasonPhrase());
+        assertEquals(HttpStatus.BAD_REQUEST.value(), response.getStatusLine().getStatusCode());
+        wireMockServer.stop();
+    }
+
+    @Given("^Enter customer details with valid customerId in payload$")
+    public void enter_customer_details_with_valid_customerId_in_payload() throws Exception {
+        CustomerDetail customerDetail = CustomerDetail.builder().customerId(1l).userId(1l)
+                .businessName("Amazon").businessEmail("info@amazon.com").phoneNo("12335453")
+                .businessType("software").currency("USD").region("USA")
+                .createdBy("admin").createdDate(new Date()).updatedBy("admin").updatedDate(new Date()).build();
+        CustomerAddressDetail customerAddressDetail = CustomerAddressDetail.builder()
+                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli").city("Bangalore")
+                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+        TierDetail tierDetail = TierDetail.builder().id(1l).tierName("Basic").build();
+        PackagesDetail packagesDetail = PackagesDetail.builder().id(1l).packageName("Dianing").build();
+        List<Long> vList = new ArrayList<>();
+        vList.add((long) 1);
+        BenefitDetail benefitDetail = BenefitDetail.builder().id(1l).vendorId(vList).
+                benefitName("custom").build();
+        PackageBenefitsDetail packageBenefitsDetail = PackageBenefitsDetail.builder().benefitId(1l).packageId(1l).build();
+        Customer customer = Customer.builder().customerId(1l).build();
+        customerUpdateDetail = CustomerUpdateDetail.builder()
+                .customerDetail(customerDetail).custAddressDetail(customerAddressDetail).tierDetail(tierDetail)
+                .packagesDetail(packagesDetail).benefitDetail(benefitDetail).packageBenefitsDetail(packageBenefitsDetail).build();
+        String payload = mapToJson(customerUpdateDetail);
+        System.out.println("payload>>>  " + payload);
+    }
+
+    @When("^update details is provided with valid id$")
+    public void update_details_is_provided_with_valid_id() throws Exception {
+        customerId = 1l;
+    }
+
+    @Then("^update the customer with given details$")
+    public void update_the_customer_with_given_details() throws Exception {
+        String customerPayload = mapToJson(customerCreateDetail);
+        wireMockServer.start();
+        configureFor("localhost", wireMockServer.port());
+        stubFor(put("/customer/v1/update/" + customerId)
+                .withRequestBody(containing(customerPayload))
+                .willReturn(aResponse().withStatus(HttpStatus.OK.value())
+                ));
+        HttpPut request = new HttpPut(
+                "http://localhost:" + wireMockServer.port() + "/customer/v1/update/" + customerId);
+        StringEntity body = new StringEntity(customerPayload);
+        request.setEntity(body);
+        response = httpClient.execute(request);
+        System.out.println("response>>>   " + response.getStatusLine().getStatusCode());
+        assertEquals(HttpStatus.OK.value(), response.getStatusLine().getStatusCode());
+        wireMockServer.stop();
+    }
+}
Index: src/test/resources/Features/update_customer.feature
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/Features/update_customer.feature b/src/test/resources/Features/update_customer.feature
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/test/resources/Features/update_customer.feature	(date 1613491889000)
@@ -0,0 +1,13 @@
+Feature: Testing customer update REST API
+ #updatecustomer fails when organization is not provided
+  Scenario: update customer fails when customerId not provided
+    Given I am user and entering update details
+    When customerId is not provided
+    Then Call update api with givens details
+    And Return client error as  update is not provided in payload put request
+
+#createcustomer
+  Scenario: update customer Success
+    Given Enter customer details with valid customerId in payload
+    When update details is provided with valid id
+    Then update the customer with given details
\ No newline at end of file
Index: src/test/resources/Features/create_customer.feature
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/Features/create_customer.feature b/src/test/resources/Features/create_customer.feature
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/test/resources/Features/create_customer.feature	(date 1613491889000)
@@ -0,0 +1,13 @@
+Feature: Testing customer REST API
+ #createcustomer fails when organization is not provided
+  Scenario: create customer fails when organization is not provided
+    Given I am user and entering customer details
+    When organization is not provided
+    Then Call create api with givens details
+    And Return client error as  organization is not provided in payload post request
+
+#createcustomer
+  Scenario: create customer Success
+    Given Enter customer details with organization in payload
+    When organization is provided with valid id
+    Then create the customer with given details
\ No newline at end of file
Index: src/test/java/com/syzegee/customer/events/controller/CustomerControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/syzegee/customer/events/controller/CustomerControllerTest.java b/src/test/java/com/syzegee/customer/events/controller/CustomerControllerTest.java
new file mode 100644
--- /dev/null	(date 1613491889000)
+++ b/src/test/java/com/syzegee/customer/events/controller/CustomerControllerTest.java	(date 1613491889000)
@@ -0,0 +1,119 @@
+/*
+ * To change this license header, choose License Headers in Project Properties.
+ * To change this template file, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package com.syzegee.customer.events.controller;
+
+import com.syzegee.customer.events.service.CustomerService;
+import org.junit.Ignore;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
+import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.mock.mockito.MockBean;
+import org.springframework.test.context.junit4.SpringRunner;
+import org.springframework.test.web.servlet.MockMvc;
+
+/**
+ *
+ * @author Akshay
+ */
+
+@RunWith(SpringRunner.class)
+@SpringBootTest
+@AutoConfigureMockMvc
+@Ignore
+public class CustomerControllerTest {
+
+    @Autowired
+    private MockMvc mockMvc;
+    @MockBean
+    CustomerService customerService;
+//    @MockBean
+//    CustomerValidator validator;
+    /**
+     * Test of creatCustomer method, of class CustomerController.
+     */
+//    @Test
+//    public void testCreatCustomer() throws Exception {
+//        System.out.println("creatCustomer");
+//        String url = "/customer/v1";
+//        CustomerDetail customerDetail= CustomerDetail.builder().customerId(1l).userId("User1")
+//                .businessName("Amazon").businessEmail("info@amazon.com").phoneNo("12335453")
+//                .businessType("software").currency("USD").region("USA")
+//                .createdBy("admin").createdDate(new Date()).updatedBy("admin").updatedDate(new Date()).build();
+//        OrganizationDetail organizationDetail= OrganizationDetail.builder().organizationId(1l).organizationName("Amazon")
+//                .organizationDesc("desc").build();
+//        List<CustomerAddressDetail> custAddressDetail= new ArrayList<>();
+//        CustomerAddressDetail customerAddressDetail= CustomerAddressDetail.builder().customerAddressId(1l)
+//                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli").city("Bangalore")
+//                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+//        custAddressDetail.add(customerAddressDetail);
+//        TierDetail tierDetail= TierDetail.builder().id(1l).tierName("Basic").build();
+//        List<PackagesDetail> detailList=new ArrayList<>();
+//        PackagesDetail packagesDetail= PackagesDetail.builder().id(1l).packageName("Dianing").build();
+//        detailList.add(packagesDetail);
+//        List<BenefitDetail> benefitDetails=new ArrayList<>();
+//        BenefitDetail benefitDetail = BenefitDetail.builder().id(1l).vendorId(1l).benefitName("custom").build();
+//        benefitDetails.add(benefitDetail);
+//        List<PackageBenefitsDetail> packageBenefitsDetails=new ArrayList<>();
+//        PackageBenefitsDetail packageBenefitsDetail= PackageBenefitsDetail.builder().benefitId(1l).packageId(1l).build();
+//        packageBenefitsDetails.add(packageBenefitsDetail);
+//        Customer customer = Customer.builder().customerId(1l).build();
+//        CustomerCreateDetail customerCreateDetail = CustomerCreateDetail.builder().orgDetail(organizationDetail)
+//                .customerDetail(customerDetail).custAddressDetail(custAddressDetail).tierDetail(tierDetail)
+//                .packagesDetail(detailList).benefitDetail(benefitDetails).packageBenefitsDetail(packageBenefitsDetails)
+//                       .build();
+//        String payload=mapToJson(customerCreateDetail);
+//        System.out.println("payload>>>  "+payload);
+//        RequestBuilder request = MockMvcRequestBuilders
+//                .post(url)
+//                .accept(MediaType.APPLICATION_JSON).
+//                header("correlationId","")
+//                .content(payload)
+//                //.characterEncoding("utf-8")
+//                .contentType(MediaType.APPLICATION_JSON);
+//        MvcResult result1 = mockMvc.perform(request)
+//                .andExpect(status().isOk()).andReturn();
+//    }
+
+
+//    @Test
+//    public void testCustomerPutRequest()throws Exception{
+//        System.out.println("creatCustomer");
+//        String url = "/customer/v1/41";
+//        CustomerDetail customerDetail= CustomerDetail.builder().customerId(1l).userId("User1")
+//                .businessName("Amazon").businessEmail("info@amazon.com").phoneNo("12335453")
+//                .businessType("software").currency("USD").region("USA")
+//                .createdBy("admin").createdDate(new Date()).updatedBy("admin").updatedDate(new Date()).build();
+//        CustomerAddressDetail customerAddressDetail= CustomerAddressDetail.builder().customerAddressId(1l)
+//                .addressLine1("HSR").addressLine2("BTM").addressLine3("marathalli").city("Bangalore")
+//                .sate("Karnataka").zipCode("1232").countryCode("1233").build();
+//        TierDetail tierDetail= TierDetail.builder().id(1l).tierName("Basic").build();
+//        PackagesDetail packagesDetail= PackagesDetail.builder().id(1l).packageName("Dianing").build();
+//        BenefitDetail benefitDetail = BenefitDetail.builder().id(1l).vendorId(1l).
+//                benefitName("custom").build();
+//        PackageBenefitsDetail packageBenefitsDetail= PackageBenefitsDetail.builder().benefitId(1l).packageId(1l).build();
+//        Customer customer = Customer.builder().customerId(1l).build();
+//        CustomerUpdateDatail customerUpdateDatail = CustomerUpdateDatail.builder()
+//                .customerDetail(customerDetail).custAddressDetail(customerAddressDetail).tierDetail(tierDetail)
+//                .packagesDetail(packagesDetail).benefitDetail(benefitDetail).packageBenefitsDetail(packageBenefitsDetail).build();
+//        String payload=mapToJson(customerUpdateDatail);
+//        System.out.println("payload>>>  "+payload);
+//        RequestBuilder request = MockMvcRequestBuilders
+//                .put(url)
+//                .header("correlationId","")
+//                .accept(MediaType.APPLICATION_JSON)
+//                .content(payload)
+//                .contentType(MediaType.APPLICATION_JSON);
+//
+//        MvcResult result1 = mockMvc.perform(request)
+//                .andExpect(status().isOk()).andReturn();
+//    }
+//    private String mapToJson(Object object) throws JsonProcessingException {
+//        ObjectMapper mapper = new ObjectMapper();
+//        return mapper.writeValueAsString(object);
+//    }
+
+}
